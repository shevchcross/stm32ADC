
ADC_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b890  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008d0  0800bb28  0800bb28  0001bb28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c3f8  0800c3f8  00020120  2**0
                  CONTENTS
  4 .ARM          00000008  0800c3f8  0800c3f8  0001c3f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c400  0800c400  00020120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c400  0800c400  0001c400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c404  0800c404  0001c404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  24000000  0800c408  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000060  0800c468  00020060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000c0  0800c4c8  000200c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000918  24000120  0800c528  00020120  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000a38  0800c528  00020a38  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  0002014e  2**0
                  CONTENTS, READONLY
 15 .debug_info   00022e52  00000000  00000000  00020191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000383e  00000000  00000000  00042fe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001a80  00000000  00000000  00046828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000014b8  00000000  00000000  000482a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003dfc0  00000000  00000000  00049760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00022bf4  00000000  00000000  00087720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001a0a8f  00000000  00000000  000aa314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000076ec  00000000  00000000  0024ada4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000071  00000000  00000000  00252490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000120 	.word	0x24000120
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800bb10 	.word	0x0800bb10

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000124 	.word	0x24000124
 80002d4:	0800bb10 	.word	0x0800bb10

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d8:	4b3d      	ldr	r3, [pc, #244]	; (80006d0 <SystemInit+0xfc>)
 80005da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005de:	4a3c      	ldr	r2, [pc, #240]	; (80006d0 <SystemInit+0xfc>)
 80005e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e8:	4b39      	ldr	r3, [pc, #228]	; (80006d0 <SystemInit+0xfc>)
 80005ea:	691b      	ldr	r3, [r3, #16]
 80005ec:	4a38      	ldr	r2, [pc, #224]	; (80006d0 <SystemInit+0xfc>)
 80005ee:	f043 0310 	orr.w	r3, r3, #16
 80005f2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f4:	4b37      	ldr	r3, [pc, #220]	; (80006d4 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f003 030f 	and.w	r3, r3, #15
 80005fc:	2b06      	cmp	r3, #6
 80005fe:	d807      	bhi.n	8000610 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000600:	4b34      	ldr	r3, [pc, #208]	; (80006d4 <SystemInit+0x100>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f023 030f 	bic.w	r3, r3, #15
 8000608:	4a32      	ldr	r2, [pc, #200]	; (80006d4 <SystemInit+0x100>)
 800060a:	f043 0307 	orr.w	r3, r3, #7
 800060e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000610:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <SystemInit+0x104>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a30      	ldr	r2, [pc, #192]	; (80006d8 <SystemInit+0x104>)
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800061c:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <SystemInit+0x104>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000622:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <SystemInit+0x104>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	492c      	ldr	r1, [pc, #176]	; (80006d8 <SystemInit+0x104>)
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <SystemInit+0x108>)
 800062a:	4013      	ands	r3, r2
 800062c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062e:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	2b00      	cmp	r3, #0
 8000638:	d007      	beq.n	800064a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063a:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <SystemInit+0x100>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f023 030f 	bic.w	r3, r3, #15
 8000642:	4a24      	ldr	r2, [pc, #144]	; (80006d4 <SystemInit+0x100>)
 8000644:	f043 0307 	orr.w	r3, r3, #7
 8000648:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <SystemInit+0x104>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <SystemInit+0x104>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <SystemInit+0x104>)
 800065e:	4a20      	ldr	r2, [pc, #128]	; (80006e0 <SystemInit+0x10c>)
 8000660:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <SystemInit+0x104>)
 8000664:	4a1f      	ldr	r2, [pc, #124]	; (80006e4 <SystemInit+0x110>)
 8000666:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <SystemInit+0x104>)
 800066a:	4a1f      	ldr	r2, [pc, #124]	; (80006e8 <SystemInit+0x114>)
 800066c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <SystemInit+0x104>)
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <SystemInit+0x114>)
 8000678:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <SystemInit+0x104>)
 8000682:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <SystemInit+0x114>)
 8000684:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <SystemInit+0x104>)
 8000688:	2200      	movs	r2, #0
 800068a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <SystemInit+0x104>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a11      	ldr	r2, [pc, #68]	; (80006d8 <SystemInit+0x104>)
 8000692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000696:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <SystemInit+0x104>)
 800069a:	2200      	movs	r2, #0
 800069c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <SystemInit+0x118>)
 80006a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <SystemInit+0x118>)
 80006a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a8:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <SystemInit+0x11c>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <SystemInit+0x120>)
 80006b0:	4013      	ands	r3, r2
 80006b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b6:	d202      	bcs.n	80006be <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <SystemInit+0x124>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <SystemInit+0x128>)
 80006c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c4:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00
 80006d4:	52002000 	.word	0x52002000
 80006d8:	58024400 	.word	0x58024400
 80006dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e0:	02020200 	.word	0x02020200
 80006e4:	01ff0000 	.word	0x01ff0000
 80006e8:	01010280 	.word	0x01010280
 80006ec:	580000c0 	.word	0x580000c0
 80006f0:	5c001000 	.word	0x5c001000
 80006f4:	ffff0000 	.word	0xffff0000
 80006f8:	51008108 	.word	0x51008108
 80006fc:	52004000 	.word	0x52004000

08000700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b088      	sub	sp, #32
 8000704:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000706:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800070a:	61fb      	str	r3, [r7, #28]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800070c:	bf00      	nop
 800070e:	4b58      	ldr	r3, [pc, #352]	; (8000870 <main+0x170>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000716:	2b00      	cmp	r3, #0
 8000718:	d004      	beq.n	8000724 <main+0x24>
 800071a:	69fb      	ldr	r3, [r7, #28]
 800071c:	1e5a      	subs	r2, r3, #1
 800071e:	61fa      	str	r2, [r7, #28]
 8000720:	2b00      	cmp	r3, #0
 8000722:	dcf4      	bgt.n	800070e <main+0xe>
  if ( timeout < 0 )
 8000724:	69fb      	ldr	r3, [r7, #28]
 8000726:	2b00      	cmp	r3, #0
 8000728:	da01      	bge.n	800072e <main+0x2e>
  {
  Error_Handler();
 800072a:	f000 fb43 	bl	8000db4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072e:	f000 fe4b 	bl	80013c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000732:	f000 f8a5 	bl	8000880 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000736:	4b4e      	ldr	r3, [pc, #312]	; (8000870 <main+0x170>)
 8000738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073c:	4a4c      	ldr	r2, [pc, #304]	; (8000870 <main+0x170>)
 800073e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000742:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000746:	4b4a      	ldr	r3, [pc, #296]	; (8000870 <main+0x170>)
 8000748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000754:	2000      	movs	r0, #0
 8000756:	f005 fac3 	bl	8005ce0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800075a:	2100      	movs	r1, #0
 800075c:	2000      	movs	r0, #0
 800075e:	f005 fad9 	bl	8005d14 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000762:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000766:	61fb      	str	r3, [r7, #28]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000768:	bf00      	nop
 800076a:	4b41      	ldr	r3, [pc, #260]	; (8000870 <main+0x170>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000772:	2b00      	cmp	r3, #0
 8000774:	d104      	bne.n	8000780 <main+0x80>
 8000776:	69fb      	ldr	r3, [r7, #28]
 8000778:	1e5a      	subs	r2, r3, #1
 800077a:	61fa      	str	r2, [r7, #28]
 800077c:	2b00      	cmp	r3, #0
 800077e:	dcf4      	bgt.n	800076a <main+0x6a>
if ( timeout < 0 )
 8000780:	69fb      	ldr	r3, [r7, #28]
 8000782:	2b00      	cmp	r3, #0
 8000784:	da01      	bge.n	800078a <main+0x8a>
{
Error_Handler();
 8000786:	f000 fb15 	bl	8000db4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078a:	f000 faad 	bl	8000ce8 <MX_GPIO_Init>
  MX_DMA_Init();
 800078e:	f000 fa8b 	bl	8000ca8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000792:	f000 fa0b 	bl	8000bac <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000796:	f000 fa55 	bl	8000c44 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 800079a:	f000 f8ed 	bl	8000978 <MX_ADC1_Init>
  MX_ETH_Init();
 800079e:	f000 f965 	bl	8000a6c <MX_ETH_Init>
  MX_TIM1_Init();
 80007a2:	f000 f9af 	bl	8000b04 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
 // HAL_ADCEx_Calibration_Start(&hadc1);
  HAL_ADC_Start_DMA(&hadc1, &AD_RES, 1);
 80007a6:	2201      	movs	r2, #1
 80007a8:	4932      	ldr	r1, [pc, #200]	; (8000874 <main+0x174>)
 80007aa:	4833      	ldr	r0, [pc, #204]	; (8000878 <main+0x178>)
 80007ac:	f001 fb6e 	bl	8001e8c <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_ADC_PollForConversion(&hadc1, 2);
 80007b0:	2102      	movs	r1, #2
 80007b2:	4831      	ldr	r0, [pc, #196]	; (8000878 <main+0x178>)
 80007b4:	f001 fa76 	bl	8001ca4 <HAL_ADC_PollForConversion>
		AD_RES = HAL_ADC_GetValue(&hadc1);
 80007b8:	482f      	ldr	r0, [pc, #188]	; (8000878 <main+0x178>)
 80007ba:	f001 fc2b 	bl	8002014 <HAL_ADC_GetValue>
 80007be:	4603      	mov	r3, r0
 80007c0:	4a2c      	ldr	r2, [pc, #176]	; (8000874 <main+0x174>)
 80007c2:	6013      	str	r3, [r2, #0]
		adcVoltage = AD_RES * 5 / 65536;
 80007c4:	4b2b      	ldr	r3, [pc, #172]	; (8000874 <main+0x174>)
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	4613      	mov	r3, r2
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	4413      	add	r3, r2
 80007ce:	0c1b      	lsrs	r3, r3, #16
 80007d0:	ee07 3a90 	vmov	s15, r3
 80007d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007d8:	4b28      	ldr	r3, [pc, #160]	; (800087c <main+0x17c>)
 80007da:	edc3 7a00 	vstr	s15, [r3]
		double ntcResistance = (adcVoltage * NCP18XH103_REF_RESISTANCE) / (5 - adcVoltage);
 80007de:	4b27      	ldr	r3, [pc, #156]	; (800087c <main+0x17c>)
 80007e0:	edd3 7a00 	vldr	s15, [r3]
 80007e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80007e8:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8000850 <main+0x150>
 80007ec:	ee27 5b06 	vmul.f64	d5, d7, d6
 80007f0:	4b22      	ldr	r3, [pc, #136]	; (800087c <main+0x17c>)
 80007f2:	edd3 7a00 	vldr	s15, [r3]
 80007f6:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80007fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80007fe:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000802:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000806:	ed87 7b04 	vstr	d7, [r7, #16]
		double temperature = 1.0 / ((1.0 / (25.0 + 273.15)) + ((1.0 / NCP18XH103_BETA) * log(ntcResistance / NCP18XH103_REF_RESISTANCE)));
 800080a:	ed97 7b04 	vldr	d7, [r7, #16]
 800080e:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8000850 <main+0x150>
 8000812:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000816:	eeb0 0b46 	vmov.f64	d0, d6
 800081a:	f00b f84d 	bl	800b8b8 <log>
 800081e:	eeb0 7b40 	vmov.f64	d7, d0
 8000822:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8000858 <main+0x158>
 8000826:	ee27 7b06 	vmul.f64	d7, d7, d6
 800082a:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8000860 <main+0x160>
 800082e:	ee37 6b06 	vadd.f64	d6, d7, d6
 8000832:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8000836:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800083a:	ed87 7b02 	vstr	d7, [r7, #8]
		temperature -= 273.15;
 800083e:	ed97 7b02 	vldr	d7, [r7, #8]
 8000842:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000868 <main+0x168>
 8000846:	ee37 7b46 	vsub.f64	d7, d7, d6
 800084a:	ed87 7b02 	vstr	d7, [r7, #8]
  {
 800084e:	e7af      	b.n	80007b0 <main+0xb0>
 8000850:	00000000 	.word	0x00000000
 8000854:	40c38800 	.word	0x40c38800
 8000858:	9d0dc11b 	.word	0x9d0dc11b
 800085c:	3eff05e0 	.word	0x3eff05e0
 8000860:	dcb5db83 	.word	0xdcb5db83
 8000864:	3f6b79e1 	.word	0x3f6b79e1
 8000868:	66666666 	.word	0x66666666
 800086c:	40711266 	.word	0x40711266
 8000870:	58024400 	.word	0x58024400
 8000874:	2400013c 	.word	0x2400013c
 8000878:	2400017c 	.word	0x2400017c
 800087c:	24000140 	.word	0x24000140

08000880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b09c      	sub	sp, #112	; 0x70
 8000884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800088a:	224c      	movs	r2, #76	; 0x4c
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f00a ffe0 	bl	800b854 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	2220      	movs	r2, #32
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f00a ffda 	bl	800b854 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008a0:	2004      	movs	r0, #4
 80008a2:	f005 fb93 	bl	8005fcc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008a6:	2300      	movs	r3, #0
 80008a8:	603b      	str	r3, [r7, #0]
 80008aa:	4b31      	ldr	r3, [pc, #196]	; (8000970 <SystemClock_Config+0xf0>)
 80008ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ae:	4a30      	ldr	r2, [pc, #192]	; (8000970 <SystemClock_Config+0xf0>)
 80008b0:	f023 0301 	bic.w	r3, r3, #1
 80008b4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008b6:	4b2e      	ldr	r3, [pc, #184]	; (8000970 <SystemClock_Config+0xf0>)
 80008b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	4b2c      	ldr	r3, [pc, #176]	; (8000974 <SystemClock_Config+0xf4>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008c8:	4a2a      	ldr	r2, [pc, #168]	; (8000974 <SystemClock_Config+0xf4>)
 80008ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ce:	6193      	str	r3, [r2, #24]
 80008d0:	4b28      	ldr	r3, [pc, #160]	; (8000974 <SystemClock_Config+0xf4>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008d8:	603b      	str	r3, [r7, #0]
 80008da:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008dc:	bf00      	nop
 80008de:	4b25      	ldr	r3, [pc, #148]	; (8000974 <SystemClock_Config+0xf4>)
 80008e0:	699b      	ldr	r3, [r3, #24]
 80008e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008ea:	d1f8      	bne.n	80008de <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008ec:	2301      	movs	r3, #1
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008f0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f6:	2302      	movs	r3, #2
 80008f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008fa:	2302      	movs	r3, #2
 80008fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008fe:	2301      	movs	r3, #1
 8000900:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000902:	2312      	movs	r3, #18
 8000904:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000906:	2302      	movs	r3, #2
 8000908:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800090a:	2302      	movs	r3, #2
 800090c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800090e:	2302      	movs	r3, #2
 8000910:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000912:	230c      	movs	r3, #12
 8000914:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000916:	2302      	movs	r3, #2
 8000918:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000922:	4618      	mov	r0, r3
 8000924:	f005 fbbc 	bl	80060a0 <HAL_RCC_OscConfig>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800092e:	f000 fa41 	bl	8000db4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000932:	233f      	movs	r3, #63	; 0x3f
 8000934:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000936:	2303      	movs	r3, #3
 8000938:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000942:	2340      	movs	r3, #64	; 0x40
 8000944:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000946:	2340      	movs	r3, #64	; 0x40
 8000948:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800094a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800094e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000950:	2340      	movs	r3, #64	; 0x40
 8000952:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	2101      	movs	r1, #1
 8000958:	4618      	mov	r0, r3
 800095a:	f005 fffb 	bl	8006954 <HAL_RCC_ClockConfig>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000964:	f000 fa26 	bl	8000db4 <Error_Handler>
  }
}
 8000968:	bf00      	nop
 800096a:	3770      	adds	r7, #112	; 0x70
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	58000400 	.word	0x58000400
 8000974:	58024800 	.word	0x58024800

08000978 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	; 0x28
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800098a:	463b      	mov	r3, r7
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
 8000998:	615a      	str	r2, [r3, #20]
 800099a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800099c:	4b30      	ldr	r3, [pc, #192]	; (8000a60 <MX_ADC1_Init+0xe8>)
 800099e:	4a31      	ldr	r2, [pc, #196]	; (8000a64 <MX_ADC1_Init+0xec>)
 80009a0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80009a2:	4b2f      	ldr	r3, [pc, #188]	; (8000a60 <MX_ADC1_Init+0xe8>)
 80009a4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80009a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80009aa:	4b2d      	ldr	r3, [pc, #180]	; (8000a60 <MX_ADC1_Init+0xe8>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009b0:	4b2b      	ldr	r3, [pc, #172]	; (8000a60 <MX_ADC1_Init+0xe8>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009b6:	4b2a      	ldr	r3, [pc, #168]	; (8000a60 <MX_ADC1_Init+0xe8>)
 80009b8:	2204      	movs	r2, #4
 80009ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009bc:	4b28      	ldr	r3, [pc, #160]	; (8000a60 <MX_ADC1_Init+0xe8>)
 80009be:	2200      	movs	r2, #0
 80009c0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009c2:	4b27      	ldr	r3, [pc, #156]	; (8000a60 <MX_ADC1_Init+0xe8>)
 80009c4:	2201      	movs	r2, #1
 80009c6:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80009c8:	4b25      	ldr	r3, [pc, #148]	; (8000a60 <MX_ADC1_Init+0xe8>)
 80009ca:	2201      	movs	r2, #1
 80009cc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009ce:	4b24      	ldr	r3, [pc, #144]	; (8000a60 <MX_ADC1_Init+0xe8>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009d4:	4b22      	ldr	r3, [pc, #136]	; (8000a60 <MX_ADC1_Init+0xe8>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009da:	4b21      	ldr	r3, [pc, #132]	; (8000a60 <MX_ADC1_Init+0xe8>)
 80009dc:	2200      	movs	r2, #0
 80009de:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80009e0:	4b1f      	ldr	r3, [pc, #124]	; (8000a60 <MX_ADC1_Init+0xe8>)
 80009e2:	2203      	movs	r2, #3
 80009e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80009e6:	4b1e      	ldr	r3, [pc, #120]	; (8000a60 <MX_ADC1_Init+0xe8>)
 80009e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009ec:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009ee:	4b1c      	ldr	r3, [pc, #112]	; (8000a60 <MX_ADC1_Init+0xe8>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80009f4:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <MX_ADC1_Init+0xe8>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009fc:	4818      	ldr	r0, [pc, #96]	; (8000a60 <MX_ADC1_Init+0xe8>)
 80009fe:	f000 ffaf 	bl	8001960 <HAL_ADC_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000a08:	f000 f9d4 	bl	8000db4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a10:	f107 031c 	add.w	r3, r7, #28
 8000a14:	4619      	mov	r1, r3
 8000a16:	4812      	ldr	r0, [pc, #72]	; (8000a60 <MX_ADC1_Init+0xe8>)
 8000a18:	f002 f8c8 	bl	8002bac <HAL_ADCEx_MultiModeConfigChannel>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000a22:	f000 f9c7 	bl	8000db4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <MX_ADC1_Init+0xf0>)
 8000a28:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a2a:	2306      	movs	r3, #6
 8000a2c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8000a2e:	2305      	movs	r3, #5
 8000a30:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a32:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000a36:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a38:	2304      	movs	r3, #4
 8000a3a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a40:	2300      	movs	r3, #0
 8000a42:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a44:	463b      	mov	r3, r7
 8000a46:	4619      	mov	r1, r3
 8000a48:	4805      	ldr	r0, [pc, #20]	; (8000a60 <MX_ADC1_Init+0xe8>)
 8000a4a:	f001 fb0f 	bl	800206c <HAL_ADC_ConfigChannel>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000a54:	f000 f9ae 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a58:	bf00      	nop
 8000a5a:	3728      	adds	r7, #40	; 0x28
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	2400017c 	.word	0x2400017c
 8000a64:	40022000 	.word	0x40022000
 8000a68:	4b840000 	.word	0x4b840000

08000a6c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a70:	4b1e      	ldr	r3, [pc, #120]	; (8000aec <MX_ETH_Init+0x80>)
 8000a72:	4a1f      	ldr	r2, [pc, #124]	; (8000af0 <MX_ETH_Init+0x84>)
 8000a74:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a76:	4b1f      	ldr	r3, [pc, #124]	; (8000af4 <MX_ETH_Init+0x88>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a7c:	4b1d      	ldr	r3, [pc, #116]	; (8000af4 <MX_ETH_Init+0x88>)
 8000a7e:	2280      	movs	r2, #128	; 0x80
 8000a80:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a82:	4b1c      	ldr	r3, [pc, #112]	; (8000af4 <MX_ETH_Init+0x88>)
 8000a84:	22e1      	movs	r2, #225	; 0xe1
 8000a86:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a88:	4b1a      	ldr	r3, [pc, #104]	; (8000af4 <MX_ETH_Init+0x88>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a8e:	4b19      	ldr	r3, [pc, #100]	; (8000af4 <MX_ETH_Init+0x88>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a94:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <MX_ETH_Init+0x88>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a9a:	4b14      	ldr	r3, [pc, #80]	; (8000aec <MX_ETH_Init+0x80>)
 8000a9c:	4a15      	ldr	r2, [pc, #84]	; (8000af4 <MX_ETH_Init+0x88>)
 8000a9e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000aa0:	4b12      	ldr	r3, [pc, #72]	; (8000aec <MX_ETH_Init+0x80>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000aa6:	4b11      	ldr	r3, [pc, #68]	; (8000aec <MX_ETH_Init+0x80>)
 8000aa8:	4a13      	ldr	r2, [pc, #76]	; (8000af8 <MX_ETH_Init+0x8c>)
 8000aaa:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000aac:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <MX_ETH_Init+0x80>)
 8000aae:	4a13      	ldr	r2, [pc, #76]	; (8000afc <MX_ETH_Init+0x90>)
 8000ab0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <MX_ETH_Init+0x80>)
 8000ab4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000ab8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000aba:	480c      	ldr	r0, [pc, #48]	; (8000aec <MX_ETH_Init+0x80>)
 8000abc:	f004 fb3c 	bl	8005138 <HAL_ETH_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000ac6:	f000 f975 	bl	8000db4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000aca:	2238      	movs	r2, #56	; 0x38
 8000acc:	2100      	movs	r1, #0
 8000ace:	480c      	ldr	r0, [pc, #48]	; (8000b00 <MX_ETH_Init+0x94>)
 8000ad0:	f00a fec0 	bl	800b854 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000ad4:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <MX_ETH_Init+0x94>)
 8000ad6:	2221      	movs	r2, #33	; 0x21
 8000ad8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000ada:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <MX_ETH_Init+0x94>)
 8000adc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ae0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000ae2:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <MX_ETH_Init+0x94>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	24000258 	.word	0x24000258
 8000af0:	40028000 	.word	0x40028000
 8000af4:	240008f4 	.word	0x240008f4
 8000af8:	240000c0 	.word	0x240000c0
 8000afc:	24000060 	.word	0x24000060
 8000b00:	24000144 	.word	0x24000144

08000b04 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b088      	sub	sp, #32
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b0a:	f107 0310 	add.w	r3, r7, #16
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b18:	1d3b      	adds	r3, r7, #4
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b22:	4b20      	ldr	r3, [pc, #128]	; (8000ba4 <MX_TIM1_Init+0xa0>)
 8000b24:	4a20      	ldr	r2, [pc, #128]	; (8000ba8 <MX_TIM1_Init+0xa4>)
 8000b26:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b28:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <MX_TIM1_Init+0xa0>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ba4 <MX_TIM1_Init+0xa0>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b34:	4b1b      	ldr	r3, [pc, #108]	; (8000ba4 <MX_TIM1_Init+0xa0>)
 8000b36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b3a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b3c:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <MX_TIM1_Init+0xa0>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b42:	4b18      	ldr	r3, [pc, #96]	; (8000ba4 <MX_TIM1_Init+0xa0>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b48:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <MX_TIM1_Init+0xa0>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b4e:	4815      	ldr	r0, [pc, #84]	; (8000ba4 <MX_TIM1_Init+0xa0>)
 8000b50:	f008 ff8a 	bl	8009a68 <HAL_TIM_Base_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000b5a:	f000 f92b 	bl	8000db4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b62:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b64:	f107 0310 	add.w	r3, r7, #16
 8000b68:	4619      	mov	r1, r3
 8000b6a:	480e      	ldr	r0, [pc, #56]	; (8000ba4 <MX_TIM1_Init+0xa0>)
 8000b6c:	f008 ffd4 	bl	8009b18 <HAL_TIM_ConfigClockSource>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000b76:	f000 f91d 	bl	8000db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4806      	ldr	r0, [pc, #24]	; (8000ba4 <MX_TIM1_Init+0xa0>)
 8000b8c:	f009 f9f4 	bl	8009f78 <HAL_TIMEx_MasterConfigSynchronization>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000b96:	f000 f90d 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	3720      	adds	r7, #32
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	24000308 	.word	0x24000308
 8000ba8:	40010000 	.word	0x40010000

08000bac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bb0:	4b22      	ldr	r3, [pc, #136]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bb2:	4a23      	ldr	r2, [pc, #140]	; (8000c40 <MX_USART3_UART_Init+0x94>)
 8000bb4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bb6:	4b21      	ldr	r3, [pc, #132]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bbc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bbe:	4b1f      	ldr	r3, [pc, #124]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bc4:	4b1d      	ldr	r3, [pc, #116]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bca:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bd0:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bd2:	220c      	movs	r2, #12
 8000bd4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd6:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bdc:	4b17      	ldr	r3, [pc, #92]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000be2:	4b16      	ldr	r3, [pc, #88]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000be8:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bee:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bf4:	4811      	ldr	r0, [pc, #68]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bf6:	f009 fa4d 	bl	800a094 <HAL_UART_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c00:	f000 f8d8 	bl	8000db4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c04:	2100      	movs	r1, #0
 8000c06:	480d      	ldr	r0, [pc, #52]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000c08:	f00a fa4f 	bl	800b0aa <HAL_UARTEx_SetTxFifoThreshold>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c12:	f000 f8cf 	bl	8000db4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c16:	2100      	movs	r1, #0
 8000c18:	4808      	ldr	r0, [pc, #32]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000c1a:	f00a fa84 	bl	800b126 <HAL_UARTEx_SetRxFifoThreshold>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c24:	f000 f8c6 	bl	8000db4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c28:	4804      	ldr	r0, [pc, #16]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000c2a:	f00a fa05 	bl	800b038 <HAL_UARTEx_DisableFifoMode>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c34:	f000 f8be 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	24000354 	.word	0x24000354
 8000c40:	40004800 	.word	0x40004800

08000c44 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c48:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c4a:	4a16      	ldr	r2, [pc, #88]	; (8000ca4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000c4c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000c4e:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c50:	2209      	movs	r2, #9
 8000c52:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c54:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c56:	2202      	movs	r2, #2
 8000c58:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c5a:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c60:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c62:	2202      	movs	r2, #2
 8000c64:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000c66:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c72:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000c78:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c7e:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c8a:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c8c:	f005 f856 	bl	8005d3c <HAL_PCD_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000c96:	f000 f88d 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	240003e8 	.word	0x240003e8
 8000ca4:	40080000 	.word	0x40080000

08000ca8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cae:	4b0d      	ldr	r3, [pc, #52]	; (8000ce4 <MX_DMA_Init+0x3c>)
 8000cb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cb4:	4a0b      	ldr	r2, [pc, #44]	; (8000ce4 <MX_DMA_Init+0x3c>)
 8000cb6:	f043 0301 	orr.w	r3, r3, #1
 8000cba:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cbe:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <MX_DMA_Init+0x3c>)
 8000cc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cc4:	f003 0301 	and.w	r3, r3, #1
 8000cc8:	607b      	str	r3, [r7, #4]
 8000cca:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2100      	movs	r1, #0
 8000cd0:	200b      	movs	r0, #11
 8000cd2:	f002 f924 	bl	8002f1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000cd6:	200b      	movs	r0, #11
 8000cd8:	f002 f93b 	bl	8002f52 <HAL_NVIC_EnableIRQ>

}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	58024400 	.word	0x58024400

08000ce8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b087      	sub	sp, #28
 8000cec:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cee:	4b30      	ldr	r3, [pc, #192]	; (8000db0 <MX_GPIO_Init+0xc8>)
 8000cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf4:	4a2e      	ldr	r2, [pc, #184]	; (8000db0 <MX_GPIO_Init+0xc8>)
 8000cf6:	f043 0304 	orr.w	r3, r3, #4
 8000cfa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cfe:	4b2c      	ldr	r3, [pc, #176]	; (8000db0 <MX_GPIO_Init+0xc8>)
 8000d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d04:	f003 0304 	and.w	r3, r3, #4
 8000d08:	617b      	str	r3, [r7, #20]
 8000d0a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d0c:	4b28      	ldr	r3, [pc, #160]	; (8000db0 <MX_GPIO_Init+0xc8>)
 8000d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d12:	4a27      	ldr	r2, [pc, #156]	; (8000db0 <MX_GPIO_Init+0xc8>)
 8000d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d1c:	4b24      	ldr	r3, [pc, #144]	; (8000db0 <MX_GPIO_Init+0xc8>)
 8000d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d26:	613b      	str	r3, [r7, #16]
 8000d28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2a:	4b21      	ldr	r3, [pc, #132]	; (8000db0 <MX_GPIO_Init+0xc8>)
 8000d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d30:	4a1f      	ldr	r2, [pc, #124]	; (8000db0 <MX_GPIO_Init+0xc8>)
 8000d32:	f043 0301 	orr.w	r3, r3, #1
 8000d36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d3a:	4b1d      	ldr	r3, [pc, #116]	; (8000db0 <MX_GPIO_Init+0xc8>)
 8000d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d40:	f003 0301 	and.w	r3, r3, #1
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d48:	4b19      	ldr	r3, [pc, #100]	; (8000db0 <MX_GPIO_Init+0xc8>)
 8000d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4e:	4a18      	ldr	r2, [pc, #96]	; (8000db0 <MX_GPIO_Init+0xc8>)
 8000d50:	f043 0302 	orr.w	r3, r3, #2
 8000d54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d58:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <MX_GPIO_Init+0xc8>)
 8000d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d5e:	f003 0302 	and.w	r3, r3, #2
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d66:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <MX_GPIO_Init+0xc8>)
 8000d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d6c:	4a10      	ldr	r2, [pc, #64]	; (8000db0 <MX_GPIO_Init+0xc8>)
 8000d6e:	f043 0308 	orr.w	r3, r3, #8
 8000d72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d76:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <MX_GPIO_Init+0xc8>)
 8000d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d7c:	f003 0308 	and.w	r3, r3, #8
 8000d80:	607b      	str	r3, [r7, #4]
 8000d82:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d84:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <MX_GPIO_Init+0xc8>)
 8000d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8a:	4a09      	ldr	r2, [pc, #36]	; (8000db0 <MX_GPIO_Init+0xc8>)
 8000d8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <MX_GPIO_Init+0xc8>)
 8000d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d9e:	603b      	str	r3, [r7, #0]
 8000da0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000da2:	bf00      	nop
 8000da4:	371c      	adds	r7, #28
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	58024400 	.word	0x58024400

08000db4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db8:	b672      	cpsid	i
}
 8000dba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <Error_Handler+0x8>
	...

08000dc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <HAL_MspInit+0x30>)
 8000dc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000dcc:	4a08      	ldr	r2, [pc, #32]	; (8000df0 <HAL_MspInit+0x30>)
 8000dce:	f043 0302 	orr.w	r3, r3, #2
 8000dd2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <HAL_MspInit+0x30>)
 8000dd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ddc:	f003 0302 	and.w	r3, r3, #2
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	58024400 	.word	0x58024400

08000df4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b0ba      	sub	sp, #232	; 0xe8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e0c:	f107 0310 	add.w	r3, r7, #16
 8000e10:	22c0      	movs	r2, #192	; 0xc0
 8000e12:	2100      	movs	r1, #0
 8000e14:	4618      	mov	r0, r3
 8000e16:	f00a fd1d 	bl	800b854 <memset>
  if(hadc->Instance==ADC1)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a43      	ldr	r2, [pc, #268]	; (8000f2c <HAL_ADC_MspInit+0x138>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d17f      	bne.n	8000f24 <HAL_ADC_MspInit+0x130>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e24:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e28:	f04f 0300 	mov.w	r3, #0
 8000e2c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000e30:	2301      	movs	r3, #1
 8000e32:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 18;
 8000e34:	2312      	movs	r3, #18
 8000e36:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000e40:	2302      	movs	r3, #2
 8000e42:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000e44:	23c0      	movs	r3, #192	; 0xc0
 8000e46:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000e48:	2320      	movs	r3, #32
 8000e4a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144.0;
 8000e4c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e50:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000e52:	2300      	movs	r3, #0
 8000e54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e58:	f107 0310 	add.w	r3, r7, #16
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f006 f905 	bl	800706c <HAL_RCCEx_PeriphCLKConfig>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8000e68:	f7ff ffa4 	bl	8000db4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000e6c:	4b30      	ldr	r3, [pc, #192]	; (8000f30 <HAL_ADC_MspInit+0x13c>)
 8000e6e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e72:	4a2f      	ldr	r2, [pc, #188]	; (8000f30 <HAL_ADC_MspInit+0x13c>)
 8000e74:	f043 0320 	orr.w	r3, r3, #32
 8000e78:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e7c:	4b2c      	ldr	r3, [pc, #176]	; (8000f30 <HAL_ADC_MspInit+0x13c>)
 8000e7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e82:	f003 0320 	and.w	r3, r3, #32
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8a:	4b29      	ldr	r3, [pc, #164]	; (8000f30 <HAL_ADC_MspInit+0x13c>)
 8000e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e90:	4a27      	ldr	r2, [pc, #156]	; (8000f30 <HAL_ADC_MspInit+0x13c>)
 8000e92:	f043 0301 	orr.w	r3, r3, #1
 8000e96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e9a:	4b25      	ldr	r3, [pc, #148]	; (8000f30 <HAL_ADC_MspInit+0x13c>)
 8000e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea0:	f003 0301 	and.w	r3, r3, #1
 8000ea4:	60bb      	str	r3, [r7, #8]
 8000ea6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_INP18
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ea8:	2310      	movs	r3, #16
 8000eaa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eba:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	481c      	ldr	r0, [pc, #112]	; (8000f34 <HAL_ADC_MspInit+0x140>)
 8000ec2:	f004 fd5d 	bl	8005980 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000ec6:	4b1c      	ldr	r3, [pc, #112]	; (8000f38 <HAL_ADC_MspInit+0x144>)
 8000ec8:	4a1c      	ldr	r2, [pc, #112]	; (8000f3c <HAL_ADC_MspInit+0x148>)
 8000eca:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000ecc:	4b1a      	ldr	r3, [pc, #104]	; (8000f38 <HAL_ADC_MspInit+0x144>)
 8000ece:	2209      	movs	r2, #9
 8000ed0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ed2:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <HAL_ADC_MspInit+0x144>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ed8:	4b17      	ldr	r3, [pc, #92]	; (8000f38 <HAL_ADC_MspInit+0x144>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ede:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <HAL_ADC_MspInit+0x144>)
 8000ee0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ee4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ee6:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <HAL_ADC_MspInit+0x144>)
 8000ee8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000eec:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000eee:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <HAL_ADC_MspInit+0x144>)
 8000ef0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ef4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000ef6:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <HAL_ADC_MspInit+0x144>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000efc:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <HAL_ADC_MspInit+0x144>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f02:	4b0d      	ldr	r3, [pc, #52]	; (8000f38 <HAL_ADC_MspInit+0x144>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f08:	480b      	ldr	r0, [pc, #44]	; (8000f38 <HAL_ADC_MspInit+0x144>)
 8000f0a:	f002 f83d 	bl	8002f88 <HAL_DMA_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <HAL_ADC_MspInit+0x124>
    {
      Error_Handler();
 8000f14:	f7ff ff4e 	bl	8000db4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4a07      	ldr	r2, [pc, #28]	; (8000f38 <HAL_ADC_MspInit+0x144>)
 8000f1c:	64da      	str	r2, [r3, #76]	; 0x4c
 8000f1e:	4a06      	ldr	r2, [pc, #24]	; (8000f38 <HAL_ADC_MspInit+0x144>)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f24:	bf00      	nop
 8000f26:	37e8      	adds	r7, #232	; 0xe8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40022000 	.word	0x40022000
 8000f30:	58024400 	.word	0x58024400
 8000f34:	58020000 	.word	0x58020000
 8000f38:	240001e0 	.word	0x240001e0
 8000f3c:	40020010 	.word	0x40020010

08000f40 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08e      	sub	sp, #56	; 0x38
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a59      	ldr	r2, [pc, #356]	; (80010c4 <HAL_ETH_MspInit+0x184>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	f040 80ab 	bne.w	80010ba <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000f64:	4b58      	ldr	r3, [pc, #352]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8000f66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f6a:	4a57      	ldr	r2, [pc, #348]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8000f6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f70:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f74:	4b54      	ldr	r3, [pc, #336]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8000f76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f7e:	623b      	str	r3, [r7, #32]
 8000f80:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000f82:	4b51      	ldr	r3, [pc, #324]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8000f84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f88:	4a4f      	ldr	r2, [pc, #316]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8000f8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f8e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f92:	4b4d      	ldr	r3, [pc, #308]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8000f94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f9c:	61fb      	str	r3, [r7, #28]
 8000f9e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000fa0:	4b49      	ldr	r3, [pc, #292]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8000fa2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fa6:	4a48      	ldr	r2, [pc, #288]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8000fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000fb0:	4b45      	ldr	r3, [pc, #276]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8000fb2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fba:	61bb      	str	r3, [r7, #24]
 8000fbc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fbe:	4b42      	ldr	r3, [pc, #264]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8000fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc4:	4a40      	ldr	r2, [pc, #256]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8000fc6:	f043 0304 	orr.w	r3, r3, #4
 8000fca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fce:	4b3e      	ldr	r3, [pc, #248]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8000fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd4:	f003 0304 	and.w	r3, r3, #4
 8000fd8:	617b      	str	r3, [r7, #20]
 8000fda:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fdc:	4b3a      	ldr	r3, [pc, #232]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8000fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe2:	4a39      	ldr	r2, [pc, #228]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fec:	4b36      	ldr	r3, [pc, #216]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8000fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffa:	4b33      	ldr	r3, [pc, #204]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8000ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001000:	4a31      	ldr	r2, [pc, #196]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8001002:	f043 0302 	orr.w	r3, r3, #2
 8001006:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800100a:	4b2f      	ldr	r3, [pc, #188]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 800100c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001010:	f003 0302 	and.w	r3, r3, #2
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001018:	4b2b      	ldr	r3, [pc, #172]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 800101a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800101e:	4a2a      	ldr	r2, [pc, #168]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 8001020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001024:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001028:	4b27      	ldr	r3, [pc, #156]	; (80010c8 <HAL_ETH_MspInit+0x188>)
 800102a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800102e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001036:	2332      	movs	r3, #50	; 0x32
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2300      	movs	r3, #0
 8001044:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001046:	230b      	movs	r3, #11
 8001048:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800104a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104e:	4619      	mov	r1, r3
 8001050:	481e      	ldr	r0, [pc, #120]	; (80010cc <HAL_ETH_MspInit+0x18c>)
 8001052:	f004 fc95 	bl	8005980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001056:	2386      	movs	r3, #134	; 0x86
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	2300      	movs	r3, #0
 8001064:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001066:	230b      	movs	r3, #11
 8001068:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800106e:	4619      	mov	r1, r3
 8001070:	4817      	ldr	r0, [pc, #92]	; (80010d0 <HAL_ETH_MspInit+0x190>)
 8001072:	f004 fc85 	bl	8005980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001076:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800107a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107c:	2302      	movs	r3, #2
 800107e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001084:	2300      	movs	r3, #0
 8001086:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001088:	230b      	movs	r3, #11
 800108a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001090:	4619      	mov	r1, r3
 8001092:	4810      	ldr	r0, [pc, #64]	; (80010d4 <HAL_ETH_MspInit+0x194>)
 8001094:	f004 fc74 	bl	8005980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001098:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	2302      	movs	r3, #2
 80010a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	2300      	movs	r3, #0
 80010a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010aa:	230b      	movs	r3, #11
 80010ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b2:	4619      	mov	r1, r3
 80010b4:	4808      	ldr	r0, [pc, #32]	; (80010d8 <HAL_ETH_MspInit+0x198>)
 80010b6:	f004 fc63 	bl	8005980 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80010ba:	bf00      	nop
 80010bc:	3738      	adds	r7, #56	; 0x38
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40028000 	.word	0x40028000
 80010c8:	58024400 	.word	0x58024400
 80010cc:	58020800 	.word	0x58020800
 80010d0:	58020000 	.word	0x58020000
 80010d4:	58020400 	.word	0x58020400
 80010d8:	58021800 	.word	0x58021800

080010dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a0b      	ldr	r2, [pc, #44]	; (8001118 <HAL_TIM_Base_MspInit+0x3c>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d10e      	bne.n	800110c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010ee:	4b0b      	ldr	r3, [pc, #44]	; (800111c <HAL_TIM_Base_MspInit+0x40>)
 80010f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80010f4:	4a09      	ldr	r2, [pc, #36]	; (800111c <HAL_TIM_Base_MspInit+0x40>)
 80010f6:	f043 0301 	orr.w	r3, r3, #1
 80010fa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80010fe:	4b07      	ldr	r3, [pc, #28]	; (800111c <HAL_TIM_Base_MspInit+0x40>)
 8001100:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800110c:	bf00      	nop
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	40010000 	.word	0x40010000
 800111c:	58024400 	.word	0x58024400

08001120 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b0ba      	sub	sp, #232	; 0xe8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001138:	f107 0310 	add.w	r3, r7, #16
 800113c:	22c0      	movs	r2, #192	; 0xc0
 800113e:	2100      	movs	r1, #0
 8001140:	4618      	mov	r0, r3
 8001142:	f00a fb87 	bl	800b854 <memset>
  if(huart->Instance==USART3)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a27      	ldr	r2, [pc, #156]	; (80011e8 <HAL_UART_MspInit+0xc8>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d146      	bne.n	80011de <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001150:	f04f 0202 	mov.w	r2, #2
 8001154:	f04f 0300 	mov.w	r3, #0
 8001158:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800115c:	2300      	movs	r3, #0
 800115e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001162:	f107 0310 	add.w	r3, r7, #16
 8001166:	4618      	mov	r0, r3
 8001168:	f005 ff80 	bl	800706c <HAL_RCCEx_PeriphCLKConfig>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001172:	f7ff fe1f 	bl	8000db4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001176:	4b1d      	ldr	r3, [pc, #116]	; (80011ec <HAL_UART_MspInit+0xcc>)
 8001178:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800117c:	4a1b      	ldr	r2, [pc, #108]	; (80011ec <HAL_UART_MspInit+0xcc>)
 800117e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001182:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001186:	4b19      	ldr	r3, [pc, #100]	; (80011ec <HAL_UART_MspInit+0xcc>)
 8001188:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800118c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001194:	4b15      	ldr	r3, [pc, #84]	; (80011ec <HAL_UART_MspInit+0xcc>)
 8001196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800119a:	4a14      	ldr	r2, [pc, #80]	; (80011ec <HAL_UART_MspInit+0xcc>)
 800119c:	f043 0308 	orr.w	r3, r3, #8
 80011a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011a4:	4b11      	ldr	r3, [pc, #68]	; (80011ec <HAL_UART_MspInit+0xcc>)
 80011a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011aa:	f003 0308 	and.w	r3, r3, #8
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80011b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ba:	2302      	movs	r3, #2
 80011bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c6:	2300      	movs	r3, #0
 80011c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011cc:	2307      	movs	r3, #7
 80011ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011d2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011d6:	4619      	mov	r1, r3
 80011d8:	4805      	ldr	r0, [pc, #20]	; (80011f0 <HAL_UART_MspInit+0xd0>)
 80011da:	f004 fbd1 	bl	8005980 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011de:	bf00      	nop
 80011e0:	37e8      	adds	r7, #232	; 0xe8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40004800 	.word	0x40004800
 80011ec:	58024400 	.word	0x58024400
 80011f0:	58020c00 	.word	0x58020c00

080011f4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b0ba      	sub	sp, #232	; 0xe8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800120c:	f107 0310 	add.w	r3, r7, #16
 8001210:	22c0      	movs	r2, #192	; 0xc0
 8001212:	2100      	movs	r1, #0
 8001214:	4618      	mov	r0, r3
 8001216:	f00a fb1d 	bl	800b854 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a38      	ldr	r2, [pc, #224]	; (8001300 <HAL_PCD_MspInit+0x10c>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d169      	bne.n	80012f8 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001224:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001228:	f04f 0300 	mov.w	r3, #0
 800122c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001230:	2301      	movs	r3, #1
 8001232:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8001234:	2312      	movs	r3, #18
 8001236:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001238:	2302      	movs	r3, #2
 800123a:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 800123c:	2303      	movs	r3, #3
 800123e:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001240:	2302      	movs	r3, #2
 8001242:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001244:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001248:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144.0;
 800124a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800124e:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001250:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001254:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001258:	f107 0310 	add.w	r3, r7, #16
 800125c:	4618      	mov	r0, r3
 800125e:	f005 ff05 	bl	800706c <HAL_RCCEx_PeriphCLKConfig>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 8001268:	f7ff fda4 	bl	8000db4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800126c:	f004 ff08 	bl	8006080 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001270:	4b24      	ldr	r3, [pc, #144]	; (8001304 <HAL_PCD_MspInit+0x110>)
 8001272:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001276:	4a23      	ldr	r2, [pc, #140]	; (8001304 <HAL_PCD_MspInit+0x110>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001280:	4b20      	ldr	r3, [pc, #128]	; (8001304 <HAL_PCD_MspInit+0x110>)
 8001282:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800128e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001292:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001296:	2302      	movs	r3, #2
 8001298:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a2:	2300      	movs	r3, #0
 80012a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80012a8:	230a      	movs	r3, #10
 80012aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ae:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012b2:	4619      	mov	r1, r3
 80012b4:	4814      	ldr	r0, [pc, #80]	; (8001308 <HAL_PCD_MspInit+0x114>)
 80012b6:	f004 fb63 	bl	8005980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c2:	2300      	movs	r3, #0
 80012c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ce:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012d2:	4619      	mov	r1, r3
 80012d4:	480c      	ldr	r0, [pc, #48]	; (8001308 <HAL_PCD_MspInit+0x114>)
 80012d6:	f004 fb53 	bl	8005980 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80012da:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <HAL_PCD_MspInit+0x110>)
 80012dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012e0:	4a08      	ldr	r2, [pc, #32]	; (8001304 <HAL_PCD_MspInit+0x110>)
 80012e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80012e6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <HAL_PCD_MspInit+0x110>)
 80012ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80012f8:	bf00      	nop
 80012fa:	37e8      	adds	r7, #232	; 0xe8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40080000 	.word	0x40080000
 8001304:	58024400 	.word	0x58024400
 8001308:	58020000 	.word	0x58020000

0800130c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001310:	e7fe      	b.n	8001310 <NMI_Handler+0x4>

08001312 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001316:	e7fe      	b.n	8001316 <HardFault_Handler+0x4>

08001318 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800131c:	e7fe      	b.n	800131c <MemManage_Handler+0x4>

0800131e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001322:	e7fe      	b.n	8001322 <BusFault_Handler+0x4>

08001324 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001328:	e7fe      	b.n	8001328 <UsageFault_Handler+0x4>

0800132a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001358:	f000 f8a8 	bl	80014ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}

08001360 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001364:	4802      	ldr	r0, [pc, #8]	; (8001370 <DMA1_Stream0_IRQHandler+0x10>)
 8001366:	f002 fbd5 	bl	8003b14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	240001e0 	.word	0x240001e0

08001374 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001374:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013ac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001378:	f7ff f92c 	bl	80005d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800137c:	480c      	ldr	r0, [pc, #48]	; (80013b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800137e:	490d      	ldr	r1, [pc, #52]	; (80013b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001380:	4a0d      	ldr	r2, [pc, #52]	; (80013b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001382:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001384:	e002      	b.n	800138c <LoopCopyDataInit>

08001386 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001386:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001388:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800138a:	3304      	adds	r3, #4

0800138c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800138c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800138e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001390:	d3f9      	bcc.n	8001386 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001392:	4a0a      	ldr	r2, [pc, #40]	; (80013bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001394:	4c0a      	ldr	r4, [pc, #40]	; (80013c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001396:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001398:	e001      	b.n	800139e <LoopFillZerobss>

0800139a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800139a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800139c:	3204      	adds	r2, #4

0800139e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800139e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a0:	d3fb      	bcc.n	800139a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013a2:	f00a fa65 	bl	800b870 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013a6:	f7ff f9ab 	bl	8000700 <main>
  bx  lr
 80013aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013ac:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80013b0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80013b4:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 80013b8:	0800c408 	.word	0x0800c408
  ldr r2, =_sbss
 80013bc:	24000120 	.word	0x24000120
  ldr r4, =_ebss
 80013c0:	24000a38 	.word	0x24000a38

080013c4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013c4:	e7fe      	b.n	80013c4 <ADC3_IRQHandler>
	...

080013c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ce:	2003      	movs	r0, #3
 80013d0:	f001 fd9a 	bl	8002f08 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80013d4:	f005 fc74 	bl	8006cc0 <HAL_RCC_GetSysClockFreq>
 80013d8:	4602      	mov	r2, r0
 80013da:	4b15      	ldr	r3, [pc, #84]	; (8001430 <HAL_Init+0x68>)
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	0a1b      	lsrs	r3, r3, #8
 80013e0:	f003 030f 	and.w	r3, r3, #15
 80013e4:	4913      	ldr	r1, [pc, #76]	; (8001434 <HAL_Init+0x6c>)
 80013e6:	5ccb      	ldrb	r3, [r1, r3]
 80013e8:	f003 031f 	and.w	r3, r3, #31
 80013ec:	fa22 f303 	lsr.w	r3, r2, r3
 80013f0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013f2:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <HAL_Init+0x68>)
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	f003 030f 	and.w	r3, r3, #15
 80013fa:	4a0e      	ldr	r2, [pc, #56]	; (8001434 <HAL_Init+0x6c>)
 80013fc:	5cd3      	ldrb	r3, [r2, r3]
 80013fe:	f003 031f 	and.w	r3, r3, #31
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	fa22 f303 	lsr.w	r3, r2, r3
 8001408:	4a0b      	ldr	r2, [pc, #44]	; (8001438 <HAL_Init+0x70>)
 800140a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800140c:	4a0b      	ldr	r2, [pc, #44]	; (800143c <HAL_Init+0x74>)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001412:	2000      	movs	r0, #0
 8001414:	f000 f814 	bl	8001440 <HAL_InitTick>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e002      	b.n	8001428 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001422:	f7ff fccd 	bl	8000dc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	58024400 	.word	0x58024400
 8001434:	0800bb28 	.word	0x0800bb28
 8001438:	24000004 	.word	0x24000004
 800143c:	24000000 	.word	0x24000000

08001440 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001448:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <HAL_InitTick+0x60>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d101      	bne.n	8001454 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e021      	b.n	8001498 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001454:	4b13      	ldr	r3, [pc, #76]	; (80014a4 <HAL_InitTick+0x64>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <HAL_InitTick+0x60>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	4619      	mov	r1, r3
 800145e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001462:	fbb3 f3f1 	udiv	r3, r3, r1
 8001466:	fbb2 f3f3 	udiv	r3, r2, r3
 800146a:	4618      	mov	r0, r3
 800146c:	f001 fd7f 	bl	8002f6e <HAL_SYSTICK_Config>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e00e      	b.n	8001498 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2b0f      	cmp	r3, #15
 800147e:	d80a      	bhi.n	8001496 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001480:	2200      	movs	r2, #0
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	f04f 30ff 	mov.w	r0, #4294967295
 8001488:	f001 fd49 	bl	8002f1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800148c:	4a06      	ldr	r2, [pc, #24]	; (80014a8 <HAL_InitTick+0x68>)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001492:	2300      	movs	r3, #0
 8001494:	e000      	b.n	8001498 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
}
 8001498:	4618      	mov	r0, r3
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	2400000c 	.word	0x2400000c
 80014a4:	24000000 	.word	0x24000000
 80014a8:	24000008 	.word	0x24000008

080014ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <HAL_IncTick+0x20>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <HAL_IncTick+0x24>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4413      	add	r3, r2
 80014bc:	4a04      	ldr	r2, [pc, #16]	; (80014d0 <HAL_IncTick+0x24>)
 80014be:	6013      	str	r3, [r2, #0]
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	2400000c 	.word	0x2400000c
 80014d0:	240008fc 	.word	0x240008fc

080014d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  return uwTick;
 80014d8:	4b03      	ldr	r3, [pc, #12]	; (80014e8 <HAL_GetTick+0x14>)
 80014da:	681b      	ldr	r3, [r3, #0]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	240008fc 	.word	0x240008fc

080014ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014f4:	f7ff ffee 	bl	80014d4 <HAL_GetTick>
 80014f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001504:	d005      	beq.n	8001512 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001506:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <HAL_Delay+0x44>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	461a      	mov	r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	4413      	add	r3, r2
 8001510:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001512:	bf00      	nop
 8001514:	f7ff ffde 	bl	80014d4 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	429a      	cmp	r2, r3
 8001522:	d8f7      	bhi.n	8001514 <HAL_Delay+0x28>
  {
  }
}
 8001524:	bf00      	nop
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	2400000c 	.word	0x2400000c

08001534 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001538:	4b03      	ldr	r3, [pc, #12]	; (8001548 <HAL_GetREVID+0x14>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	0c1b      	lsrs	r3, r3, #16
}
 800153e:	4618      	mov	r0, r3
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	5c001000 	.word	0x5c001000

0800154c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800155c:	4904      	ldr	r1, [pc, #16]	; (8001570 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4313      	orrs	r3, r2
 8001562:	604b      	str	r3, [r1, #4]
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	58000400 	.word	0x58000400

08001574 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	431a      	orrs	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	609a      	str	r2, [r3, #8]
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
 80015a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	431a      	orrs	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	609a      	str	r2, [r3, #8]
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80015dc:	b480      	push	{r7}
 80015de:	b087      	sub	sp, #28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
 80015e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	3360      	adds	r3, #96	; 0x60
 80015ee:	461a      	mov	r2, r3
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4413      	add	r3, r2
 80015f6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	430b      	orrs	r3, r1
 800160a:	431a      	orrs	r2, r3
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001610:	bf00      	nop
 8001612:	371c      	adds	r7, #28
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	f003 031f 	and.w	r3, r3, #31
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	fa01 f303 	lsl.w	r3, r1, r3
 800163c:	431a      	orrs	r2, r3
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	611a      	str	r2, [r3, #16]
}
 8001642:	bf00      	nop
 8001644:	3714      	adds	r7, #20
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800164e:	b480      	push	{r7}
 8001650:	b087      	sub	sp, #28
 8001652:	af00      	add	r7, sp, #0
 8001654:	60f8      	str	r0, [r7, #12]
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	3360      	adds	r3, #96	; 0x60
 800165e:	461a      	mov	r2, r3
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4413      	add	r3, r2
 8001666:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	431a      	orrs	r2, r3
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	601a      	str	r2, [r3, #0]
  }
}
 8001678:	bf00      	nop
 800167a:	371c      	adds	r7, #28
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001694:	2b00      	cmp	r3, #0
 8001696:	d101      	bne.n	800169c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001698:	2301      	movs	r3, #1
 800169a:	e000      	b.n	800169e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80016aa:	b480      	push	{r7}
 80016ac:	b087      	sub	sp, #28
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	60f8      	str	r0, [r7, #12]
 80016b2:	60b9      	str	r1, [r7, #8]
 80016b4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	3330      	adds	r3, #48	; 0x30
 80016ba:	461a      	mov	r2, r3
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	0a1b      	lsrs	r3, r3, #8
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	f003 030c 	and.w	r3, r3, #12
 80016c6:	4413      	add	r3, r2
 80016c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	f003 031f 	and.w	r3, r3, #31
 80016d4:	211f      	movs	r1, #31
 80016d6:	fa01 f303 	lsl.w	r3, r1, r3
 80016da:	43db      	mvns	r3, r3
 80016dc:	401a      	ands	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	0e9b      	lsrs	r3, r3, #26
 80016e2:	f003 011f 	and.w	r1, r3, #31
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	f003 031f 	and.w	r3, r3, #31
 80016ec:	fa01 f303 	lsl.w	r3, r1, r3
 80016f0:	431a      	orrs	r2, r3
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80016f6:	bf00      	nop
 80016f8:	371c      	adds	r7, #28
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	f023 0203 	bic.w	r2, r3, #3
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	431a      	orrs	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	60da      	str	r2, [r3, #12]
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001728:	b480      	push	{r7}
 800172a:	b087      	sub	sp, #28
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	3314      	adds	r3, #20
 8001738:	461a      	mov	r2, r3
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	0e5b      	lsrs	r3, r3, #25
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	f003 0304 	and.w	r3, r3, #4
 8001744:	4413      	add	r3, r2
 8001746:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	0d1b      	lsrs	r3, r3, #20
 8001750:	f003 031f 	and.w	r3, r3, #31
 8001754:	2107      	movs	r1, #7
 8001756:	fa01 f303 	lsl.w	r3, r1, r3
 800175a:	43db      	mvns	r3, r3
 800175c:	401a      	ands	r2, r3
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	0d1b      	lsrs	r3, r3, #20
 8001762:	f003 031f 	and.w	r3, r3, #31
 8001766:	6879      	ldr	r1, [r7, #4]
 8001768:	fa01 f303 	lsl.w	r3, r1, r3
 800176c:	431a      	orrs	r2, r3
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001772:	bf00      	nop
 8001774:	371c      	adds	r7, #28
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
	...

08001780 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001798:	43db      	mvns	r3, r3
 800179a:	401a      	ands	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f003 0318 	and.w	r3, r3, #24
 80017a2:	4908      	ldr	r1, [pc, #32]	; (80017c4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80017a4:	40d9      	lsrs	r1, r3
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	400b      	ands	r3, r1
 80017aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80017ae:	431a      	orrs	r2, r3
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80017b6:	bf00      	nop
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	000fffff 	.word	0x000fffff

080017c8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f003 031f 	and.w	r3, r3, #31
}
 80017d8:	4618      	mov	r0, r3
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	4b04      	ldr	r3, [pc, #16]	; (8001820 <LL_ADC_DisableDeepPowerDown+0x20>)
 800180e:	4013      	ands	r3, r2
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	6093      	str	r3, [r2, #8]
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	5fffffc0 	.word	0x5fffffc0

08001824 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001834:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001838:	d101      	bne.n	800183e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800183a:	2301      	movs	r3, #1
 800183c:	e000      	b.n	8001840 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	4b05      	ldr	r3, [pc, #20]	; (8001870 <LL_ADC_EnableInternalRegulator+0x24>)
 800185a:	4013      	ands	r3, r2
 800185c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	6fffffc0 	.word	0x6fffffc0

08001874 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001884:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001888:	d101      	bne.n	800188e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800188a:	2301      	movs	r3, #1
 800188c:	e000      	b.n	8001890 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689a      	ldr	r2, [r3, #8]
 80018a8:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <LL_ADC_Enable+0x24>)
 80018aa:	4013      	ands	r3, r2
 80018ac:	f043 0201 	orr.w	r2, r3, #1
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	7fffffc0 	.word	0x7fffffc0

080018c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d101      	bne.n	80018dc <LL_ADC_IsEnabled+0x18>
 80018d8:	2301      	movs	r3, #1
 80018da:	e000      	b.n	80018de <LL_ADC_IsEnabled+0x1a>
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
	...

080018ec <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689a      	ldr	r2, [r3, #8]
 80018f8:	4b05      	ldr	r3, [pc, #20]	; (8001910 <LL_ADC_REG_StartConversion+0x24>)
 80018fa:	4013      	ands	r3, r2
 80018fc:	f043 0204 	orr.w	r2, r3, #4
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	7fffffc0 	.word	0x7fffffc0

08001914 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	2b04      	cmp	r3, #4
 8001926:	d101      	bne.n	800192c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001928:	2301      	movs	r3, #1
 800192a:	e000      	b.n	800192e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800193a:	b480      	push	{r7}
 800193c:	b083      	sub	sp, #12
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f003 0308 	and.w	r3, r3, #8
 800194a:	2b08      	cmp	r3, #8
 800194c:	d101      	bne.n	8001952 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800194e:	2301      	movs	r3, #1
 8001950:	e000      	b.n	8001954 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001960:	b590      	push	{r4, r7, lr}
 8001962:	b089      	sub	sp, #36	; 0x24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001968:	2300      	movs	r3, #0
 800196a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800196c:	2300      	movs	r3, #0
 800196e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e18f      	b.n	8001c9a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001984:	2b00      	cmp	r3, #0
 8001986:	d109      	bne.n	800199c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff fa33 	bl	8000df4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ff3f 	bl	8001824 <LL_ADC_IsDeepPowerDownEnabled>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d004      	beq.n	80019b6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff ff25 	bl	8001800 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff ff5a 	bl	8001874 <LL_ADC_IsInternalRegulatorEnabled>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d114      	bne.n	80019f0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff ff3e 	bl	800184c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019d0:	4b87      	ldr	r3, [pc, #540]	; (8001bf0 <HAL_ADC_Init+0x290>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	099b      	lsrs	r3, r3, #6
 80019d6:	4a87      	ldr	r2, [pc, #540]	; (8001bf4 <HAL_ADC_Init+0x294>)
 80019d8:	fba2 2303 	umull	r2, r3, r2, r3
 80019dc:	099b      	lsrs	r3, r3, #6
 80019de:	3301      	adds	r3, #1
 80019e0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80019e2:	e002      	b.n	80019ea <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d1f9      	bne.n	80019e4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff ff3d 	bl	8001874 <LL_ADC_IsInternalRegulatorEnabled>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d10d      	bne.n	8001a1c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a04:	f043 0210 	orr.w	r2, r3, #16
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a10:	f043 0201 	orr.w	r2, r3, #1
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff ff77 	bl	8001914 <LL_ADC_REG_IsConversionOngoing>
 8001a26:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a2c:	f003 0310 	and.w	r3, r3, #16
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f040 8129 	bne.w	8001c88 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f040 8125 	bne.w	8001c88 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a42:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001a46:	f043 0202 	orr.w	r2, r3, #2
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff ff36 	bl	80018c4 <LL_ADC_IsEnabled>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d136      	bne.n	8001acc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a65      	ldr	r2, [pc, #404]	; (8001bf8 <HAL_ADC_Init+0x298>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d004      	beq.n	8001a72 <HAL_ADC_Init+0x112>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a63      	ldr	r2, [pc, #396]	; (8001bfc <HAL_ADC_Init+0x29c>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d10e      	bne.n	8001a90 <HAL_ADC_Init+0x130>
 8001a72:	4861      	ldr	r0, [pc, #388]	; (8001bf8 <HAL_ADC_Init+0x298>)
 8001a74:	f7ff ff26 	bl	80018c4 <LL_ADC_IsEnabled>
 8001a78:	4604      	mov	r4, r0
 8001a7a:	4860      	ldr	r0, [pc, #384]	; (8001bfc <HAL_ADC_Init+0x29c>)
 8001a7c:	f7ff ff22 	bl	80018c4 <LL_ADC_IsEnabled>
 8001a80:	4603      	mov	r3, r0
 8001a82:	4323      	orrs	r3, r4
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	bf0c      	ite	eq
 8001a88:	2301      	moveq	r3, #1
 8001a8a:	2300      	movne	r3, #0
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	e008      	b.n	8001aa2 <HAL_ADC_Init+0x142>
 8001a90:	485b      	ldr	r0, [pc, #364]	; (8001c00 <HAL_ADC_Init+0x2a0>)
 8001a92:	f7ff ff17 	bl	80018c4 <LL_ADC_IsEnabled>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	bf0c      	ite	eq
 8001a9c:	2301      	moveq	r3, #1
 8001a9e:	2300      	movne	r3, #0
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d012      	beq.n	8001acc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a53      	ldr	r2, [pc, #332]	; (8001bf8 <HAL_ADC_Init+0x298>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d004      	beq.n	8001aba <HAL_ADC_Init+0x15a>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a51      	ldr	r2, [pc, #324]	; (8001bfc <HAL_ADC_Init+0x29c>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d101      	bne.n	8001abe <HAL_ADC_Init+0x15e>
 8001aba:	4a52      	ldr	r2, [pc, #328]	; (8001c04 <HAL_ADC_Init+0x2a4>)
 8001abc:	e000      	b.n	8001ac0 <HAL_ADC_Init+0x160>
 8001abe:	4a52      	ldr	r2, [pc, #328]	; (8001c08 <HAL_ADC_Init+0x2a8>)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4610      	mov	r0, r2
 8001ac8:	f7ff fd54 	bl	8001574 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001acc:	f7ff fd32 	bl	8001534 <HAL_GetREVID>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	f241 0203 	movw	r2, #4099	; 0x1003
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d914      	bls.n	8001b04 <HAL_ADC_Init+0x1a4>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	2b10      	cmp	r3, #16
 8001ae0:	d110      	bne.n	8001b04 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	7d5b      	ldrb	r3, [r3, #21]
 8001ae6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001aec:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001af2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	7f1b      	ldrb	r3, [r3, #28]
 8001af8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001afa:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001afc:	f043 030c 	orr.w	r3, r3, #12
 8001b00:	61bb      	str	r3, [r7, #24]
 8001b02:	e00d      	b.n	8001b20 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	7d5b      	ldrb	r3, [r3, #21]
 8001b08:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001b0e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001b14:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	7f1b      	ldrb	r3, [r3, #28]
 8001b1a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	7f1b      	ldrb	r3, [r3, #28]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d106      	bne.n	8001b36 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	045b      	lsls	r3, r3, #17
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d009      	beq.n	8001b52 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b42:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b4a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68da      	ldr	r2, [r3, #12]
 8001b58:	4b2c      	ldr	r3, [pc, #176]	; (8001c0c <HAL_ADC_Init+0x2ac>)
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	6812      	ldr	r2, [r2, #0]
 8001b60:	69b9      	ldr	r1, [r7, #24]
 8001b62:	430b      	orrs	r3, r1
 8001b64:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff fed2 	bl	8001914 <LL_ADC_REG_IsConversionOngoing>
 8001b70:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff fedf 	bl	800193a <LL_ADC_INJ_IsConversionOngoing>
 8001b7c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d15f      	bne.n	8001c44 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d15c      	bne.n	8001c44 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	7d1b      	ldrb	r3, [r3, #20]
 8001b8e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001b94:	4313      	orrs	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68da      	ldr	r2, [r3, #12]
 8001b9e:	4b1c      	ldr	r3, [pc, #112]	; (8001c10 <HAL_ADC_Init+0x2b0>)
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	6812      	ldr	r2, [r2, #0]
 8001ba6:	69b9      	ldr	r1, [r7, #24]
 8001ba8:	430b      	orrs	r3, r1
 8001baa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d130      	bne.n	8001c18 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bba:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	691a      	ldr	r2, [r3, #16]
 8001bc2:	4b14      	ldr	r3, [pc, #80]	; (8001c14 <HAL_ADC_Init+0x2b4>)
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001bca:	3a01      	subs	r2, #1
 8001bcc:	0411      	lsls	r1, r2, #16
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001bd2:	4311      	orrs	r1, r2
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001bd8:	4311      	orrs	r1, r2
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001bde:	430a      	orrs	r2, r1
 8001be0:	431a      	orrs	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f042 0201 	orr.w	r2, r2, #1
 8001bea:	611a      	str	r2, [r3, #16]
 8001bec:	e01c      	b.n	8001c28 <HAL_ADC_Init+0x2c8>
 8001bee:	bf00      	nop
 8001bf0:	24000000 	.word	0x24000000
 8001bf4:	053e2d63 	.word	0x053e2d63
 8001bf8:	40022000 	.word	0x40022000
 8001bfc:	40022100 	.word	0x40022100
 8001c00:	58026000 	.word	0x58026000
 8001c04:	40022300 	.word	0x40022300
 8001c08:	58026300 	.word	0x58026300
 8001c0c:	fff0c003 	.word	0xfff0c003
 8001c10:	ffffbffc 	.word	0xffffbffc
 8001c14:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	691a      	ldr	r2, [r3, #16]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 0201 	bic.w	r2, r2, #1
 8001c26:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 fe82 	bl	8002948 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d10c      	bne.n	8001c66 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	f023 010f 	bic.w	r1, r3, #15
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	1e5a      	subs	r2, r3, #1
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	430a      	orrs	r2, r1
 8001c62:	631a      	str	r2, [r3, #48]	; 0x30
 8001c64:	e007      	b.n	8001c76 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f022 020f 	bic.w	r2, r2, #15
 8001c74:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c7a:	f023 0303 	bic.w	r3, r3, #3
 8001c7e:	f043 0201 	orr.w	r2, r3, #1
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	655a      	str	r2, [r3, #84]	; 0x54
 8001c86:	e007      	b.n	8001c98 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c8c:	f043 0210 	orr.w	r2, r3, #16
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c98:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3724      	adds	r7, #36	; 0x24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd90      	pop	{r4, r7, pc}
 8001ca2:	bf00      	nop

08001ca4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b088      	sub	sp, #32
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a72      	ldr	r2, [pc, #456]	; (8001e7c <HAL_ADC_PollForConversion+0x1d8>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d004      	beq.n	8001cc2 <HAL_ADC_PollForConversion+0x1e>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a70      	ldr	r2, [pc, #448]	; (8001e80 <HAL_ADC_PollForConversion+0x1dc>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d101      	bne.n	8001cc6 <HAL_ADC_PollForConversion+0x22>
 8001cc2:	4b70      	ldr	r3, [pc, #448]	; (8001e84 <HAL_ADC_PollForConversion+0x1e0>)
 8001cc4:	e000      	b.n	8001cc8 <HAL_ADC_PollForConversion+0x24>
 8001cc6:	4b70      	ldr	r3, [pc, #448]	; (8001e88 <HAL_ADC_PollForConversion+0x1e4>)
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff fd7d 	bl	80017c8 <LL_ADC_GetMultimode>
 8001cce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	2b08      	cmp	r3, #8
 8001cd6:	d102      	bne.n	8001cde <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001cd8:	2308      	movs	r3, #8
 8001cda:	61fb      	str	r3, [r7, #28]
 8001cdc:	e037      	b.n	8001d4e <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d005      	beq.n	8001cf0 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	2b05      	cmp	r3, #5
 8001ce8:	d002      	beq.n	8001cf0 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	2b09      	cmp	r3, #9
 8001cee:	d111      	bne.n	8001d14 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d007      	beq.n	8001d0e <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d02:	f043 0220 	orr.w	r2, r3, #32
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e0b1      	b.n	8001e72 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001d0e:	2304      	movs	r3, #4
 8001d10:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001d12:	e01c      	b.n	8001d4e <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a58      	ldr	r2, [pc, #352]	; (8001e7c <HAL_ADC_PollForConversion+0x1d8>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d004      	beq.n	8001d28 <HAL_ADC_PollForConversion+0x84>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a57      	ldr	r2, [pc, #348]	; (8001e80 <HAL_ADC_PollForConversion+0x1dc>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d101      	bne.n	8001d2c <HAL_ADC_PollForConversion+0x88>
 8001d28:	4b56      	ldr	r3, [pc, #344]	; (8001e84 <HAL_ADC_PollForConversion+0x1e0>)
 8001d2a:	e000      	b.n	8001d2e <HAL_ADC_PollForConversion+0x8a>
 8001d2c:	4b56      	ldr	r3, [pc, #344]	; (8001e88 <HAL_ADC_PollForConversion+0x1e4>)
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff fd58 	bl	80017e4 <LL_ADC_GetMultiDMATransfer>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d007      	beq.n	8001d4a <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d3e:	f043 0220 	orr.w	r2, r3, #32
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e093      	b.n	8001e72 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001d4a:	2304      	movs	r3, #4
 8001d4c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001d4e:	f7ff fbc1 	bl	80014d4 <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001d54:	e021      	b.n	8001d9a <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d5c:	d01d      	beq.n	8001d9a <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001d5e:	f7ff fbb9 	bl	80014d4 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d302      	bcc.n	8001d74 <HAL_ADC_PollForConversion+0xd0>
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d112      	bne.n	8001d9a <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d10b      	bne.n	8001d9a <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d86:	f043 0204 	orr.w	r2, r3, #4
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e06b      	b.n	8001e72 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	4013      	ands	r3, r2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d0d6      	beq.n	8001d56 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff fc63 	bl	8001684 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d01c      	beq.n	8001dfe <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	7d5b      	ldrb	r3, [r3, #21]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d118      	bne.n	8001dfe <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0308 	and.w	r3, r3, #8
 8001dd6:	2b08      	cmp	r3, #8
 8001dd8:	d111      	bne.n	8001dfe <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d105      	bne.n	8001dfe <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df6:	f043 0201 	orr.w	r2, r3, #1
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a1f      	ldr	r2, [pc, #124]	; (8001e80 <HAL_ADC_PollForConversion+0x1dc>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d002      	beq.n	8001e0e <HAL_ADC_PollForConversion+0x16a>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	e000      	b.n	8001e10 <HAL_ADC_PollForConversion+0x16c>
 8001e0e:	4b1b      	ldr	r3, [pc, #108]	; (8001e7c <HAL_ADC_PollForConversion+0x1d8>)
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	6812      	ldr	r2, [r2, #0]
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d008      	beq.n	8001e2a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d005      	beq.n	8001e2a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	2b05      	cmp	r3, #5
 8001e22:	d002      	beq.n	8001e2a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	2b09      	cmp	r3, #9
 8001e28:	d104      	bne.n	8001e34 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	61bb      	str	r3, [r7, #24]
 8001e32:	e00c      	b.n	8001e4e <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a11      	ldr	r2, [pc, #68]	; (8001e80 <HAL_ADC_PollForConversion+0x1dc>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d002      	beq.n	8001e44 <HAL_ADC_PollForConversion+0x1a0>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	e000      	b.n	8001e46 <HAL_ADC_PollForConversion+0x1a2>
 8001e44:	4b0d      	ldr	r3, [pc, #52]	; (8001e7c <HAL_ADC_PollForConversion+0x1d8>)
 8001e46:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	2b08      	cmp	r3, #8
 8001e52:	d104      	bne.n	8001e5e <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2208      	movs	r2, #8
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	e008      	b.n	8001e70 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d103      	bne.n	8001e70 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	220c      	movs	r2, #12
 8001e6e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3720      	adds	r7, #32
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40022000 	.word	0x40022000
 8001e80:	40022100 	.word	0x40022100
 8001e84:	40022300 	.word	0x40022300
 8001e88:	58026300 	.word	0x58026300

08001e8c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a55      	ldr	r2, [pc, #340]	; (8001ff4 <HAL_ADC_Start_DMA+0x168>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d004      	beq.n	8001eac <HAL_ADC_Start_DMA+0x20>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a54      	ldr	r2, [pc, #336]	; (8001ff8 <HAL_ADC_Start_DMA+0x16c>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d101      	bne.n	8001eb0 <HAL_ADC_Start_DMA+0x24>
 8001eac:	4b53      	ldr	r3, [pc, #332]	; (8001ffc <HAL_ADC_Start_DMA+0x170>)
 8001eae:	e000      	b.n	8001eb2 <HAL_ADC_Start_DMA+0x26>
 8001eb0:	4b53      	ldr	r3, [pc, #332]	; (8002000 <HAL_ADC_Start_DMA+0x174>)
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff fc88 	bl	80017c8 <LL_ADC_GetMultimode>
 8001eb8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff fd28 	bl	8001914 <LL_ADC_REG_IsConversionOngoing>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f040 808c 	bne.w	8001fe4 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d101      	bne.n	8001eda <HAL_ADC_Start_DMA+0x4e>
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	e087      	b.n	8001fea <HAL_ADC_Start_DMA+0x15e>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d005      	beq.n	8001ef4 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	2b05      	cmp	r3, #5
 8001eec:	d002      	beq.n	8001ef4 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	2b09      	cmp	r3, #9
 8001ef2:	d170      	bne.n	8001fd6 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001ef4:	68f8      	ldr	r0, [r7, #12]
 8001ef6:	f000 fc09 	bl	800270c <ADC_Enable>
 8001efa:	4603      	mov	r3, r0
 8001efc:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001efe:	7dfb      	ldrb	r3, [r7, #23]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d163      	bne.n	8001fcc <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f08:	4b3e      	ldr	r3, [pc, #248]	; (8002004 <HAL_ADC_Start_DMA+0x178>)
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a37      	ldr	r2, [pc, #220]	; (8001ff8 <HAL_ADC_Start_DMA+0x16c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d002      	beq.n	8001f24 <HAL_ADC_Start_DMA+0x98>
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	e000      	b.n	8001f26 <HAL_ADC_Start_DMA+0x9a>
 8001f24:	4b33      	ldr	r3, [pc, #204]	; (8001ff4 <HAL_ADC_Start_DMA+0x168>)
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	6812      	ldr	r2, [r2, #0]
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d002      	beq.n	8001f34 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d105      	bne.n	8001f40 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f38:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d006      	beq.n	8001f5a <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f50:	f023 0206 	bic.w	r2, r3, #6
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	659a      	str	r2, [r3, #88]	; 0x58
 8001f58:	e002      	b.n	8001f60 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f64:	4a28      	ldr	r2, [pc, #160]	; (8002008 <HAL_ADC_Start_DMA+0x17c>)
 8001f66:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6c:	4a27      	ldr	r2, [pc, #156]	; (800200c <HAL_ADC_Start_DMA+0x180>)
 8001f6e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f74:	4a26      	ldr	r2, [pc, #152]	; (8002010 <HAL_ADC_Start_DMA+0x184>)
 8001f76:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	221c      	movs	r2, #28
 8001f7e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 0210 	orr.w	r2, r2, #16
 8001f96:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	f7ff fbad 	bl	8001702 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	3340      	adds	r3, #64	; 0x40
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	68ba      	ldr	r2, [r7, #8]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f001 fb42 	bl	8003640 <HAL_DMA_Start_IT>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff fc91 	bl	80018ec <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001fca:	e00d      	b.n	8001fe8 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001fd4:	e008      	b.n	8001fe8 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001fe2:	e001      	b.n	8001fe8 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fe8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3718      	adds	r7, #24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40022000 	.word	0x40022000
 8001ff8:	40022100 	.word	0x40022100
 8001ffc:	40022300 	.word	0x40022300
 8002000:	58026300 	.word	0x58026300
 8002004:	fffff0fe 	.word	0xfffff0fe
 8002008:	08002821 	.word	0x08002821
 800200c:	080028f9 	.word	0x080028f9
 8002010:	08002915 	.word	0x08002915

08002014 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002022:	4618      	mov	r0, r3
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr

08002056 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002056:	b480      	push	{r7}
 8002058:	b083      	sub	sp, #12
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
	...

0800206c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800206c:	b590      	push	{r4, r7, lr}
 800206e:	b0a1      	sub	sp, #132	; 0x84
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002076:	2300      	movs	r3, #0
 8002078:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800207c:	2300      	movs	r3, #0
 800207e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	4a9d      	ldr	r2, [pc, #628]	; (80022fc <HAL_ADC_ConfigChannel+0x290>)
 8002086:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800208e:	2b01      	cmp	r3, #1
 8002090:	d101      	bne.n	8002096 <HAL_ADC_ConfigChannel+0x2a>
 8002092:	2302      	movs	r3, #2
 8002094:	e321      	b.n	80026da <HAL_ADC_ConfigChannel+0x66e>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2201      	movs	r2, #1
 800209a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff fc36 	bl	8001914 <LL_ADC_REG_IsConversionOngoing>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f040 8306 	bne.w	80026bc <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d108      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x62>
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	0e9b      	lsrs	r3, r3, #26
 80020c2:	f003 031f 	and.w	r3, r3, #31
 80020c6:	2201      	movs	r2, #1
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	e016      	b.n	80020fc <HAL_ADC_ConfigChannel+0x90>
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020d6:	fa93 f3a3 	rbit	r3, r3
 80020da:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80020dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020de:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80020e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80020e6:	2320      	movs	r3, #32
 80020e8:	e003      	b.n	80020f2 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80020ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020ec:	fab3 f383 	clz	r3, r3
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	f003 031f 	and.w	r3, r3, #31
 80020f6:	2201      	movs	r2, #1
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	6812      	ldr	r2, [r2, #0]
 8002100:	69d1      	ldr	r1, [r2, #28]
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	6812      	ldr	r2, [r2, #0]
 8002106:	430b      	orrs	r3, r1
 8002108:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6818      	ldr	r0, [r3, #0]
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	6859      	ldr	r1, [r3, #4]
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	461a      	mov	r2, r3
 8002118:	f7ff fac7 	bl	80016aa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff fbf7 	bl	8001914 <LL_ADC_REG_IsConversionOngoing>
 8002126:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff fc04 	bl	800193a <LL_ADC_INJ_IsConversionOngoing>
 8002132:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002134:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002136:	2b00      	cmp	r3, #0
 8002138:	f040 80b3 	bne.w	80022a2 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800213c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800213e:	2b00      	cmp	r3, #0
 8002140:	f040 80af 	bne.w	80022a2 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6818      	ldr	r0, [r3, #0]
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	6819      	ldr	r1, [r3, #0]
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	461a      	mov	r2, r3
 8002152:	f7ff fae9 	bl	8001728 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002156:	4b6a      	ldr	r3, [pc, #424]	; (8002300 <HAL_ADC_ConfigChannel+0x294>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800215e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002162:	d10b      	bne.n	800217c <HAL_ADC_ConfigChannel+0x110>
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	695a      	ldr	r2, [r3, #20]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	089b      	lsrs	r3, r3, #2
 8002170:	f003 0307 	and.w	r3, r3, #7
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	e01d      	b.n	80021b8 <HAL_ADC_ConfigChannel+0x14c>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	f003 0310 	and.w	r3, r3, #16
 8002186:	2b00      	cmp	r3, #0
 8002188:	d10b      	bne.n	80021a2 <HAL_ADC_ConfigChannel+0x136>
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	695a      	ldr	r2, [r3, #20]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	089b      	lsrs	r3, r3, #2
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	e00a      	b.n	80021b8 <HAL_ADC_ConfigChannel+0x14c>
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	695a      	ldr	r2, [r3, #20]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	089b      	lsrs	r3, r3, #2
 80021ae:	f003 0304 	and.w	r3, r3, #4
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	2b04      	cmp	r3, #4
 80021c0:	d027      	beq.n	8002212 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6818      	ldr	r0, [r3, #0]
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	6919      	ldr	r1, [r3, #16]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021d0:	f7ff fa04 	bl	80015dc <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6818      	ldr	r0, [r3, #0]
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	6919      	ldr	r1, [r3, #16]
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	7e5b      	ldrb	r3, [r3, #25]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d102      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x17e>
 80021e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80021e8:	e000      	b.n	80021ec <HAL_ADC_ConfigChannel+0x180>
 80021ea:	2300      	movs	r3, #0
 80021ec:	461a      	mov	r2, r3
 80021ee:	f7ff fa2e 	bl	800164e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6818      	ldr	r0, [r3, #0]
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	6919      	ldr	r1, [r3, #16]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	7e1b      	ldrb	r3, [r3, #24]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d102      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x19c>
 8002202:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002206:	e000      	b.n	800220a <HAL_ADC_ConfigChannel+0x19e>
 8002208:	2300      	movs	r3, #0
 800220a:	461a      	mov	r2, r3
 800220c:	f7ff fa06 	bl	800161c <LL_ADC_SetDataRightShift>
 8002210:	e047      	b.n	80022a2 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002218:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	069b      	lsls	r3, r3, #26
 8002222:	429a      	cmp	r2, r3
 8002224:	d107      	bne.n	8002236 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002234:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800223c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	069b      	lsls	r3, r3, #26
 8002246:	429a      	cmp	r2, r3
 8002248:	d107      	bne.n	800225a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002258:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002260:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	069b      	lsls	r3, r3, #26
 800226a:	429a      	cmp	r2, r3
 800226c:	d107      	bne.n	800227e <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800227c:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002284:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	069b      	lsls	r3, r3, #26
 800228e:	429a      	cmp	r2, r3
 8002290:	d107      	bne.n	80022a2 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80022a0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff fb0c 	bl	80018c4 <LL_ADC_IsEnabled>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f040 820d 	bne.w	80026ce <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6818      	ldr	r0, [r3, #0]
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	6819      	ldr	r1, [r3, #0]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	461a      	mov	r2, r3
 80022c2:	f7ff fa5d 	bl	8001780 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	4a0c      	ldr	r2, [pc, #48]	; (80022fc <HAL_ADC_ConfigChannel+0x290>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	f040 8133 	bne.w	8002538 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d110      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x298>
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	0e9b      	lsrs	r3, r3, #26
 80022e8:	3301      	adds	r3, #1
 80022ea:	f003 031f 	and.w	r3, r3, #31
 80022ee:	2b09      	cmp	r3, #9
 80022f0:	bf94      	ite	ls
 80022f2:	2301      	movls	r3, #1
 80022f4:	2300      	movhi	r3, #0
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	e01e      	b.n	8002338 <HAL_ADC_ConfigChannel+0x2cc>
 80022fa:	bf00      	nop
 80022fc:	47ff0000 	.word	0x47ff0000
 8002300:	5c001000 	.word	0x5c001000
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800230c:	fa93 f3a3 	rbit	r3, r3
 8002310:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002312:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002314:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002316:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 800231c:	2320      	movs	r3, #32
 800231e:	e003      	b.n	8002328 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002320:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002322:	fab3 f383 	clz	r3, r3
 8002326:	b2db      	uxtb	r3, r3
 8002328:	3301      	adds	r3, #1
 800232a:	f003 031f 	and.w	r3, r3, #31
 800232e:	2b09      	cmp	r3, #9
 8002330:	bf94      	ite	ls
 8002332:	2301      	movls	r3, #1
 8002334:	2300      	movhi	r3, #0
 8002336:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002338:	2b00      	cmp	r3, #0
 800233a:	d079      	beq.n	8002430 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002344:	2b00      	cmp	r3, #0
 8002346:	d107      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x2ec>
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	0e9b      	lsrs	r3, r3, #26
 800234e:	3301      	adds	r3, #1
 8002350:	069b      	lsls	r3, r3, #26
 8002352:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002356:	e015      	b.n	8002384 <HAL_ADC_ConfigChannel+0x318>
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002360:	fa93 f3a3 	rbit	r3, r3
 8002364:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002366:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002368:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800236a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800236c:	2b00      	cmp	r3, #0
 800236e:	d101      	bne.n	8002374 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002370:	2320      	movs	r3, #32
 8002372:	e003      	b.n	800237c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002374:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002376:	fab3 f383 	clz	r3, r3
 800237a:	b2db      	uxtb	r3, r3
 800237c:	3301      	adds	r3, #1
 800237e:	069b      	lsls	r3, r3, #26
 8002380:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800238c:	2b00      	cmp	r3, #0
 800238e:	d109      	bne.n	80023a4 <HAL_ADC_ConfigChannel+0x338>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	0e9b      	lsrs	r3, r3, #26
 8002396:	3301      	adds	r3, #1
 8002398:	f003 031f 	and.w	r3, r3, #31
 800239c:	2101      	movs	r1, #1
 800239e:	fa01 f303 	lsl.w	r3, r1, r3
 80023a2:	e017      	b.n	80023d4 <HAL_ADC_ConfigChannel+0x368>
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023ac:	fa93 f3a3 	rbit	r3, r3
 80023b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80023b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023b4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80023b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80023bc:	2320      	movs	r3, #32
 80023be:	e003      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80023c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023c2:	fab3 f383 	clz	r3, r3
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	3301      	adds	r3, #1
 80023ca:	f003 031f 	and.w	r3, r3, #31
 80023ce:	2101      	movs	r1, #1
 80023d0:	fa01 f303 	lsl.w	r3, r1, r3
 80023d4:	ea42 0103 	orr.w	r1, r2, r3
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d10a      	bne.n	80023fa <HAL_ADC_ConfigChannel+0x38e>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	0e9b      	lsrs	r3, r3, #26
 80023ea:	3301      	adds	r3, #1
 80023ec:	f003 021f 	and.w	r2, r3, #31
 80023f0:	4613      	mov	r3, r2
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	4413      	add	r3, r2
 80023f6:	051b      	lsls	r3, r3, #20
 80023f8:	e018      	b.n	800242c <HAL_ADC_ConfigChannel+0x3c0>
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002402:	fa93 f3a3 	rbit	r3, r3
 8002406:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800240c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002412:	2320      	movs	r3, #32
 8002414:	e003      	b.n	800241e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002418:	fab3 f383 	clz	r3, r3
 800241c:	b2db      	uxtb	r3, r3
 800241e:	3301      	adds	r3, #1
 8002420:	f003 021f 	and.w	r2, r3, #31
 8002424:	4613      	mov	r3, r2
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	4413      	add	r3, r2
 800242a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800242c:	430b      	orrs	r3, r1
 800242e:	e07e      	b.n	800252e <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002438:	2b00      	cmp	r3, #0
 800243a:	d107      	bne.n	800244c <HAL_ADC_ConfigChannel+0x3e0>
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	0e9b      	lsrs	r3, r3, #26
 8002442:	3301      	adds	r3, #1
 8002444:	069b      	lsls	r3, r3, #26
 8002446:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800244a:	e015      	b.n	8002478 <HAL_ADC_ConfigChannel+0x40c>
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002454:	fa93 f3a3 	rbit	r3, r3
 8002458:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800245e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002464:	2320      	movs	r3, #32
 8002466:	e003      	b.n	8002470 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246a:	fab3 f383 	clz	r3, r3
 800246e:	b2db      	uxtb	r3, r3
 8002470:	3301      	adds	r3, #1
 8002472:	069b      	lsls	r3, r3, #26
 8002474:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002480:	2b00      	cmp	r3, #0
 8002482:	d109      	bne.n	8002498 <HAL_ADC_ConfigChannel+0x42c>
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	0e9b      	lsrs	r3, r3, #26
 800248a:	3301      	adds	r3, #1
 800248c:	f003 031f 	and.w	r3, r3, #31
 8002490:	2101      	movs	r1, #1
 8002492:	fa01 f303 	lsl.w	r3, r1, r3
 8002496:	e017      	b.n	80024c8 <HAL_ADC_ConfigChannel+0x45c>
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	fa93 f3a3 	rbit	r3, r3
 80024a4:	61bb      	str	r3, [r7, #24]
  return result;
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80024aa:	6a3b      	ldr	r3, [r7, #32]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d101      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80024b0:	2320      	movs	r3, #32
 80024b2:	e003      	b.n	80024bc <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80024b4:	6a3b      	ldr	r3, [r7, #32]
 80024b6:	fab3 f383 	clz	r3, r3
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	3301      	adds	r3, #1
 80024be:	f003 031f 	and.w	r3, r3, #31
 80024c2:	2101      	movs	r1, #1
 80024c4:	fa01 f303 	lsl.w	r3, r1, r3
 80024c8:	ea42 0103 	orr.w	r1, r2, r3
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d10d      	bne.n	80024f4 <HAL_ADC_ConfigChannel+0x488>
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	0e9b      	lsrs	r3, r3, #26
 80024de:	3301      	adds	r3, #1
 80024e0:	f003 021f 	and.w	r2, r3, #31
 80024e4:	4613      	mov	r3, r2
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	4413      	add	r3, r2
 80024ea:	3b1e      	subs	r3, #30
 80024ec:	051b      	lsls	r3, r3, #20
 80024ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024f2:	e01b      	b.n	800252c <HAL_ADC_ConfigChannel+0x4c0>
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	fa93 f3a3 	rbit	r3, r3
 8002500:	60fb      	str	r3, [r7, #12]
  return result;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 800250c:	2320      	movs	r3, #32
 800250e:	e003      	b.n	8002518 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	fab3 f383 	clz	r3, r3
 8002516:	b2db      	uxtb	r3, r3
 8002518:	3301      	adds	r3, #1
 800251a:	f003 021f 	and.w	r2, r3, #31
 800251e:	4613      	mov	r3, r2
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	4413      	add	r3, r2
 8002524:	3b1e      	subs	r3, #30
 8002526:	051b      	lsls	r3, r3, #20
 8002528:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800252c:	430b      	orrs	r3, r1
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	6892      	ldr	r2, [r2, #8]
 8002532:	4619      	mov	r1, r3
 8002534:	f7ff f8f8 	bl	8001728 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	f280 80c6 	bge.w	80026ce <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a67      	ldr	r2, [pc, #412]	; (80026e4 <HAL_ADC_ConfigChannel+0x678>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d004      	beq.n	8002556 <HAL_ADC_ConfigChannel+0x4ea>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a65      	ldr	r2, [pc, #404]	; (80026e8 <HAL_ADC_ConfigChannel+0x67c>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d101      	bne.n	800255a <HAL_ADC_ConfigChannel+0x4ee>
 8002556:	4b65      	ldr	r3, [pc, #404]	; (80026ec <HAL_ADC_ConfigChannel+0x680>)
 8002558:	e000      	b.n	800255c <HAL_ADC_ConfigChannel+0x4f0>
 800255a:	4b65      	ldr	r3, [pc, #404]	; (80026f0 <HAL_ADC_ConfigChannel+0x684>)
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff f82f 	bl	80015c0 <LL_ADC_GetCommonPathInternalCh>
 8002562:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a5e      	ldr	r2, [pc, #376]	; (80026e4 <HAL_ADC_ConfigChannel+0x678>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d004      	beq.n	8002578 <HAL_ADC_ConfigChannel+0x50c>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a5d      	ldr	r2, [pc, #372]	; (80026e8 <HAL_ADC_ConfigChannel+0x67c>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d10e      	bne.n	8002596 <HAL_ADC_ConfigChannel+0x52a>
 8002578:	485a      	ldr	r0, [pc, #360]	; (80026e4 <HAL_ADC_ConfigChannel+0x678>)
 800257a:	f7ff f9a3 	bl	80018c4 <LL_ADC_IsEnabled>
 800257e:	4604      	mov	r4, r0
 8002580:	4859      	ldr	r0, [pc, #356]	; (80026e8 <HAL_ADC_ConfigChannel+0x67c>)
 8002582:	f7ff f99f 	bl	80018c4 <LL_ADC_IsEnabled>
 8002586:	4603      	mov	r3, r0
 8002588:	4323      	orrs	r3, r4
 800258a:	2b00      	cmp	r3, #0
 800258c:	bf0c      	ite	eq
 800258e:	2301      	moveq	r3, #1
 8002590:	2300      	movne	r3, #0
 8002592:	b2db      	uxtb	r3, r3
 8002594:	e008      	b.n	80025a8 <HAL_ADC_ConfigChannel+0x53c>
 8002596:	4857      	ldr	r0, [pc, #348]	; (80026f4 <HAL_ADC_ConfigChannel+0x688>)
 8002598:	f7ff f994 	bl	80018c4 <LL_ADC_IsEnabled>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	bf0c      	ite	eq
 80025a2:	2301      	moveq	r3, #1
 80025a4:	2300      	movne	r3, #0
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d07d      	beq.n	80026a8 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a51      	ldr	r2, [pc, #324]	; (80026f8 <HAL_ADC_ConfigChannel+0x68c>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d130      	bne.n	8002618 <HAL_ADC_ConfigChannel+0x5ac>
 80025b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d12b      	bne.n	8002618 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a4b      	ldr	r2, [pc, #300]	; (80026f4 <HAL_ADC_ConfigChannel+0x688>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	f040 8081 	bne.w	80026ce <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a44      	ldr	r2, [pc, #272]	; (80026e4 <HAL_ADC_ConfigChannel+0x678>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d004      	beq.n	80025e0 <HAL_ADC_ConfigChannel+0x574>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a43      	ldr	r2, [pc, #268]	; (80026e8 <HAL_ADC_ConfigChannel+0x67c>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d101      	bne.n	80025e4 <HAL_ADC_ConfigChannel+0x578>
 80025e0:	4a42      	ldr	r2, [pc, #264]	; (80026ec <HAL_ADC_ConfigChannel+0x680>)
 80025e2:	e000      	b.n	80025e6 <HAL_ADC_ConfigChannel+0x57a>
 80025e4:	4a42      	ldr	r2, [pc, #264]	; (80026f0 <HAL_ADC_ConfigChannel+0x684>)
 80025e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025ec:	4619      	mov	r1, r3
 80025ee:	4610      	mov	r0, r2
 80025f0:	f7fe ffd3 	bl	800159a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025f4:	4b41      	ldr	r3, [pc, #260]	; (80026fc <HAL_ADC_ConfigChannel+0x690>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	099b      	lsrs	r3, r3, #6
 80025fa:	4a41      	ldr	r2, [pc, #260]	; (8002700 <HAL_ADC_ConfigChannel+0x694>)
 80025fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002600:	099b      	lsrs	r3, r3, #6
 8002602:	3301      	adds	r3, #1
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002608:	e002      	b.n	8002610 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	3b01      	subs	r3, #1
 800260e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1f9      	bne.n	800260a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002616:	e05a      	b.n	80026ce <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a39      	ldr	r2, [pc, #228]	; (8002704 <HAL_ADC_ConfigChannel+0x698>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d11e      	bne.n	8002660 <HAL_ADC_ConfigChannel+0x5f4>
 8002622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002624:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d119      	bne.n	8002660 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a30      	ldr	r2, [pc, #192]	; (80026f4 <HAL_ADC_ConfigChannel+0x688>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d14b      	bne.n	80026ce <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a2a      	ldr	r2, [pc, #168]	; (80026e4 <HAL_ADC_ConfigChannel+0x678>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d004      	beq.n	800264a <HAL_ADC_ConfigChannel+0x5de>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a28      	ldr	r2, [pc, #160]	; (80026e8 <HAL_ADC_ConfigChannel+0x67c>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d101      	bne.n	800264e <HAL_ADC_ConfigChannel+0x5e2>
 800264a:	4a28      	ldr	r2, [pc, #160]	; (80026ec <HAL_ADC_ConfigChannel+0x680>)
 800264c:	e000      	b.n	8002650 <HAL_ADC_ConfigChannel+0x5e4>
 800264e:	4a28      	ldr	r2, [pc, #160]	; (80026f0 <HAL_ADC_ConfigChannel+0x684>)
 8002650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002652:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002656:	4619      	mov	r1, r3
 8002658:	4610      	mov	r0, r2
 800265a:	f7fe ff9e 	bl	800159a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800265e:	e036      	b.n	80026ce <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a28      	ldr	r2, [pc, #160]	; (8002708 <HAL_ADC_ConfigChannel+0x69c>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d131      	bne.n	80026ce <HAL_ADC_ConfigChannel+0x662>
 800266a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800266c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d12c      	bne.n	80026ce <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a1e      	ldr	r2, [pc, #120]	; (80026f4 <HAL_ADC_ConfigChannel+0x688>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d127      	bne.n	80026ce <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a18      	ldr	r2, [pc, #96]	; (80026e4 <HAL_ADC_ConfigChannel+0x678>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d004      	beq.n	8002692 <HAL_ADC_ConfigChannel+0x626>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a16      	ldr	r2, [pc, #88]	; (80026e8 <HAL_ADC_ConfigChannel+0x67c>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d101      	bne.n	8002696 <HAL_ADC_ConfigChannel+0x62a>
 8002692:	4a16      	ldr	r2, [pc, #88]	; (80026ec <HAL_ADC_ConfigChannel+0x680>)
 8002694:	e000      	b.n	8002698 <HAL_ADC_ConfigChannel+0x62c>
 8002696:	4a16      	ldr	r2, [pc, #88]	; (80026f0 <HAL_ADC_ConfigChannel+0x684>)
 8002698:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800269a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800269e:	4619      	mov	r1, r3
 80026a0:	4610      	mov	r0, r2
 80026a2:	f7fe ff7a 	bl	800159a <LL_ADC_SetCommonPathInternalCh>
 80026a6:	e012      	b.n	80026ce <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ac:	f043 0220 	orr.w	r2, r3, #32
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80026ba:	e008      	b.n	80026ce <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c0:	f043 0220 	orr.w	r2, r3, #32
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80026d6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3784      	adds	r7, #132	; 0x84
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd90      	pop	{r4, r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40022000 	.word	0x40022000
 80026e8:	40022100 	.word	0x40022100
 80026ec:	40022300 	.word	0x40022300
 80026f0:	58026300 	.word	0x58026300
 80026f4:	58026000 	.word	0x58026000
 80026f8:	cb840000 	.word	0xcb840000
 80026fc:	24000000 	.word	0x24000000
 8002700:	053e2d63 	.word	0x053e2d63
 8002704:	c7520000 	.word	0xc7520000
 8002708:	cfb80000 	.word	0xcfb80000

0800270c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff f8d3 	bl	80018c4 <LL_ADC_IsEnabled>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d16e      	bne.n	8002802 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	689a      	ldr	r2, [r3, #8]
 800272a:	4b38      	ldr	r3, [pc, #224]	; (800280c <ADC_Enable+0x100>)
 800272c:	4013      	ands	r3, r2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00d      	beq.n	800274e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002736:	f043 0210 	orr.w	r2, r3, #16
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002742:	f043 0201 	orr.w	r2, r3, #1
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e05a      	b.n	8002804 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff f8a2 	bl	800189c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002758:	f7fe febc 	bl	80014d4 <HAL_GetTick>
 800275c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a2b      	ldr	r2, [pc, #172]	; (8002810 <ADC_Enable+0x104>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d004      	beq.n	8002772 <ADC_Enable+0x66>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a29      	ldr	r2, [pc, #164]	; (8002814 <ADC_Enable+0x108>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d101      	bne.n	8002776 <ADC_Enable+0x6a>
 8002772:	4b29      	ldr	r3, [pc, #164]	; (8002818 <ADC_Enable+0x10c>)
 8002774:	e000      	b.n	8002778 <ADC_Enable+0x6c>
 8002776:	4b29      	ldr	r3, [pc, #164]	; (800281c <ADC_Enable+0x110>)
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff f825 	bl	80017c8 <LL_ADC_GetMultimode>
 800277e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a23      	ldr	r2, [pc, #140]	; (8002814 <ADC_Enable+0x108>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d002      	beq.n	8002790 <ADC_Enable+0x84>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	e000      	b.n	8002792 <ADC_Enable+0x86>
 8002790:	4b1f      	ldr	r3, [pc, #124]	; (8002810 <ADC_Enable+0x104>)
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	6812      	ldr	r2, [r2, #0]
 8002796:	4293      	cmp	r3, r2
 8002798:	d02c      	beq.n	80027f4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d130      	bne.n	8002802 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027a0:	e028      	b.n	80027f4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff f88c 	bl	80018c4 <LL_ADC_IsEnabled>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d104      	bne.n	80027bc <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff f870 	bl	800189c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80027bc:	f7fe fe8a 	bl	80014d4 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d914      	bls.n	80027f4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d00d      	beq.n	80027f4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027dc:	f043 0210 	orr.w	r2, r3, #16
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e8:	f043 0201 	orr.w	r2, r3, #1
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e007      	b.n	8002804 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d1cf      	bne.n	80027a2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	8000003f 	.word	0x8000003f
 8002810:	40022000 	.word	0x40022000
 8002814:	40022100 	.word	0x40022100
 8002818:	40022300 	.word	0x40022300
 800281c:	58026300 	.word	0x58026300

08002820 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002832:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002836:	2b00      	cmp	r3, #0
 8002838:	d14b      	bne.n	80028d2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0308 	and.w	r3, r3, #8
 8002850:	2b00      	cmp	r3, #0
 8002852:	d021      	beq.n	8002898 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f7fe ff13 	bl	8001684 <LL_ADC_REG_IsTriggerSourceSWStart>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d032      	beq.n	80028ca <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d12b      	bne.n	80028ca <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002876:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002882:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d11f      	bne.n	80028ca <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800288e:	f043 0201 	orr.w	r2, r3, #1
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	655a      	str	r2, [r3, #84]	; 0x54
 8002896:	e018      	b.n	80028ca <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	f003 0303 	and.w	r3, r3, #3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d111      	bne.n	80028ca <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d105      	bne.n	80028ca <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c2:	f043 0201 	orr.w	r2, r3, #1
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f7ff fbaf 	bl	800202e <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80028d0:	e00e      	b.n	80028f0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d6:	f003 0310 	and.w	r3, r3, #16
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f7ff fbb9 	bl	8002056 <HAL_ADC_ErrorCallback>
}
 80028e4:	e004      	b.n	80028f0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	4798      	blx	r3
}
 80028f0:	bf00      	nop
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002904:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f7ff fb9b 	bl	8002042 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800290c:	bf00      	nop
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002920:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002926:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002932:	f043 0204 	orr.w	r2, r3, #4
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f7ff fb8b 	bl	8002056 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002940:	bf00      	nop
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a7a      	ldr	r2, [pc, #488]	; (8002b40 <ADC_ConfigureBoostMode+0x1f8>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d004      	beq.n	8002964 <ADC_ConfigureBoostMode+0x1c>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a79      	ldr	r2, [pc, #484]	; (8002b44 <ADC_ConfigureBoostMode+0x1fc>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d109      	bne.n	8002978 <ADC_ConfigureBoostMode+0x30>
 8002964:	4b78      	ldr	r3, [pc, #480]	; (8002b48 <ADC_ConfigureBoostMode+0x200>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800296c:	2b00      	cmp	r3, #0
 800296e:	bf14      	ite	ne
 8002970:	2301      	movne	r3, #1
 8002972:	2300      	moveq	r3, #0
 8002974:	b2db      	uxtb	r3, r3
 8002976:	e008      	b.n	800298a <ADC_ConfigureBoostMode+0x42>
 8002978:	4b74      	ldr	r3, [pc, #464]	; (8002b4c <ADC_ConfigureBoostMode+0x204>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002980:	2b00      	cmp	r3, #0
 8002982:	bf14      	ite	ne
 8002984:	2301      	movne	r3, #1
 8002986:	2300      	moveq	r3, #0
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d01c      	beq.n	80029c8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800298e:	f004 fb11 	bl	8006fb4 <HAL_RCC_GetHCLKFreq>
 8002992:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800299c:	d010      	beq.n	80029c0 <ADC_ConfigureBoostMode+0x78>
 800299e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80029a2:	d873      	bhi.n	8002a8c <ADC_ConfigureBoostMode+0x144>
 80029a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029a8:	d002      	beq.n	80029b0 <ADC_ConfigureBoostMode+0x68>
 80029aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029ae:	d16d      	bne.n	8002a8c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	0c1b      	lsrs	r3, r3, #16
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029bc:	60fb      	str	r3, [r7, #12]
        break;
 80029be:	e068      	b.n	8002a92 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	089b      	lsrs	r3, r3, #2
 80029c4:	60fb      	str	r3, [r7, #12]
        break;
 80029c6:	e064      	b.n	8002a92 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80029c8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80029cc:	f04f 0100 	mov.w	r1, #0
 80029d0:	f005 fd56 	bl	8008480 <HAL_RCCEx_GetPeriphCLKFreq>
 80029d4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80029de:	d051      	beq.n	8002a84 <ADC_ConfigureBoostMode+0x13c>
 80029e0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80029e4:	d854      	bhi.n	8002a90 <ADC_ConfigureBoostMode+0x148>
 80029e6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80029ea:	d047      	beq.n	8002a7c <ADC_ConfigureBoostMode+0x134>
 80029ec:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80029f0:	d84e      	bhi.n	8002a90 <ADC_ConfigureBoostMode+0x148>
 80029f2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80029f6:	d03d      	beq.n	8002a74 <ADC_ConfigureBoostMode+0x12c>
 80029f8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80029fc:	d848      	bhi.n	8002a90 <ADC_ConfigureBoostMode+0x148>
 80029fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a02:	d033      	beq.n	8002a6c <ADC_ConfigureBoostMode+0x124>
 8002a04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a08:	d842      	bhi.n	8002a90 <ADC_ConfigureBoostMode+0x148>
 8002a0a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002a0e:	d029      	beq.n	8002a64 <ADC_ConfigureBoostMode+0x11c>
 8002a10:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002a14:	d83c      	bhi.n	8002a90 <ADC_ConfigureBoostMode+0x148>
 8002a16:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002a1a:	d01a      	beq.n	8002a52 <ADC_ConfigureBoostMode+0x10a>
 8002a1c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002a20:	d836      	bhi.n	8002a90 <ADC_ConfigureBoostMode+0x148>
 8002a22:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002a26:	d014      	beq.n	8002a52 <ADC_ConfigureBoostMode+0x10a>
 8002a28:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002a2c:	d830      	bhi.n	8002a90 <ADC_ConfigureBoostMode+0x148>
 8002a2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a32:	d00e      	beq.n	8002a52 <ADC_ConfigureBoostMode+0x10a>
 8002a34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a38:	d82a      	bhi.n	8002a90 <ADC_ConfigureBoostMode+0x148>
 8002a3a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002a3e:	d008      	beq.n	8002a52 <ADC_ConfigureBoostMode+0x10a>
 8002a40:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002a44:	d824      	bhi.n	8002a90 <ADC_ConfigureBoostMode+0x148>
 8002a46:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a4a:	d002      	beq.n	8002a52 <ADC_ConfigureBoostMode+0x10a>
 8002a4c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a50:	d11e      	bne.n	8002a90 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	0c9b      	lsrs	r3, r3, #18
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a60:	60fb      	str	r3, [r7, #12]
        break;
 8002a62:	e016      	b.n	8002a92 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	091b      	lsrs	r3, r3, #4
 8002a68:	60fb      	str	r3, [r7, #12]
        break;
 8002a6a:	e012      	b.n	8002a92 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	095b      	lsrs	r3, r3, #5
 8002a70:	60fb      	str	r3, [r7, #12]
        break;
 8002a72:	e00e      	b.n	8002a92 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	099b      	lsrs	r3, r3, #6
 8002a78:	60fb      	str	r3, [r7, #12]
        break;
 8002a7a:	e00a      	b.n	8002a92 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	09db      	lsrs	r3, r3, #7
 8002a80:	60fb      	str	r3, [r7, #12]
        break;
 8002a82:	e006      	b.n	8002a92 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	0a1b      	lsrs	r3, r3, #8
 8002a88:	60fb      	str	r3, [r7, #12]
        break;
 8002a8a:	e002      	b.n	8002a92 <ADC_ConfigureBoostMode+0x14a>
        break;
 8002a8c:	bf00      	nop
 8002a8e:	e000      	b.n	8002a92 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002a90:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002a92:	f7fe fd4f 	bl	8001534 <HAL_GetREVID>
 8002a96:	4603      	mov	r3, r0
 8002a98:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d815      	bhi.n	8002acc <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	4a2b      	ldr	r2, [pc, #172]	; (8002b50 <ADC_ConfigureBoostMode+0x208>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d908      	bls.n	8002aba <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	689a      	ldr	r2, [r3, #8]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ab6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002ab8:	e03e      	b.n	8002b38 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ac8:	609a      	str	r2, [r3, #8]
}
 8002aca:	e035      	b.n	8002b38 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	085b      	lsrs	r3, r3, #1
 8002ad0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	4a1f      	ldr	r2, [pc, #124]	; (8002b54 <ADC_ConfigureBoostMode+0x20c>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d808      	bhi.n	8002aec <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002ae8:	609a      	str	r2, [r3, #8]
}
 8002aea:	e025      	b.n	8002b38 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	4a1a      	ldr	r2, [pc, #104]	; (8002b58 <ADC_ConfigureBoostMode+0x210>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d80a      	bhi.n	8002b0a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b06:	609a      	str	r2, [r3, #8]
}
 8002b08:	e016      	b.n	8002b38 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	4a13      	ldr	r2, [pc, #76]	; (8002b5c <ADC_ConfigureBoostMode+0x214>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d80a      	bhi.n	8002b28 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b24:	609a      	str	r2, [r3, #8]
}
 8002b26:	e007      	b.n	8002b38 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689a      	ldr	r2, [r3, #8]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002b36:	609a      	str	r2, [r3, #8]
}
 8002b38:	bf00      	nop
 8002b3a:	3710      	adds	r7, #16
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40022000 	.word	0x40022000
 8002b44:	40022100 	.word	0x40022100
 8002b48:	40022300 	.word	0x40022300
 8002b4c:	58026300 	.word	0x58026300
 8002b50:	01312d00 	.word	0x01312d00
 8002b54:	005f5e10 	.word	0x005f5e10
 8002b58:	00bebc20 	.word	0x00bebc20
 8002b5c:	017d7840 	.word	0x017d7840

08002b60 <LL_ADC_IsEnabled>:
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d101      	bne.n	8002b78 <LL_ADC_IsEnabled+0x18>
 8002b74:	2301      	movs	r3, #1
 8002b76:	e000      	b.n	8002b7a <LL_ADC_IsEnabled+0x1a>
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <LL_ADC_REG_IsConversionOngoing>:
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 0304 	and.w	r3, r3, #4
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d101      	bne.n	8002b9e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e000      	b.n	8002ba0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002bac:	b590      	push	{r4, r7, lr}
 8002bae:	b09f      	sub	sp, #124	; 0x7c
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d101      	bne.n	8002bca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	e0be      	b.n	8002d48 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a5c      	ldr	r2, [pc, #368]	; (8002d50 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d102      	bne.n	8002bea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002be4:	4b5b      	ldr	r3, [pc, #364]	; (8002d54 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002be6:	60bb      	str	r3, [r7, #8]
 8002be8:	e001      	b.n	8002bee <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002bea:	2300      	movs	r3, #0
 8002bec:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d10b      	bne.n	8002c0c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf8:	f043 0220 	orr.w	r2, r3, #32
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e09d      	b.n	8002d48 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7ff ffb9 	bl	8002b86 <LL_ADC_REG_IsConversionOngoing>
 8002c14:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff ffb3 	bl	8002b86 <LL_ADC_REG_IsConversionOngoing>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d17f      	bne.n	8002d26 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002c26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d17c      	bne.n	8002d26 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a47      	ldr	r2, [pc, #284]	; (8002d50 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d004      	beq.n	8002c40 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a46      	ldr	r2, [pc, #280]	; (8002d54 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d101      	bne.n	8002c44 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002c40:	4b45      	ldr	r3, [pc, #276]	; (8002d58 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002c42:	e000      	b.n	8002c46 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002c44:	4b45      	ldr	r3, [pc, #276]	; (8002d5c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002c46:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d039      	beq.n	8002cc4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c60:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a3a      	ldr	r2, [pc, #232]	; (8002d50 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d004      	beq.n	8002c76 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a38      	ldr	r2, [pc, #224]	; (8002d54 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d10e      	bne.n	8002c94 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002c76:	4836      	ldr	r0, [pc, #216]	; (8002d50 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002c78:	f7ff ff72 	bl	8002b60 <LL_ADC_IsEnabled>
 8002c7c:	4604      	mov	r4, r0
 8002c7e:	4835      	ldr	r0, [pc, #212]	; (8002d54 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002c80:	f7ff ff6e 	bl	8002b60 <LL_ADC_IsEnabled>
 8002c84:	4603      	mov	r3, r0
 8002c86:	4323      	orrs	r3, r4
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	bf0c      	ite	eq
 8002c8c:	2301      	moveq	r3, #1
 8002c8e:	2300      	movne	r3, #0
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	e008      	b.n	8002ca6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002c94:	4832      	ldr	r0, [pc, #200]	; (8002d60 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002c96:	f7ff ff63 	bl	8002b60 <LL_ADC_IsEnabled>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	bf0c      	ite	eq
 8002ca0:	2301      	moveq	r3, #1
 8002ca2:	2300      	movne	r3, #0
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d047      	beq.n	8002d3a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002caa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cac:	689a      	ldr	r2, [r3, #8]
 8002cae:	4b2d      	ldr	r3, [pc, #180]	; (8002d64 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	6811      	ldr	r1, [r2, #0]
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	6892      	ldr	r2, [r2, #8]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cc0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cc2:	e03a      	b.n	8002d3a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002cc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cce:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a1e      	ldr	r2, [pc, #120]	; (8002d50 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d004      	beq.n	8002ce4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a1d      	ldr	r2, [pc, #116]	; (8002d54 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d10e      	bne.n	8002d02 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002ce4:	481a      	ldr	r0, [pc, #104]	; (8002d50 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002ce6:	f7ff ff3b 	bl	8002b60 <LL_ADC_IsEnabled>
 8002cea:	4604      	mov	r4, r0
 8002cec:	4819      	ldr	r0, [pc, #100]	; (8002d54 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002cee:	f7ff ff37 	bl	8002b60 <LL_ADC_IsEnabled>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	4323      	orrs	r3, r4
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	bf0c      	ite	eq
 8002cfa:	2301      	moveq	r3, #1
 8002cfc:	2300      	movne	r3, #0
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	e008      	b.n	8002d14 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002d02:	4817      	ldr	r0, [pc, #92]	; (8002d60 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002d04:	f7ff ff2c 	bl	8002b60 <LL_ADC_IsEnabled>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	bf0c      	ite	eq
 8002d0e:	2301      	moveq	r3, #1
 8002d10:	2300      	movne	r3, #0
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d010      	beq.n	8002d3a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002d18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	4b11      	ldr	r3, [pc, #68]	; (8002d64 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002d1e:	4013      	ands	r3, r2
 8002d20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d22:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d24:	e009      	b.n	8002d3a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2a:	f043 0220 	orr.w	r2, r3, #32
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002d38:	e000      	b.n	8002d3c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d3a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d44:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	377c      	adds	r7, #124	; 0x7c
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd90      	pop	{r4, r7, pc}
 8002d50:	40022000 	.word	0x40022000
 8002d54:	40022100 	.word	0x40022100
 8002d58:	40022300 	.word	0x40022300
 8002d5c:	58026300 	.word	0x58026300
 8002d60:	58026000 	.word	0x58026000
 8002d64:	fffff0e0 	.word	0xfffff0e0

08002d68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f003 0307 	and.w	r3, r3, #7
 8002d76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d78:	4b0b      	ldr	r3, [pc, #44]	; (8002da8 <__NVIC_SetPriorityGrouping+0x40>)
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d7e:	68ba      	ldr	r2, [r7, #8]
 8002d80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d84:	4013      	ands	r3, r2
 8002d86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d90:	4b06      	ldr	r3, [pc, #24]	; (8002dac <__NVIC_SetPriorityGrouping+0x44>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d96:	4a04      	ldr	r2, [pc, #16]	; (8002da8 <__NVIC_SetPriorityGrouping+0x40>)
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	60d3      	str	r3, [r2, #12]
}
 8002d9c:	bf00      	nop
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	e000ed00 	.word	0xe000ed00
 8002dac:	05fa0000 	.word	0x05fa0000

08002db0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002db4:	4b04      	ldr	r3, [pc, #16]	; (8002dc8 <__NVIC_GetPriorityGrouping+0x18>)
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	0a1b      	lsrs	r3, r3, #8
 8002dba:	f003 0307 	and.w	r3, r3, #7
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr
 8002dc8:	e000ed00 	.word	0xe000ed00

08002dcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002dd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	db0b      	blt.n	8002df6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dde:	88fb      	ldrh	r3, [r7, #6]
 8002de0:	f003 021f 	and.w	r2, r3, #31
 8002de4:	4907      	ldr	r1, [pc, #28]	; (8002e04 <__NVIC_EnableIRQ+0x38>)
 8002de6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dea:	095b      	lsrs	r3, r3, #5
 8002dec:	2001      	movs	r0, #1
 8002dee:	fa00 f202 	lsl.w	r2, r0, r2
 8002df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	e000e100 	.word	0xe000e100

08002e08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	6039      	str	r1, [r7, #0]
 8002e12:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	db0a      	blt.n	8002e32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	b2da      	uxtb	r2, r3
 8002e20:	490c      	ldr	r1, [pc, #48]	; (8002e54 <__NVIC_SetPriority+0x4c>)
 8002e22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e26:	0112      	lsls	r2, r2, #4
 8002e28:	b2d2      	uxtb	r2, r2
 8002e2a:	440b      	add	r3, r1
 8002e2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e30:	e00a      	b.n	8002e48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	4908      	ldr	r1, [pc, #32]	; (8002e58 <__NVIC_SetPriority+0x50>)
 8002e38:	88fb      	ldrh	r3, [r7, #6]
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	3b04      	subs	r3, #4
 8002e40:	0112      	lsls	r2, r2, #4
 8002e42:	b2d2      	uxtb	r2, r2
 8002e44:	440b      	add	r3, r1
 8002e46:	761a      	strb	r2, [r3, #24]
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	e000e100 	.word	0xe000e100
 8002e58:	e000ed00 	.word	0xe000ed00

08002e5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b089      	sub	sp, #36	; 0x24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f003 0307 	and.w	r3, r3, #7
 8002e6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	f1c3 0307 	rsb	r3, r3, #7
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	bf28      	it	cs
 8002e7a:	2304      	movcs	r3, #4
 8002e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	3304      	adds	r3, #4
 8002e82:	2b06      	cmp	r3, #6
 8002e84:	d902      	bls.n	8002e8c <NVIC_EncodePriority+0x30>
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	3b03      	subs	r3, #3
 8002e8a:	e000      	b.n	8002e8e <NVIC_EncodePriority+0x32>
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e90:	f04f 32ff 	mov.w	r2, #4294967295
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9a:	43da      	mvns	r2, r3
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	401a      	ands	r2, r3
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8002eae:	43d9      	mvns	r1, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb4:	4313      	orrs	r3, r2
         );
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3724      	adds	r7, #36	; 0x24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
	...

08002ec4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ed4:	d301      	bcc.n	8002eda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e00f      	b.n	8002efa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eda:	4a0a      	ldr	r2, [pc, #40]	; (8002f04 <SysTick_Config+0x40>)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ee2:	210f      	movs	r1, #15
 8002ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ee8:	f7ff ff8e 	bl	8002e08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002eec:	4b05      	ldr	r3, [pc, #20]	; (8002f04 <SysTick_Config+0x40>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ef2:	4b04      	ldr	r3, [pc, #16]	; (8002f04 <SysTick_Config+0x40>)
 8002ef4:	2207      	movs	r2, #7
 8002ef6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	e000e010 	.word	0xe000e010

08002f08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f7ff ff29 	bl	8002d68 <__NVIC_SetPriorityGrouping>
}
 8002f16:	bf00      	nop
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b086      	sub	sp, #24
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	4603      	mov	r3, r0
 8002f26:	60b9      	str	r1, [r7, #8]
 8002f28:	607a      	str	r2, [r7, #4]
 8002f2a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f2c:	f7ff ff40 	bl	8002db0 <__NVIC_GetPriorityGrouping>
 8002f30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	68b9      	ldr	r1, [r7, #8]
 8002f36:	6978      	ldr	r0, [r7, #20]
 8002f38:	f7ff ff90 	bl	8002e5c <NVIC_EncodePriority>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f42:	4611      	mov	r1, r2
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff ff5f 	bl	8002e08 <__NVIC_SetPriority>
}
 8002f4a:	bf00      	nop
 8002f4c:	3718      	adds	r7, #24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	4603      	mov	r3, r0
 8002f5a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff ff33 	bl	8002dcc <__NVIC_EnableIRQ>
}
 8002f66:	bf00      	nop
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b082      	sub	sp, #8
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7ff ffa4 	bl	8002ec4 <SysTick_Config>
 8002f7c:	4603      	mov	r3, r0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
	...

08002f88 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002f90:	f7fe faa0 	bl	80014d4 <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d101      	bne.n	8002fa0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e316      	b.n	80035ce <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a66      	ldr	r2, [pc, #408]	; (8003140 <HAL_DMA_Init+0x1b8>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d04a      	beq.n	8003040 <HAL_DMA_Init+0xb8>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a65      	ldr	r2, [pc, #404]	; (8003144 <HAL_DMA_Init+0x1bc>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d045      	beq.n	8003040 <HAL_DMA_Init+0xb8>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a63      	ldr	r2, [pc, #396]	; (8003148 <HAL_DMA_Init+0x1c0>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d040      	beq.n	8003040 <HAL_DMA_Init+0xb8>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a62      	ldr	r2, [pc, #392]	; (800314c <HAL_DMA_Init+0x1c4>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d03b      	beq.n	8003040 <HAL_DMA_Init+0xb8>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a60      	ldr	r2, [pc, #384]	; (8003150 <HAL_DMA_Init+0x1c8>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d036      	beq.n	8003040 <HAL_DMA_Init+0xb8>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a5f      	ldr	r2, [pc, #380]	; (8003154 <HAL_DMA_Init+0x1cc>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d031      	beq.n	8003040 <HAL_DMA_Init+0xb8>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a5d      	ldr	r2, [pc, #372]	; (8003158 <HAL_DMA_Init+0x1d0>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d02c      	beq.n	8003040 <HAL_DMA_Init+0xb8>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a5c      	ldr	r2, [pc, #368]	; (800315c <HAL_DMA_Init+0x1d4>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d027      	beq.n	8003040 <HAL_DMA_Init+0xb8>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a5a      	ldr	r2, [pc, #360]	; (8003160 <HAL_DMA_Init+0x1d8>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d022      	beq.n	8003040 <HAL_DMA_Init+0xb8>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a59      	ldr	r2, [pc, #356]	; (8003164 <HAL_DMA_Init+0x1dc>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d01d      	beq.n	8003040 <HAL_DMA_Init+0xb8>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a57      	ldr	r2, [pc, #348]	; (8003168 <HAL_DMA_Init+0x1e0>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d018      	beq.n	8003040 <HAL_DMA_Init+0xb8>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a56      	ldr	r2, [pc, #344]	; (800316c <HAL_DMA_Init+0x1e4>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d013      	beq.n	8003040 <HAL_DMA_Init+0xb8>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a54      	ldr	r2, [pc, #336]	; (8003170 <HAL_DMA_Init+0x1e8>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d00e      	beq.n	8003040 <HAL_DMA_Init+0xb8>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a53      	ldr	r2, [pc, #332]	; (8003174 <HAL_DMA_Init+0x1ec>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d009      	beq.n	8003040 <HAL_DMA_Init+0xb8>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a51      	ldr	r2, [pc, #324]	; (8003178 <HAL_DMA_Init+0x1f0>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d004      	beq.n	8003040 <HAL_DMA_Init+0xb8>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a50      	ldr	r2, [pc, #320]	; (800317c <HAL_DMA_Init+0x1f4>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d101      	bne.n	8003044 <HAL_DMA_Init+0xbc>
 8003040:	2301      	movs	r3, #1
 8003042:	e000      	b.n	8003046 <HAL_DMA_Init+0xbe>
 8003044:	2300      	movs	r3, #0
 8003046:	2b00      	cmp	r3, #0
 8003048:	f000 813b 	beq.w	80032c2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2202      	movs	r2, #2
 8003050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a37      	ldr	r2, [pc, #220]	; (8003140 <HAL_DMA_Init+0x1b8>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d04a      	beq.n	80030fc <HAL_DMA_Init+0x174>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a36      	ldr	r2, [pc, #216]	; (8003144 <HAL_DMA_Init+0x1bc>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d045      	beq.n	80030fc <HAL_DMA_Init+0x174>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a34      	ldr	r2, [pc, #208]	; (8003148 <HAL_DMA_Init+0x1c0>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d040      	beq.n	80030fc <HAL_DMA_Init+0x174>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a33      	ldr	r2, [pc, #204]	; (800314c <HAL_DMA_Init+0x1c4>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d03b      	beq.n	80030fc <HAL_DMA_Init+0x174>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a31      	ldr	r2, [pc, #196]	; (8003150 <HAL_DMA_Init+0x1c8>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d036      	beq.n	80030fc <HAL_DMA_Init+0x174>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a30      	ldr	r2, [pc, #192]	; (8003154 <HAL_DMA_Init+0x1cc>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d031      	beq.n	80030fc <HAL_DMA_Init+0x174>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a2e      	ldr	r2, [pc, #184]	; (8003158 <HAL_DMA_Init+0x1d0>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d02c      	beq.n	80030fc <HAL_DMA_Init+0x174>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a2d      	ldr	r2, [pc, #180]	; (800315c <HAL_DMA_Init+0x1d4>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d027      	beq.n	80030fc <HAL_DMA_Init+0x174>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a2b      	ldr	r2, [pc, #172]	; (8003160 <HAL_DMA_Init+0x1d8>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d022      	beq.n	80030fc <HAL_DMA_Init+0x174>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a2a      	ldr	r2, [pc, #168]	; (8003164 <HAL_DMA_Init+0x1dc>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d01d      	beq.n	80030fc <HAL_DMA_Init+0x174>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a28      	ldr	r2, [pc, #160]	; (8003168 <HAL_DMA_Init+0x1e0>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d018      	beq.n	80030fc <HAL_DMA_Init+0x174>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a27      	ldr	r2, [pc, #156]	; (800316c <HAL_DMA_Init+0x1e4>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d013      	beq.n	80030fc <HAL_DMA_Init+0x174>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a25      	ldr	r2, [pc, #148]	; (8003170 <HAL_DMA_Init+0x1e8>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d00e      	beq.n	80030fc <HAL_DMA_Init+0x174>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a24      	ldr	r2, [pc, #144]	; (8003174 <HAL_DMA_Init+0x1ec>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d009      	beq.n	80030fc <HAL_DMA_Init+0x174>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a22      	ldr	r2, [pc, #136]	; (8003178 <HAL_DMA_Init+0x1f0>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d004      	beq.n	80030fc <HAL_DMA_Init+0x174>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a21      	ldr	r2, [pc, #132]	; (800317c <HAL_DMA_Init+0x1f4>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d108      	bne.n	800310e <HAL_DMA_Init+0x186>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f022 0201 	bic.w	r2, r2, #1
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	e007      	b.n	800311e <HAL_DMA_Init+0x196>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 0201 	bic.w	r2, r2, #1
 800311c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800311e:	e02f      	b.n	8003180 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003120:	f7fe f9d8 	bl	80014d4 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b05      	cmp	r3, #5
 800312c:	d928      	bls.n	8003180 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2220      	movs	r2, #32
 8003132:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2203      	movs	r2, #3
 8003138:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e246      	b.n	80035ce <HAL_DMA_Init+0x646>
 8003140:	40020010 	.word	0x40020010
 8003144:	40020028 	.word	0x40020028
 8003148:	40020040 	.word	0x40020040
 800314c:	40020058 	.word	0x40020058
 8003150:	40020070 	.word	0x40020070
 8003154:	40020088 	.word	0x40020088
 8003158:	400200a0 	.word	0x400200a0
 800315c:	400200b8 	.word	0x400200b8
 8003160:	40020410 	.word	0x40020410
 8003164:	40020428 	.word	0x40020428
 8003168:	40020440 	.word	0x40020440
 800316c:	40020458 	.word	0x40020458
 8003170:	40020470 	.word	0x40020470
 8003174:	40020488 	.word	0x40020488
 8003178:	400204a0 	.word	0x400204a0
 800317c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1c8      	bne.n	8003120 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	4b83      	ldr	r3, [pc, #524]	; (80033a8 <HAL_DMA_Init+0x420>)
 800319a:	4013      	ands	r3, r2
 800319c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80031a6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031b2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031be:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d0:	2b04      	cmp	r3, #4
 80031d2:	d107      	bne.n	80031e4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031dc:	4313      	orrs	r3, r2
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80031e4:	4b71      	ldr	r3, [pc, #452]	; (80033ac <HAL_DMA_Init+0x424>)
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	4b71      	ldr	r3, [pc, #452]	; (80033b0 <HAL_DMA_Init+0x428>)
 80031ea:	4013      	ands	r3, r2
 80031ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031f0:	d328      	bcc.n	8003244 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2b28      	cmp	r3, #40	; 0x28
 80031f8:	d903      	bls.n	8003202 <HAL_DMA_Init+0x27a>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2b2e      	cmp	r3, #46	; 0x2e
 8003200:	d917      	bls.n	8003232 <HAL_DMA_Init+0x2aa>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	2b3e      	cmp	r3, #62	; 0x3e
 8003208:	d903      	bls.n	8003212 <HAL_DMA_Init+0x28a>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	2b42      	cmp	r3, #66	; 0x42
 8003210:	d90f      	bls.n	8003232 <HAL_DMA_Init+0x2aa>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	2b46      	cmp	r3, #70	; 0x46
 8003218:	d903      	bls.n	8003222 <HAL_DMA_Init+0x29a>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2b48      	cmp	r3, #72	; 0x48
 8003220:	d907      	bls.n	8003232 <HAL_DMA_Init+0x2aa>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2b4e      	cmp	r3, #78	; 0x4e
 8003228:	d905      	bls.n	8003236 <HAL_DMA_Init+0x2ae>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2b52      	cmp	r3, #82	; 0x52
 8003230:	d801      	bhi.n	8003236 <HAL_DMA_Init+0x2ae>
 8003232:	2301      	movs	r3, #1
 8003234:	e000      	b.n	8003238 <HAL_DMA_Init+0x2b0>
 8003236:	2300      	movs	r3, #0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d003      	beq.n	8003244 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003242:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	697a      	ldr	r2, [r7, #20]
 800324a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	f023 0307 	bic.w	r3, r3, #7
 800325a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	4313      	orrs	r3, r2
 8003264:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326a:	2b04      	cmp	r3, #4
 800326c:	d117      	bne.n	800329e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	4313      	orrs	r3, r2
 8003276:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00e      	beq.n	800329e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f001 fdcf 	bl	8004e24 <DMA_CheckFifoParam>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d008      	beq.n	800329e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2240      	movs	r2, #64	; 0x40
 8003290:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e197      	b.n	80035ce <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f001 fd0a 	bl	8004cc0 <DMA_CalcBaseAndBitshift>
 80032ac:	4603      	mov	r3, r0
 80032ae:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b4:	f003 031f 	and.w	r3, r3, #31
 80032b8:	223f      	movs	r2, #63	; 0x3f
 80032ba:	409a      	lsls	r2, r3
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	609a      	str	r2, [r3, #8]
 80032c0:	e0cd      	b.n	800345e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a3b      	ldr	r2, [pc, #236]	; (80033b4 <HAL_DMA_Init+0x42c>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d022      	beq.n	8003312 <HAL_DMA_Init+0x38a>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a39      	ldr	r2, [pc, #228]	; (80033b8 <HAL_DMA_Init+0x430>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d01d      	beq.n	8003312 <HAL_DMA_Init+0x38a>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a38      	ldr	r2, [pc, #224]	; (80033bc <HAL_DMA_Init+0x434>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d018      	beq.n	8003312 <HAL_DMA_Init+0x38a>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a36      	ldr	r2, [pc, #216]	; (80033c0 <HAL_DMA_Init+0x438>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d013      	beq.n	8003312 <HAL_DMA_Init+0x38a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a35      	ldr	r2, [pc, #212]	; (80033c4 <HAL_DMA_Init+0x43c>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d00e      	beq.n	8003312 <HAL_DMA_Init+0x38a>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a33      	ldr	r2, [pc, #204]	; (80033c8 <HAL_DMA_Init+0x440>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d009      	beq.n	8003312 <HAL_DMA_Init+0x38a>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a32      	ldr	r2, [pc, #200]	; (80033cc <HAL_DMA_Init+0x444>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d004      	beq.n	8003312 <HAL_DMA_Init+0x38a>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a30      	ldr	r2, [pc, #192]	; (80033d0 <HAL_DMA_Init+0x448>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d101      	bne.n	8003316 <HAL_DMA_Init+0x38e>
 8003312:	2301      	movs	r3, #1
 8003314:	e000      	b.n	8003318 <HAL_DMA_Init+0x390>
 8003316:	2300      	movs	r3, #0
 8003318:	2b00      	cmp	r3, #0
 800331a:	f000 8097 	beq.w	800344c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a24      	ldr	r2, [pc, #144]	; (80033b4 <HAL_DMA_Init+0x42c>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d021      	beq.n	800336c <HAL_DMA_Init+0x3e4>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a22      	ldr	r2, [pc, #136]	; (80033b8 <HAL_DMA_Init+0x430>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d01c      	beq.n	800336c <HAL_DMA_Init+0x3e4>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a21      	ldr	r2, [pc, #132]	; (80033bc <HAL_DMA_Init+0x434>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d017      	beq.n	800336c <HAL_DMA_Init+0x3e4>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a1f      	ldr	r2, [pc, #124]	; (80033c0 <HAL_DMA_Init+0x438>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d012      	beq.n	800336c <HAL_DMA_Init+0x3e4>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a1e      	ldr	r2, [pc, #120]	; (80033c4 <HAL_DMA_Init+0x43c>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d00d      	beq.n	800336c <HAL_DMA_Init+0x3e4>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a1c      	ldr	r2, [pc, #112]	; (80033c8 <HAL_DMA_Init+0x440>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d008      	beq.n	800336c <HAL_DMA_Init+0x3e4>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a1b      	ldr	r2, [pc, #108]	; (80033cc <HAL_DMA_Init+0x444>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d003      	beq.n	800336c <HAL_DMA_Init+0x3e4>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a19      	ldr	r2, [pc, #100]	; (80033d0 <HAL_DMA_Init+0x448>)
 800336a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2202      	movs	r2, #2
 8003370:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	4b13      	ldr	r3, [pc, #76]	; (80033d4 <HAL_DMA_Init+0x44c>)
 8003388:	4013      	ands	r3, r2
 800338a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	2b40      	cmp	r3, #64	; 0x40
 8003392:	d021      	beq.n	80033d8 <HAL_DMA_Init+0x450>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	2b80      	cmp	r3, #128	; 0x80
 800339a:	d102      	bne.n	80033a2 <HAL_DMA_Init+0x41a>
 800339c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80033a0:	e01b      	b.n	80033da <HAL_DMA_Init+0x452>
 80033a2:	2300      	movs	r3, #0
 80033a4:	e019      	b.n	80033da <HAL_DMA_Init+0x452>
 80033a6:	bf00      	nop
 80033a8:	fe10803f 	.word	0xfe10803f
 80033ac:	5c001000 	.word	0x5c001000
 80033b0:	ffff0000 	.word	0xffff0000
 80033b4:	58025408 	.word	0x58025408
 80033b8:	5802541c 	.word	0x5802541c
 80033bc:	58025430 	.word	0x58025430
 80033c0:	58025444 	.word	0x58025444
 80033c4:	58025458 	.word	0x58025458
 80033c8:	5802546c 	.word	0x5802546c
 80033cc:	58025480 	.word	0x58025480
 80033d0:	58025494 	.word	0x58025494
 80033d4:	fffe000f 	.word	0xfffe000f
 80033d8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	68d2      	ldr	r2, [r2, #12]
 80033de:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80033e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80033e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80033f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80033f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003400:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003408:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	4313      	orrs	r3, r2
 800340e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	461a      	mov	r2, r3
 800341e:	4b6e      	ldr	r3, [pc, #440]	; (80035d8 <HAL_DMA_Init+0x650>)
 8003420:	4413      	add	r3, r2
 8003422:	4a6e      	ldr	r2, [pc, #440]	; (80035dc <HAL_DMA_Init+0x654>)
 8003424:	fba2 2303 	umull	r2, r3, r2, r3
 8003428:	091b      	lsrs	r3, r3, #4
 800342a:	009a      	lsls	r2, r3, #2
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f001 fc45 	bl	8004cc0 <DMA_CalcBaseAndBitshift>
 8003436:	4603      	mov	r3, r0
 8003438:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800343e:	f003 031f 	and.w	r3, r3, #31
 8003442:	2201      	movs	r2, #1
 8003444:	409a      	lsls	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	605a      	str	r2, [r3, #4]
 800344a:	e008      	b.n	800345e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2240      	movs	r2, #64	; 0x40
 8003450:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2203      	movs	r2, #3
 8003456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e0b7      	b.n	80035ce <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a5f      	ldr	r2, [pc, #380]	; (80035e0 <HAL_DMA_Init+0x658>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d072      	beq.n	800354e <HAL_DMA_Init+0x5c6>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a5d      	ldr	r2, [pc, #372]	; (80035e4 <HAL_DMA_Init+0x65c>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d06d      	beq.n	800354e <HAL_DMA_Init+0x5c6>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a5c      	ldr	r2, [pc, #368]	; (80035e8 <HAL_DMA_Init+0x660>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d068      	beq.n	800354e <HAL_DMA_Init+0x5c6>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a5a      	ldr	r2, [pc, #360]	; (80035ec <HAL_DMA_Init+0x664>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d063      	beq.n	800354e <HAL_DMA_Init+0x5c6>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a59      	ldr	r2, [pc, #356]	; (80035f0 <HAL_DMA_Init+0x668>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d05e      	beq.n	800354e <HAL_DMA_Init+0x5c6>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a57      	ldr	r2, [pc, #348]	; (80035f4 <HAL_DMA_Init+0x66c>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d059      	beq.n	800354e <HAL_DMA_Init+0x5c6>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a56      	ldr	r2, [pc, #344]	; (80035f8 <HAL_DMA_Init+0x670>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d054      	beq.n	800354e <HAL_DMA_Init+0x5c6>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a54      	ldr	r2, [pc, #336]	; (80035fc <HAL_DMA_Init+0x674>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d04f      	beq.n	800354e <HAL_DMA_Init+0x5c6>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a53      	ldr	r2, [pc, #332]	; (8003600 <HAL_DMA_Init+0x678>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d04a      	beq.n	800354e <HAL_DMA_Init+0x5c6>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a51      	ldr	r2, [pc, #324]	; (8003604 <HAL_DMA_Init+0x67c>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d045      	beq.n	800354e <HAL_DMA_Init+0x5c6>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a50      	ldr	r2, [pc, #320]	; (8003608 <HAL_DMA_Init+0x680>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d040      	beq.n	800354e <HAL_DMA_Init+0x5c6>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a4e      	ldr	r2, [pc, #312]	; (800360c <HAL_DMA_Init+0x684>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d03b      	beq.n	800354e <HAL_DMA_Init+0x5c6>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a4d      	ldr	r2, [pc, #308]	; (8003610 <HAL_DMA_Init+0x688>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d036      	beq.n	800354e <HAL_DMA_Init+0x5c6>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a4b      	ldr	r2, [pc, #300]	; (8003614 <HAL_DMA_Init+0x68c>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d031      	beq.n	800354e <HAL_DMA_Init+0x5c6>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a4a      	ldr	r2, [pc, #296]	; (8003618 <HAL_DMA_Init+0x690>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d02c      	beq.n	800354e <HAL_DMA_Init+0x5c6>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a48      	ldr	r2, [pc, #288]	; (800361c <HAL_DMA_Init+0x694>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d027      	beq.n	800354e <HAL_DMA_Init+0x5c6>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a47      	ldr	r2, [pc, #284]	; (8003620 <HAL_DMA_Init+0x698>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d022      	beq.n	800354e <HAL_DMA_Init+0x5c6>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a45      	ldr	r2, [pc, #276]	; (8003624 <HAL_DMA_Init+0x69c>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d01d      	beq.n	800354e <HAL_DMA_Init+0x5c6>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a44      	ldr	r2, [pc, #272]	; (8003628 <HAL_DMA_Init+0x6a0>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d018      	beq.n	800354e <HAL_DMA_Init+0x5c6>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a42      	ldr	r2, [pc, #264]	; (800362c <HAL_DMA_Init+0x6a4>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d013      	beq.n	800354e <HAL_DMA_Init+0x5c6>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a41      	ldr	r2, [pc, #260]	; (8003630 <HAL_DMA_Init+0x6a8>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d00e      	beq.n	800354e <HAL_DMA_Init+0x5c6>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a3f      	ldr	r2, [pc, #252]	; (8003634 <HAL_DMA_Init+0x6ac>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d009      	beq.n	800354e <HAL_DMA_Init+0x5c6>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a3e      	ldr	r2, [pc, #248]	; (8003638 <HAL_DMA_Init+0x6b0>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d004      	beq.n	800354e <HAL_DMA_Init+0x5c6>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a3c      	ldr	r2, [pc, #240]	; (800363c <HAL_DMA_Init+0x6b4>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d101      	bne.n	8003552 <HAL_DMA_Init+0x5ca>
 800354e:	2301      	movs	r3, #1
 8003550:	e000      	b.n	8003554 <HAL_DMA_Init+0x5cc>
 8003552:	2300      	movs	r3, #0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d032      	beq.n	80035be <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f001 fcdf 	bl	8004f1c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	2b80      	cmp	r3, #128	; 0x80
 8003564:	d102      	bne.n	800356c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685a      	ldr	r2, [r3, #4]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003574:	b2d2      	uxtb	r2, r2
 8003576:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003580:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d010      	beq.n	80035ac <HAL_DMA_Init+0x624>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	2b08      	cmp	r3, #8
 8003590:	d80c      	bhi.n	80035ac <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f001 fd5c 	bl	8005050 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800359c:	2200      	movs	r2, #0
 800359e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80035a8:	605a      	str	r2, [r3, #4]
 80035aa:	e008      	b.n	80035be <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3718      	adds	r7, #24
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	a7fdabf8 	.word	0xa7fdabf8
 80035dc:	cccccccd 	.word	0xcccccccd
 80035e0:	40020010 	.word	0x40020010
 80035e4:	40020028 	.word	0x40020028
 80035e8:	40020040 	.word	0x40020040
 80035ec:	40020058 	.word	0x40020058
 80035f0:	40020070 	.word	0x40020070
 80035f4:	40020088 	.word	0x40020088
 80035f8:	400200a0 	.word	0x400200a0
 80035fc:	400200b8 	.word	0x400200b8
 8003600:	40020410 	.word	0x40020410
 8003604:	40020428 	.word	0x40020428
 8003608:	40020440 	.word	0x40020440
 800360c:	40020458 	.word	0x40020458
 8003610:	40020470 	.word	0x40020470
 8003614:	40020488 	.word	0x40020488
 8003618:	400204a0 	.word	0x400204a0
 800361c:	400204b8 	.word	0x400204b8
 8003620:	58025408 	.word	0x58025408
 8003624:	5802541c 	.word	0x5802541c
 8003628:	58025430 	.word	0x58025430
 800362c:	58025444 	.word	0x58025444
 8003630:	58025458 	.word	0x58025458
 8003634:	5802546c 	.word	0x5802546c
 8003638:	58025480 	.word	0x58025480
 800363c:	58025494 	.word	0x58025494

08003640 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
 800364c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800364e:	2300      	movs	r3, #0
 8003650:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d101      	bne.n	800365c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e226      	b.n	8003aaa <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003662:	2b01      	cmp	r3, #1
 8003664:	d101      	bne.n	800366a <HAL_DMA_Start_IT+0x2a>
 8003666:	2302      	movs	r3, #2
 8003668:	e21f      	b.n	8003aaa <HAL_DMA_Start_IT+0x46a>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2201      	movs	r2, #1
 800366e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b01      	cmp	r3, #1
 800367c:	f040 820a 	bne.w	8003a94 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2202      	movs	r2, #2
 8003684:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a68      	ldr	r2, [pc, #416]	; (8003834 <HAL_DMA_Start_IT+0x1f4>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d04a      	beq.n	800372e <HAL_DMA_Start_IT+0xee>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a66      	ldr	r2, [pc, #408]	; (8003838 <HAL_DMA_Start_IT+0x1f8>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d045      	beq.n	800372e <HAL_DMA_Start_IT+0xee>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a65      	ldr	r2, [pc, #404]	; (800383c <HAL_DMA_Start_IT+0x1fc>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d040      	beq.n	800372e <HAL_DMA_Start_IT+0xee>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a63      	ldr	r2, [pc, #396]	; (8003840 <HAL_DMA_Start_IT+0x200>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d03b      	beq.n	800372e <HAL_DMA_Start_IT+0xee>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a62      	ldr	r2, [pc, #392]	; (8003844 <HAL_DMA_Start_IT+0x204>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d036      	beq.n	800372e <HAL_DMA_Start_IT+0xee>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a60      	ldr	r2, [pc, #384]	; (8003848 <HAL_DMA_Start_IT+0x208>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d031      	beq.n	800372e <HAL_DMA_Start_IT+0xee>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a5f      	ldr	r2, [pc, #380]	; (800384c <HAL_DMA_Start_IT+0x20c>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d02c      	beq.n	800372e <HAL_DMA_Start_IT+0xee>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a5d      	ldr	r2, [pc, #372]	; (8003850 <HAL_DMA_Start_IT+0x210>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d027      	beq.n	800372e <HAL_DMA_Start_IT+0xee>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a5c      	ldr	r2, [pc, #368]	; (8003854 <HAL_DMA_Start_IT+0x214>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d022      	beq.n	800372e <HAL_DMA_Start_IT+0xee>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a5a      	ldr	r2, [pc, #360]	; (8003858 <HAL_DMA_Start_IT+0x218>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d01d      	beq.n	800372e <HAL_DMA_Start_IT+0xee>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a59      	ldr	r2, [pc, #356]	; (800385c <HAL_DMA_Start_IT+0x21c>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d018      	beq.n	800372e <HAL_DMA_Start_IT+0xee>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a57      	ldr	r2, [pc, #348]	; (8003860 <HAL_DMA_Start_IT+0x220>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d013      	beq.n	800372e <HAL_DMA_Start_IT+0xee>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a56      	ldr	r2, [pc, #344]	; (8003864 <HAL_DMA_Start_IT+0x224>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d00e      	beq.n	800372e <HAL_DMA_Start_IT+0xee>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a54      	ldr	r2, [pc, #336]	; (8003868 <HAL_DMA_Start_IT+0x228>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d009      	beq.n	800372e <HAL_DMA_Start_IT+0xee>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a53      	ldr	r2, [pc, #332]	; (800386c <HAL_DMA_Start_IT+0x22c>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d004      	beq.n	800372e <HAL_DMA_Start_IT+0xee>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a51      	ldr	r2, [pc, #324]	; (8003870 <HAL_DMA_Start_IT+0x230>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d108      	bne.n	8003740 <HAL_DMA_Start_IT+0x100>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 0201 	bic.w	r2, r2, #1
 800373c:	601a      	str	r2, [r3, #0]
 800373e:	e007      	b.n	8003750 <HAL_DMA_Start_IT+0x110>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 0201 	bic.w	r2, r2, #1
 800374e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	68b9      	ldr	r1, [r7, #8]
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f001 f906 	bl	8004968 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a34      	ldr	r2, [pc, #208]	; (8003834 <HAL_DMA_Start_IT+0x1f4>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d04a      	beq.n	80037fc <HAL_DMA_Start_IT+0x1bc>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a33      	ldr	r2, [pc, #204]	; (8003838 <HAL_DMA_Start_IT+0x1f8>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d045      	beq.n	80037fc <HAL_DMA_Start_IT+0x1bc>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a31      	ldr	r2, [pc, #196]	; (800383c <HAL_DMA_Start_IT+0x1fc>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d040      	beq.n	80037fc <HAL_DMA_Start_IT+0x1bc>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a30      	ldr	r2, [pc, #192]	; (8003840 <HAL_DMA_Start_IT+0x200>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d03b      	beq.n	80037fc <HAL_DMA_Start_IT+0x1bc>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a2e      	ldr	r2, [pc, #184]	; (8003844 <HAL_DMA_Start_IT+0x204>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d036      	beq.n	80037fc <HAL_DMA_Start_IT+0x1bc>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a2d      	ldr	r2, [pc, #180]	; (8003848 <HAL_DMA_Start_IT+0x208>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d031      	beq.n	80037fc <HAL_DMA_Start_IT+0x1bc>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a2b      	ldr	r2, [pc, #172]	; (800384c <HAL_DMA_Start_IT+0x20c>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d02c      	beq.n	80037fc <HAL_DMA_Start_IT+0x1bc>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a2a      	ldr	r2, [pc, #168]	; (8003850 <HAL_DMA_Start_IT+0x210>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d027      	beq.n	80037fc <HAL_DMA_Start_IT+0x1bc>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a28      	ldr	r2, [pc, #160]	; (8003854 <HAL_DMA_Start_IT+0x214>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d022      	beq.n	80037fc <HAL_DMA_Start_IT+0x1bc>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a27      	ldr	r2, [pc, #156]	; (8003858 <HAL_DMA_Start_IT+0x218>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d01d      	beq.n	80037fc <HAL_DMA_Start_IT+0x1bc>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a25      	ldr	r2, [pc, #148]	; (800385c <HAL_DMA_Start_IT+0x21c>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d018      	beq.n	80037fc <HAL_DMA_Start_IT+0x1bc>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a24      	ldr	r2, [pc, #144]	; (8003860 <HAL_DMA_Start_IT+0x220>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d013      	beq.n	80037fc <HAL_DMA_Start_IT+0x1bc>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a22      	ldr	r2, [pc, #136]	; (8003864 <HAL_DMA_Start_IT+0x224>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d00e      	beq.n	80037fc <HAL_DMA_Start_IT+0x1bc>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a21      	ldr	r2, [pc, #132]	; (8003868 <HAL_DMA_Start_IT+0x228>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d009      	beq.n	80037fc <HAL_DMA_Start_IT+0x1bc>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a1f      	ldr	r2, [pc, #124]	; (800386c <HAL_DMA_Start_IT+0x22c>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d004      	beq.n	80037fc <HAL_DMA_Start_IT+0x1bc>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a1e      	ldr	r2, [pc, #120]	; (8003870 <HAL_DMA_Start_IT+0x230>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d101      	bne.n	8003800 <HAL_DMA_Start_IT+0x1c0>
 80037fc:	2301      	movs	r3, #1
 80037fe:	e000      	b.n	8003802 <HAL_DMA_Start_IT+0x1c2>
 8003800:	2300      	movs	r3, #0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d036      	beq.n	8003874 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f023 021e 	bic.w	r2, r3, #30
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f042 0216 	orr.w	r2, r2, #22
 8003818:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381e:	2b00      	cmp	r3, #0
 8003820:	d03e      	beq.n	80038a0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f042 0208 	orr.w	r2, r2, #8
 8003830:	601a      	str	r2, [r3, #0]
 8003832:	e035      	b.n	80038a0 <HAL_DMA_Start_IT+0x260>
 8003834:	40020010 	.word	0x40020010
 8003838:	40020028 	.word	0x40020028
 800383c:	40020040 	.word	0x40020040
 8003840:	40020058 	.word	0x40020058
 8003844:	40020070 	.word	0x40020070
 8003848:	40020088 	.word	0x40020088
 800384c:	400200a0 	.word	0x400200a0
 8003850:	400200b8 	.word	0x400200b8
 8003854:	40020410 	.word	0x40020410
 8003858:	40020428 	.word	0x40020428
 800385c:	40020440 	.word	0x40020440
 8003860:	40020458 	.word	0x40020458
 8003864:	40020470 	.word	0x40020470
 8003868:	40020488 	.word	0x40020488
 800386c:	400204a0 	.word	0x400204a0
 8003870:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f023 020e 	bic.w	r2, r3, #14
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f042 020a 	orr.w	r2, r2, #10
 8003886:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388c:	2b00      	cmp	r3, #0
 800388e:	d007      	beq.n	80038a0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f042 0204 	orr.w	r2, r2, #4
 800389e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a83      	ldr	r2, [pc, #524]	; (8003ab4 <HAL_DMA_Start_IT+0x474>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d072      	beq.n	8003990 <HAL_DMA_Start_IT+0x350>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a82      	ldr	r2, [pc, #520]	; (8003ab8 <HAL_DMA_Start_IT+0x478>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d06d      	beq.n	8003990 <HAL_DMA_Start_IT+0x350>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a80      	ldr	r2, [pc, #512]	; (8003abc <HAL_DMA_Start_IT+0x47c>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d068      	beq.n	8003990 <HAL_DMA_Start_IT+0x350>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a7f      	ldr	r2, [pc, #508]	; (8003ac0 <HAL_DMA_Start_IT+0x480>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d063      	beq.n	8003990 <HAL_DMA_Start_IT+0x350>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a7d      	ldr	r2, [pc, #500]	; (8003ac4 <HAL_DMA_Start_IT+0x484>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d05e      	beq.n	8003990 <HAL_DMA_Start_IT+0x350>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a7c      	ldr	r2, [pc, #496]	; (8003ac8 <HAL_DMA_Start_IT+0x488>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d059      	beq.n	8003990 <HAL_DMA_Start_IT+0x350>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a7a      	ldr	r2, [pc, #488]	; (8003acc <HAL_DMA_Start_IT+0x48c>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d054      	beq.n	8003990 <HAL_DMA_Start_IT+0x350>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a79      	ldr	r2, [pc, #484]	; (8003ad0 <HAL_DMA_Start_IT+0x490>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d04f      	beq.n	8003990 <HAL_DMA_Start_IT+0x350>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a77      	ldr	r2, [pc, #476]	; (8003ad4 <HAL_DMA_Start_IT+0x494>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d04a      	beq.n	8003990 <HAL_DMA_Start_IT+0x350>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a76      	ldr	r2, [pc, #472]	; (8003ad8 <HAL_DMA_Start_IT+0x498>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d045      	beq.n	8003990 <HAL_DMA_Start_IT+0x350>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a74      	ldr	r2, [pc, #464]	; (8003adc <HAL_DMA_Start_IT+0x49c>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d040      	beq.n	8003990 <HAL_DMA_Start_IT+0x350>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a73      	ldr	r2, [pc, #460]	; (8003ae0 <HAL_DMA_Start_IT+0x4a0>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d03b      	beq.n	8003990 <HAL_DMA_Start_IT+0x350>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a71      	ldr	r2, [pc, #452]	; (8003ae4 <HAL_DMA_Start_IT+0x4a4>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d036      	beq.n	8003990 <HAL_DMA_Start_IT+0x350>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a70      	ldr	r2, [pc, #448]	; (8003ae8 <HAL_DMA_Start_IT+0x4a8>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d031      	beq.n	8003990 <HAL_DMA_Start_IT+0x350>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a6e      	ldr	r2, [pc, #440]	; (8003aec <HAL_DMA_Start_IT+0x4ac>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d02c      	beq.n	8003990 <HAL_DMA_Start_IT+0x350>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a6d      	ldr	r2, [pc, #436]	; (8003af0 <HAL_DMA_Start_IT+0x4b0>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d027      	beq.n	8003990 <HAL_DMA_Start_IT+0x350>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a6b      	ldr	r2, [pc, #428]	; (8003af4 <HAL_DMA_Start_IT+0x4b4>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d022      	beq.n	8003990 <HAL_DMA_Start_IT+0x350>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a6a      	ldr	r2, [pc, #424]	; (8003af8 <HAL_DMA_Start_IT+0x4b8>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d01d      	beq.n	8003990 <HAL_DMA_Start_IT+0x350>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a68      	ldr	r2, [pc, #416]	; (8003afc <HAL_DMA_Start_IT+0x4bc>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d018      	beq.n	8003990 <HAL_DMA_Start_IT+0x350>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a67      	ldr	r2, [pc, #412]	; (8003b00 <HAL_DMA_Start_IT+0x4c0>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d013      	beq.n	8003990 <HAL_DMA_Start_IT+0x350>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a65      	ldr	r2, [pc, #404]	; (8003b04 <HAL_DMA_Start_IT+0x4c4>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d00e      	beq.n	8003990 <HAL_DMA_Start_IT+0x350>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a64      	ldr	r2, [pc, #400]	; (8003b08 <HAL_DMA_Start_IT+0x4c8>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d009      	beq.n	8003990 <HAL_DMA_Start_IT+0x350>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a62      	ldr	r2, [pc, #392]	; (8003b0c <HAL_DMA_Start_IT+0x4cc>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d004      	beq.n	8003990 <HAL_DMA_Start_IT+0x350>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a61      	ldr	r2, [pc, #388]	; (8003b10 <HAL_DMA_Start_IT+0x4d0>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d101      	bne.n	8003994 <HAL_DMA_Start_IT+0x354>
 8003990:	2301      	movs	r3, #1
 8003992:	e000      	b.n	8003996 <HAL_DMA_Start_IT+0x356>
 8003994:	2300      	movs	r3, #0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d01a      	beq.n	80039d0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d007      	beq.n	80039b8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039b6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d007      	beq.n	80039d0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039ce:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a37      	ldr	r2, [pc, #220]	; (8003ab4 <HAL_DMA_Start_IT+0x474>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d04a      	beq.n	8003a70 <HAL_DMA_Start_IT+0x430>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a36      	ldr	r2, [pc, #216]	; (8003ab8 <HAL_DMA_Start_IT+0x478>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d045      	beq.n	8003a70 <HAL_DMA_Start_IT+0x430>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a34      	ldr	r2, [pc, #208]	; (8003abc <HAL_DMA_Start_IT+0x47c>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d040      	beq.n	8003a70 <HAL_DMA_Start_IT+0x430>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a33      	ldr	r2, [pc, #204]	; (8003ac0 <HAL_DMA_Start_IT+0x480>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d03b      	beq.n	8003a70 <HAL_DMA_Start_IT+0x430>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a31      	ldr	r2, [pc, #196]	; (8003ac4 <HAL_DMA_Start_IT+0x484>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d036      	beq.n	8003a70 <HAL_DMA_Start_IT+0x430>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a30      	ldr	r2, [pc, #192]	; (8003ac8 <HAL_DMA_Start_IT+0x488>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d031      	beq.n	8003a70 <HAL_DMA_Start_IT+0x430>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a2e      	ldr	r2, [pc, #184]	; (8003acc <HAL_DMA_Start_IT+0x48c>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d02c      	beq.n	8003a70 <HAL_DMA_Start_IT+0x430>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a2d      	ldr	r2, [pc, #180]	; (8003ad0 <HAL_DMA_Start_IT+0x490>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d027      	beq.n	8003a70 <HAL_DMA_Start_IT+0x430>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a2b      	ldr	r2, [pc, #172]	; (8003ad4 <HAL_DMA_Start_IT+0x494>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d022      	beq.n	8003a70 <HAL_DMA_Start_IT+0x430>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a2a      	ldr	r2, [pc, #168]	; (8003ad8 <HAL_DMA_Start_IT+0x498>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d01d      	beq.n	8003a70 <HAL_DMA_Start_IT+0x430>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a28      	ldr	r2, [pc, #160]	; (8003adc <HAL_DMA_Start_IT+0x49c>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d018      	beq.n	8003a70 <HAL_DMA_Start_IT+0x430>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a27      	ldr	r2, [pc, #156]	; (8003ae0 <HAL_DMA_Start_IT+0x4a0>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d013      	beq.n	8003a70 <HAL_DMA_Start_IT+0x430>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a25      	ldr	r2, [pc, #148]	; (8003ae4 <HAL_DMA_Start_IT+0x4a4>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d00e      	beq.n	8003a70 <HAL_DMA_Start_IT+0x430>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a24      	ldr	r2, [pc, #144]	; (8003ae8 <HAL_DMA_Start_IT+0x4a8>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d009      	beq.n	8003a70 <HAL_DMA_Start_IT+0x430>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a22      	ldr	r2, [pc, #136]	; (8003aec <HAL_DMA_Start_IT+0x4ac>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d004      	beq.n	8003a70 <HAL_DMA_Start_IT+0x430>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a21      	ldr	r2, [pc, #132]	; (8003af0 <HAL_DMA_Start_IT+0x4b0>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d108      	bne.n	8003a82 <HAL_DMA_Start_IT+0x442>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 0201 	orr.w	r2, r2, #1
 8003a7e:	601a      	str	r2, [r3, #0]
 8003a80:	e012      	b.n	8003aa8 <HAL_DMA_Start_IT+0x468>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f042 0201 	orr.w	r2, r2, #1
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	e009      	b.n	8003aa8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a9a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003aa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3718      	adds	r7, #24
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	40020010 	.word	0x40020010
 8003ab8:	40020028 	.word	0x40020028
 8003abc:	40020040 	.word	0x40020040
 8003ac0:	40020058 	.word	0x40020058
 8003ac4:	40020070 	.word	0x40020070
 8003ac8:	40020088 	.word	0x40020088
 8003acc:	400200a0 	.word	0x400200a0
 8003ad0:	400200b8 	.word	0x400200b8
 8003ad4:	40020410 	.word	0x40020410
 8003ad8:	40020428 	.word	0x40020428
 8003adc:	40020440 	.word	0x40020440
 8003ae0:	40020458 	.word	0x40020458
 8003ae4:	40020470 	.word	0x40020470
 8003ae8:	40020488 	.word	0x40020488
 8003aec:	400204a0 	.word	0x400204a0
 8003af0:	400204b8 	.word	0x400204b8
 8003af4:	58025408 	.word	0x58025408
 8003af8:	5802541c 	.word	0x5802541c
 8003afc:	58025430 	.word	0x58025430
 8003b00:	58025444 	.word	0x58025444
 8003b04:	58025458 	.word	0x58025458
 8003b08:	5802546c 	.word	0x5802546c
 8003b0c:	58025480 	.word	0x58025480
 8003b10:	58025494 	.word	0x58025494

08003b14 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b08a      	sub	sp, #40	; 0x28
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b20:	4b67      	ldr	r3, [pc, #412]	; (8003cc0 <HAL_DMA_IRQHandler+0x1ac>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a67      	ldr	r2, [pc, #412]	; (8003cc4 <HAL_DMA_IRQHandler+0x1b0>)
 8003b26:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2a:	0a9b      	lsrs	r3, r3, #10
 8003b2c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b32:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b38:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003b3a:	6a3b      	ldr	r3, [r7, #32]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a5f      	ldr	r2, [pc, #380]	; (8003cc8 <HAL_DMA_IRQHandler+0x1b4>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d04a      	beq.n	8003be6 <HAL_DMA_IRQHandler+0xd2>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a5d      	ldr	r2, [pc, #372]	; (8003ccc <HAL_DMA_IRQHandler+0x1b8>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d045      	beq.n	8003be6 <HAL_DMA_IRQHandler+0xd2>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a5c      	ldr	r2, [pc, #368]	; (8003cd0 <HAL_DMA_IRQHandler+0x1bc>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d040      	beq.n	8003be6 <HAL_DMA_IRQHandler+0xd2>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a5a      	ldr	r2, [pc, #360]	; (8003cd4 <HAL_DMA_IRQHandler+0x1c0>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d03b      	beq.n	8003be6 <HAL_DMA_IRQHandler+0xd2>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a59      	ldr	r2, [pc, #356]	; (8003cd8 <HAL_DMA_IRQHandler+0x1c4>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d036      	beq.n	8003be6 <HAL_DMA_IRQHandler+0xd2>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a57      	ldr	r2, [pc, #348]	; (8003cdc <HAL_DMA_IRQHandler+0x1c8>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d031      	beq.n	8003be6 <HAL_DMA_IRQHandler+0xd2>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a56      	ldr	r2, [pc, #344]	; (8003ce0 <HAL_DMA_IRQHandler+0x1cc>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d02c      	beq.n	8003be6 <HAL_DMA_IRQHandler+0xd2>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a54      	ldr	r2, [pc, #336]	; (8003ce4 <HAL_DMA_IRQHandler+0x1d0>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d027      	beq.n	8003be6 <HAL_DMA_IRQHandler+0xd2>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a53      	ldr	r2, [pc, #332]	; (8003ce8 <HAL_DMA_IRQHandler+0x1d4>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d022      	beq.n	8003be6 <HAL_DMA_IRQHandler+0xd2>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a51      	ldr	r2, [pc, #324]	; (8003cec <HAL_DMA_IRQHandler+0x1d8>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d01d      	beq.n	8003be6 <HAL_DMA_IRQHandler+0xd2>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a50      	ldr	r2, [pc, #320]	; (8003cf0 <HAL_DMA_IRQHandler+0x1dc>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d018      	beq.n	8003be6 <HAL_DMA_IRQHandler+0xd2>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a4e      	ldr	r2, [pc, #312]	; (8003cf4 <HAL_DMA_IRQHandler+0x1e0>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d013      	beq.n	8003be6 <HAL_DMA_IRQHandler+0xd2>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a4d      	ldr	r2, [pc, #308]	; (8003cf8 <HAL_DMA_IRQHandler+0x1e4>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d00e      	beq.n	8003be6 <HAL_DMA_IRQHandler+0xd2>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a4b      	ldr	r2, [pc, #300]	; (8003cfc <HAL_DMA_IRQHandler+0x1e8>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d009      	beq.n	8003be6 <HAL_DMA_IRQHandler+0xd2>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a4a      	ldr	r2, [pc, #296]	; (8003d00 <HAL_DMA_IRQHandler+0x1ec>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d004      	beq.n	8003be6 <HAL_DMA_IRQHandler+0xd2>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a48      	ldr	r2, [pc, #288]	; (8003d04 <HAL_DMA_IRQHandler+0x1f0>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d101      	bne.n	8003bea <HAL_DMA_IRQHandler+0xd6>
 8003be6:	2301      	movs	r3, #1
 8003be8:	e000      	b.n	8003bec <HAL_DMA_IRQHandler+0xd8>
 8003bea:	2300      	movs	r3, #0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f000 842b 	beq.w	8004448 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf6:	f003 031f 	and.w	r3, r3, #31
 8003bfa:	2208      	movs	r2, #8
 8003bfc:	409a      	lsls	r2, r3
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	4013      	ands	r3, r2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f000 80a2 	beq.w	8003d4c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a2e      	ldr	r2, [pc, #184]	; (8003cc8 <HAL_DMA_IRQHandler+0x1b4>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d04a      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0x194>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a2d      	ldr	r2, [pc, #180]	; (8003ccc <HAL_DMA_IRQHandler+0x1b8>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d045      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0x194>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a2b      	ldr	r2, [pc, #172]	; (8003cd0 <HAL_DMA_IRQHandler+0x1bc>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d040      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0x194>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a2a      	ldr	r2, [pc, #168]	; (8003cd4 <HAL_DMA_IRQHandler+0x1c0>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d03b      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0x194>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a28      	ldr	r2, [pc, #160]	; (8003cd8 <HAL_DMA_IRQHandler+0x1c4>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d036      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0x194>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a27      	ldr	r2, [pc, #156]	; (8003cdc <HAL_DMA_IRQHandler+0x1c8>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d031      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0x194>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a25      	ldr	r2, [pc, #148]	; (8003ce0 <HAL_DMA_IRQHandler+0x1cc>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d02c      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0x194>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a24      	ldr	r2, [pc, #144]	; (8003ce4 <HAL_DMA_IRQHandler+0x1d0>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d027      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0x194>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a22      	ldr	r2, [pc, #136]	; (8003ce8 <HAL_DMA_IRQHandler+0x1d4>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d022      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0x194>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a21      	ldr	r2, [pc, #132]	; (8003cec <HAL_DMA_IRQHandler+0x1d8>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d01d      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0x194>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a1f      	ldr	r2, [pc, #124]	; (8003cf0 <HAL_DMA_IRQHandler+0x1dc>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d018      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0x194>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a1e      	ldr	r2, [pc, #120]	; (8003cf4 <HAL_DMA_IRQHandler+0x1e0>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d013      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0x194>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a1c      	ldr	r2, [pc, #112]	; (8003cf8 <HAL_DMA_IRQHandler+0x1e4>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d00e      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0x194>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a1b      	ldr	r2, [pc, #108]	; (8003cfc <HAL_DMA_IRQHandler+0x1e8>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d009      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0x194>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a19      	ldr	r2, [pc, #100]	; (8003d00 <HAL_DMA_IRQHandler+0x1ec>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d004      	beq.n	8003ca8 <HAL_DMA_IRQHandler+0x194>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a18      	ldr	r2, [pc, #96]	; (8003d04 <HAL_DMA_IRQHandler+0x1f0>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d12f      	bne.n	8003d08 <HAL_DMA_IRQHandler+0x1f4>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0304 	and.w	r3, r3, #4
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	bf14      	ite	ne
 8003cb6:	2301      	movne	r3, #1
 8003cb8:	2300      	moveq	r3, #0
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	e02e      	b.n	8003d1c <HAL_DMA_IRQHandler+0x208>
 8003cbe:	bf00      	nop
 8003cc0:	24000000 	.word	0x24000000
 8003cc4:	1b4e81b5 	.word	0x1b4e81b5
 8003cc8:	40020010 	.word	0x40020010
 8003ccc:	40020028 	.word	0x40020028
 8003cd0:	40020040 	.word	0x40020040
 8003cd4:	40020058 	.word	0x40020058
 8003cd8:	40020070 	.word	0x40020070
 8003cdc:	40020088 	.word	0x40020088
 8003ce0:	400200a0 	.word	0x400200a0
 8003ce4:	400200b8 	.word	0x400200b8
 8003ce8:	40020410 	.word	0x40020410
 8003cec:	40020428 	.word	0x40020428
 8003cf0:	40020440 	.word	0x40020440
 8003cf4:	40020458 	.word	0x40020458
 8003cf8:	40020470 	.word	0x40020470
 8003cfc:	40020488 	.word	0x40020488
 8003d00:	400204a0 	.word	0x400204a0
 8003d04:	400204b8 	.word	0x400204b8
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0308 	and.w	r3, r3, #8
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	bf14      	ite	ne
 8003d16:	2301      	movne	r3, #1
 8003d18:	2300      	moveq	r3, #0
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d015      	beq.n	8003d4c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 0204 	bic.w	r2, r2, #4
 8003d2e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d34:	f003 031f 	and.w	r3, r3, #31
 8003d38:	2208      	movs	r2, #8
 8003d3a:	409a      	lsls	r2, r3
 8003d3c:	6a3b      	ldr	r3, [r7, #32]
 8003d3e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d44:	f043 0201 	orr.w	r2, r3, #1
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d50:	f003 031f 	and.w	r3, r3, #31
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	fa22 f303 	lsr.w	r3, r2, r3
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d06e      	beq.n	8003e40 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a69      	ldr	r2, [pc, #420]	; (8003f0c <HAL_DMA_IRQHandler+0x3f8>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d04a      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x2ee>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a67      	ldr	r2, [pc, #412]	; (8003f10 <HAL_DMA_IRQHandler+0x3fc>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d045      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x2ee>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a66      	ldr	r2, [pc, #408]	; (8003f14 <HAL_DMA_IRQHandler+0x400>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d040      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x2ee>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a64      	ldr	r2, [pc, #400]	; (8003f18 <HAL_DMA_IRQHandler+0x404>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d03b      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x2ee>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a63      	ldr	r2, [pc, #396]	; (8003f1c <HAL_DMA_IRQHandler+0x408>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d036      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x2ee>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a61      	ldr	r2, [pc, #388]	; (8003f20 <HAL_DMA_IRQHandler+0x40c>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d031      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x2ee>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a60      	ldr	r2, [pc, #384]	; (8003f24 <HAL_DMA_IRQHandler+0x410>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d02c      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x2ee>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a5e      	ldr	r2, [pc, #376]	; (8003f28 <HAL_DMA_IRQHandler+0x414>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d027      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x2ee>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a5d      	ldr	r2, [pc, #372]	; (8003f2c <HAL_DMA_IRQHandler+0x418>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d022      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x2ee>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a5b      	ldr	r2, [pc, #364]	; (8003f30 <HAL_DMA_IRQHandler+0x41c>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d01d      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x2ee>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a5a      	ldr	r2, [pc, #360]	; (8003f34 <HAL_DMA_IRQHandler+0x420>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d018      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x2ee>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a58      	ldr	r2, [pc, #352]	; (8003f38 <HAL_DMA_IRQHandler+0x424>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d013      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x2ee>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a57      	ldr	r2, [pc, #348]	; (8003f3c <HAL_DMA_IRQHandler+0x428>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d00e      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x2ee>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a55      	ldr	r2, [pc, #340]	; (8003f40 <HAL_DMA_IRQHandler+0x42c>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d009      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x2ee>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a54      	ldr	r2, [pc, #336]	; (8003f44 <HAL_DMA_IRQHandler+0x430>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d004      	beq.n	8003e02 <HAL_DMA_IRQHandler+0x2ee>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a52      	ldr	r2, [pc, #328]	; (8003f48 <HAL_DMA_IRQHandler+0x434>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d10a      	bne.n	8003e18 <HAL_DMA_IRQHandler+0x304>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	bf14      	ite	ne
 8003e10:	2301      	movne	r3, #1
 8003e12:	2300      	moveq	r3, #0
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	e003      	b.n	8003e20 <HAL_DMA_IRQHandler+0x30c>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2300      	movs	r3, #0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00d      	beq.n	8003e40 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e28:	f003 031f 	and.w	r3, r3, #31
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	409a      	lsls	r2, r3
 8003e30:	6a3b      	ldr	r3, [r7, #32]
 8003e32:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e38:	f043 0202 	orr.w	r2, r3, #2
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e44:	f003 031f 	and.w	r3, r3, #31
 8003e48:	2204      	movs	r2, #4
 8003e4a:	409a      	lsls	r2, r3
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	4013      	ands	r3, r2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f000 808f 	beq.w	8003f74 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a2c      	ldr	r2, [pc, #176]	; (8003f0c <HAL_DMA_IRQHandler+0x3f8>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d04a      	beq.n	8003ef6 <HAL_DMA_IRQHandler+0x3e2>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a2a      	ldr	r2, [pc, #168]	; (8003f10 <HAL_DMA_IRQHandler+0x3fc>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d045      	beq.n	8003ef6 <HAL_DMA_IRQHandler+0x3e2>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a29      	ldr	r2, [pc, #164]	; (8003f14 <HAL_DMA_IRQHandler+0x400>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d040      	beq.n	8003ef6 <HAL_DMA_IRQHandler+0x3e2>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a27      	ldr	r2, [pc, #156]	; (8003f18 <HAL_DMA_IRQHandler+0x404>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d03b      	beq.n	8003ef6 <HAL_DMA_IRQHandler+0x3e2>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a26      	ldr	r2, [pc, #152]	; (8003f1c <HAL_DMA_IRQHandler+0x408>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d036      	beq.n	8003ef6 <HAL_DMA_IRQHandler+0x3e2>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a24      	ldr	r2, [pc, #144]	; (8003f20 <HAL_DMA_IRQHandler+0x40c>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d031      	beq.n	8003ef6 <HAL_DMA_IRQHandler+0x3e2>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a23      	ldr	r2, [pc, #140]	; (8003f24 <HAL_DMA_IRQHandler+0x410>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d02c      	beq.n	8003ef6 <HAL_DMA_IRQHandler+0x3e2>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a21      	ldr	r2, [pc, #132]	; (8003f28 <HAL_DMA_IRQHandler+0x414>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d027      	beq.n	8003ef6 <HAL_DMA_IRQHandler+0x3e2>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a20      	ldr	r2, [pc, #128]	; (8003f2c <HAL_DMA_IRQHandler+0x418>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d022      	beq.n	8003ef6 <HAL_DMA_IRQHandler+0x3e2>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a1e      	ldr	r2, [pc, #120]	; (8003f30 <HAL_DMA_IRQHandler+0x41c>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d01d      	beq.n	8003ef6 <HAL_DMA_IRQHandler+0x3e2>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a1d      	ldr	r2, [pc, #116]	; (8003f34 <HAL_DMA_IRQHandler+0x420>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d018      	beq.n	8003ef6 <HAL_DMA_IRQHandler+0x3e2>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a1b      	ldr	r2, [pc, #108]	; (8003f38 <HAL_DMA_IRQHandler+0x424>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d013      	beq.n	8003ef6 <HAL_DMA_IRQHandler+0x3e2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a1a      	ldr	r2, [pc, #104]	; (8003f3c <HAL_DMA_IRQHandler+0x428>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d00e      	beq.n	8003ef6 <HAL_DMA_IRQHandler+0x3e2>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a18      	ldr	r2, [pc, #96]	; (8003f40 <HAL_DMA_IRQHandler+0x42c>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d009      	beq.n	8003ef6 <HAL_DMA_IRQHandler+0x3e2>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a17      	ldr	r2, [pc, #92]	; (8003f44 <HAL_DMA_IRQHandler+0x430>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d004      	beq.n	8003ef6 <HAL_DMA_IRQHandler+0x3e2>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a15      	ldr	r2, [pc, #84]	; (8003f48 <HAL_DMA_IRQHandler+0x434>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d12a      	bne.n	8003f4c <HAL_DMA_IRQHandler+0x438>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	bf14      	ite	ne
 8003f04:	2301      	movne	r3, #1
 8003f06:	2300      	moveq	r3, #0
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	e023      	b.n	8003f54 <HAL_DMA_IRQHandler+0x440>
 8003f0c:	40020010 	.word	0x40020010
 8003f10:	40020028 	.word	0x40020028
 8003f14:	40020040 	.word	0x40020040
 8003f18:	40020058 	.word	0x40020058
 8003f1c:	40020070 	.word	0x40020070
 8003f20:	40020088 	.word	0x40020088
 8003f24:	400200a0 	.word	0x400200a0
 8003f28:	400200b8 	.word	0x400200b8
 8003f2c:	40020410 	.word	0x40020410
 8003f30:	40020428 	.word	0x40020428
 8003f34:	40020440 	.word	0x40020440
 8003f38:	40020458 	.word	0x40020458
 8003f3c:	40020470 	.word	0x40020470
 8003f40:	40020488 	.word	0x40020488
 8003f44:	400204a0 	.word	0x400204a0
 8003f48:	400204b8 	.word	0x400204b8
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2300      	movs	r3, #0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00d      	beq.n	8003f74 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f5c:	f003 031f 	and.w	r3, r3, #31
 8003f60:	2204      	movs	r2, #4
 8003f62:	409a      	lsls	r2, r3
 8003f64:	6a3b      	ldr	r3, [r7, #32]
 8003f66:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f6c:	f043 0204 	orr.w	r2, r3, #4
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f78:	f003 031f 	and.w	r3, r3, #31
 8003f7c:	2210      	movs	r2, #16
 8003f7e:	409a      	lsls	r2, r3
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	4013      	ands	r3, r2
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f000 80a6 	beq.w	80040d6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a85      	ldr	r2, [pc, #532]	; (80041a4 <HAL_DMA_IRQHandler+0x690>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d04a      	beq.n	800402a <HAL_DMA_IRQHandler+0x516>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a83      	ldr	r2, [pc, #524]	; (80041a8 <HAL_DMA_IRQHandler+0x694>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d045      	beq.n	800402a <HAL_DMA_IRQHandler+0x516>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a82      	ldr	r2, [pc, #520]	; (80041ac <HAL_DMA_IRQHandler+0x698>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d040      	beq.n	800402a <HAL_DMA_IRQHandler+0x516>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a80      	ldr	r2, [pc, #512]	; (80041b0 <HAL_DMA_IRQHandler+0x69c>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d03b      	beq.n	800402a <HAL_DMA_IRQHandler+0x516>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a7f      	ldr	r2, [pc, #508]	; (80041b4 <HAL_DMA_IRQHandler+0x6a0>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d036      	beq.n	800402a <HAL_DMA_IRQHandler+0x516>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a7d      	ldr	r2, [pc, #500]	; (80041b8 <HAL_DMA_IRQHandler+0x6a4>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d031      	beq.n	800402a <HAL_DMA_IRQHandler+0x516>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a7c      	ldr	r2, [pc, #496]	; (80041bc <HAL_DMA_IRQHandler+0x6a8>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d02c      	beq.n	800402a <HAL_DMA_IRQHandler+0x516>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a7a      	ldr	r2, [pc, #488]	; (80041c0 <HAL_DMA_IRQHandler+0x6ac>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d027      	beq.n	800402a <HAL_DMA_IRQHandler+0x516>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a79      	ldr	r2, [pc, #484]	; (80041c4 <HAL_DMA_IRQHandler+0x6b0>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d022      	beq.n	800402a <HAL_DMA_IRQHandler+0x516>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a77      	ldr	r2, [pc, #476]	; (80041c8 <HAL_DMA_IRQHandler+0x6b4>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d01d      	beq.n	800402a <HAL_DMA_IRQHandler+0x516>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a76      	ldr	r2, [pc, #472]	; (80041cc <HAL_DMA_IRQHandler+0x6b8>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d018      	beq.n	800402a <HAL_DMA_IRQHandler+0x516>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a74      	ldr	r2, [pc, #464]	; (80041d0 <HAL_DMA_IRQHandler+0x6bc>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d013      	beq.n	800402a <HAL_DMA_IRQHandler+0x516>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a73      	ldr	r2, [pc, #460]	; (80041d4 <HAL_DMA_IRQHandler+0x6c0>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d00e      	beq.n	800402a <HAL_DMA_IRQHandler+0x516>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a71      	ldr	r2, [pc, #452]	; (80041d8 <HAL_DMA_IRQHandler+0x6c4>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d009      	beq.n	800402a <HAL_DMA_IRQHandler+0x516>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a70      	ldr	r2, [pc, #448]	; (80041dc <HAL_DMA_IRQHandler+0x6c8>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d004      	beq.n	800402a <HAL_DMA_IRQHandler+0x516>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a6e      	ldr	r2, [pc, #440]	; (80041e0 <HAL_DMA_IRQHandler+0x6cc>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d10a      	bne.n	8004040 <HAL_DMA_IRQHandler+0x52c>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0308 	and.w	r3, r3, #8
 8004034:	2b00      	cmp	r3, #0
 8004036:	bf14      	ite	ne
 8004038:	2301      	movne	r3, #1
 800403a:	2300      	moveq	r3, #0
 800403c:	b2db      	uxtb	r3, r3
 800403e:	e009      	b.n	8004054 <HAL_DMA_IRQHandler+0x540>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0304 	and.w	r3, r3, #4
 800404a:	2b00      	cmp	r3, #0
 800404c:	bf14      	ite	ne
 800404e:	2301      	movne	r3, #1
 8004050:	2300      	moveq	r3, #0
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b00      	cmp	r3, #0
 8004056:	d03e      	beq.n	80040d6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800405c:	f003 031f 	and.w	r3, r3, #31
 8004060:	2210      	movs	r2, #16
 8004062:	409a      	lsls	r2, r3
 8004064:	6a3b      	ldr	r3, [r7, #32]
 8004066:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d018      	beq.n	80040a8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d108      	bne.n	8004096 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004088:	2b00      	cmp	r3, #0
 800408a:	d024      	beq.n	80040d6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	4798      	blx	r3
 8004094:	e01f      	b.n	80040d6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800409a:	2b00      	cmp	r3, #0
 800409c:	d01b      	beq.n	80040d6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	4798      	blx	r3
 80040a6:	e016      	b.n	80040d6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d107      	bne.n	80040c6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 0208 	bic.w	r2, r2, #8
 80040c4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040da:	f003 031f 	and.w	r3, r3, #31
 80040de:	2220      	movs	r2, #32
 80040e0:	409a      	lsls	r2, r3
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	4013      	ands	r3, r2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	f000 8110 	beq.w	800430c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a2c      	ldr	r2, [pc, #176]	; (80041a4 <HAL_DMA_IRQHandler+0x690>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d04a      	beq.n	800418c <HAL_DMA_IRQHandler+0x678>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a2b      	ldr	r2, [pc, #172]	; (80041a8 <HAL_DMA_IRQHandler+0x694>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d045      	beq.n	800418c <HAL_DMA_IRQHandler+0x678>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a29      	ldr	r2, [pc, #164]	; (80041ac <HAL_DMA_IRQHandler+0x698>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d040      	beq.n	800418c <HAL_DMA_IRQHandler+0x678>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a28      	ldr	r2, [pc, #160]	; (80041b0 <HAL_DMA_IRQHandler+0x69c>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d03b      	beq.n	800418c <HAL_DMA_IRQHandler+0x678>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a26      	ldr	r2, [pc, #152]	; (80041b4 <HAL_DMA_IRQHandler+0x6a0>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d036      	beq.n	800418c <HAL_DMA_IRQHandler+0x678>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a25      	ldr	r2, [pc, #148]	; (80041b8 <HAL_DMA_IRQHandler+0x6a4>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d031      	beq.n	800418c <HAL_DMA_IRQHandler+0x678>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a23      	ldr	r2, [pc, #140]	; (80041bc <HAL_DMA_IRQHandler+0x6a8>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d02c      	beq.n	800418c <HAL_DMA_IRQHandler+0x678>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a22      	ldr	r2, [pc, #136]	; (80041c0 <HAL_DMA_IRQHandler+0x6ac>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d027      	beq.n	800418c <HAL_DMA_IRQHandler+0x678>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a20      	ldr	r2, [pc, #128]	; (80041c4 <HAL_DMA_IRQHandler+0x6b0>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d022      	beq.n	800418c <HAL_DMA_IRQHandler+0x678>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a1f      	ldr	r2, [pc, #124]	; (80041c8 <HAL_DMA_IRQHandler+0x6b4>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d01d      	beq.n	800418c <HAL_DMA_IRQHandler+0x678>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a1d      	ldr	r2, [pc, #116]	; (80041cc <HAL_DMA_IRQHandler+0x6b8>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d018      	beq.n	800418c <HAL_DMA_IRQHandler+0x678>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a1c      	ldr	r2, [pc, #112]	; (80041d0 <HAL_DMA_IRQHandler+0x6bc>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d013      	beq.n	800418c <HAL_DMA_IRQHandler+0x678>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a1a      	ldr	r2, [pc, #104]	; (80041d4 <HAL_DMA_IRQHandler+0x6c0>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d00e      	beq.n	800418c <HAL_DMA_IRQHandler+0x678>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a19      	ldr	r2, [pc, #100]	; (80041d8 <HAL_DMA_IRQHandler+0x6c4>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d009      	beq.n	800418c <HAL_DMA_IRQHandler+0x678>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a17      	ldr	r2, [pc, #92]	; (80041dc <HAL_DMA_IRQHandler+0x6c8>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d004      	beq.n	800418c <HAL_DMA_IRQHandler+0x678>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a16      	ldr	r2, [pc, #88]	; (80041e0 <HAL_DMA_IRQHandler+0x6cc>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d12b      	bne.n	80041e4 <HAL_DMA_IRQHandler+0x6d0>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0310 	and.w	r3, r3, #16
 8004196:	2b00      	cmp	r3, #0
 8004198:	bf14      	ite	ne
 800419a:	2301      	movne	r3, #1
 800419c:	2300      	moveq	r3, #0
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	e02a      	b.n	80041f8 <HAL_DMA_IRQHandler+0x6e4>
 80041a2:	bf00      	nop
 80041a4:	40020010 	.word	0x40020010
 80041a8:	40020028 	.word	0x40020028
 80041ac:	40020040 	.word	0x40020040
 80041b0:	40020058 	.word	0x40020058
 80041b4:	40020070 	.word	0x40020070
 80041b8:	40020088 	.word	0x40020088
 80041bc:	400200a0 	.word	0x400200a0
 80041c0:	400200b8 	.word	0x400200b8
 80041c4:	40020410 	.word	0x40020410
 80041c8:	40020428 	.word	0x40020428
 80041cc:	40020440 	.word	0x40020440
 80041d0:	40020458 	.word	0x40020458
 80041d4:	40020470 	.word	0x40020470
 80041d8:	40020488 	.word	0x40020488
 80041dc:	400204a0 	.word	0x400204a0
 80041e0:	400204b8 	.word	0x400204b8
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	bf14      	ite	ne
 80041f2:	2301      	movne	r3, #1
 80041f4:	2300      	moveq	r3, #0
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f000 8087 	beq.w	800430c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004202:	f003 031f 	and.w	r3, r3, #31
 8004206:	2220      	movs	r2, #32
 8004208:	409a      	lsls	r2, r3
 800420a:	6a3b      	ldr	r3, [r7, #32]
 800420c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b04      	cmp	r3, #4
 8004218:	d139      	bne.n	800428e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f022 0216 	bic.w	r2, r2, #22
 8004228:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	695a      	ldr	r2, [r3, #20]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004238:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423e:	2b00      	cmp	r3, #0
 8004240:	d103      	bne.n	800424a <HAL_DMA_IRQHandler+0x736>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004246:	2b00      	cmp	r3, #0
 8004248:	d007      	beq.n	800425a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f022 0208 	bic.w	r2, r2, #8
 8004258:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800425e:	f003 031f 	and.w	r3, r3, #31
 8004262:	223f      	movs	r2, #63	; 0x3f
 8004264:	409a      	lsls	r2, r3
 8004266:	6a3b      	ldr	r3, [r7, #32]
 8004268:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800427e:	2b00      	cmp	r3, #0
 8004280:	f000 834a 	beq.w	8004918 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	4798      	blx	r3
          }
          return;
 800428c:	e344      	b.n	8004918 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d018      	beq.n	80042ce <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d108      	bne.n	80042bc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d02c      	beq.n	800430c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	4798      	blx	r3
 80042ba:	e027      	b.n	800430c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d023      	beq.n	800430c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	4798      	blx	r3
 80042cc:	e01e      	b.n	800430c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d10f      	bne.n	80042fc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f022 0210 	bic.w	r2, r2, #16
 80042ea:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004300:	2b00      	cmp	r3, #0
 8004302:	d003      	beq.n	800430c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 8306 	beq.w	8004922 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b00      	cmp	r3, #0
 8004320:	f000 8088 	beq.w	8004434 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2204      	movs	r2, #4
 8004328:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a7a      	ldr	r2, [pc, #488]	; (800451c <HAL_DMA_IRQHandler+0xa08>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d04a      	beq.n	80043cc <HAL_DMA_IRQHandler+0x8b8>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a79      	ldr	r2, [pc, #484]	; (8004520 <HAL_DMA_IRQHandler+0xa0c>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d045      	beq.n	80043cc <HAL_DMA_IRQHandler+0x8b8>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a77      	ldr	r2, [pc, #476]	; (8004524 <HAL_DMA_IRQHandler+0xa10>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d040      	beq.n	80043cc <HAL_DMA_IRQHandler+0x8b8>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a76      	ldr	r2, [pc, #472]	; (8004528 <HAL_DMA_IRQHandler+0xa14>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d03b      	beq.n	80043cc <HAL_DMA_IRQHandler+0x8b8>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a74      	ldr	r2, [pc, #464]	; (800452c <HAL_DMA_IRQHandler+0xa18>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d036      	beq.n	80043cc <HAL_DMA_IRQHandler+0x8b8>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a73      	ldr	r2, [pc, #460]	; (8004530 <HAL_DMA_IRQHandler+0xa1c>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d031      	beq.n	80043cc <HAL_DMA_IRQHandler+0x8b8>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a71      	ldr	r2, [pc, #452]	; (8004534 <HAL_DMA_IRQHandler+0xa20>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d02c      	beq.n	80043cc <HAL_DMA_IRQHandler+0x8b8>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a70      	ldr	r2, [pc, #448]	; (8004538 <HAL_DMA_IRQHandler+0xa24>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d027      	beq.n	80043cc <HAL_DMA_IRQHandler+0x8b8>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a6e      	ldr	r2, [pc, #440]	; (800453c <HAL_DMA_IRQHandler+0xa28>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d022      	beq.n	80043cc <HAL_DMA_IRQHandler+0x8b8>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a6d      	ldr	r2, [pc, #436]	; (8004540 <HAL_DMA_IRQHandler+0xa2c>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d01d      	beq.n	80043cc <HAL_DMA_IRQHandler+0x8b8>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a6b      	ldr	r2, [pc, #428]	; (8004544 <HAL_DMA_IRQHandler+0xa30>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d018      	beq.n	80043cc <HAL_DMA_IRQHandler+0x8b8>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a6a      	ldr	r2, [pc, #424]	; (8004548 <HAL_DMA_IRQHandler+0xa34>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d013      	beq.n	80043cc <HAL_DMA_IRQHandler+0x8b8>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a68      	ldr	r2, [pc, #416]	; (800454c <HAL_DMA_IRQHandler+0xa38>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d00e      	beq.n	80043cc <HAL_DMA_IRQHandler+0x8b8>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a67      	ldr	r2, [pc, #412]	; (8004550 <HAL_DMA_IRQHandler+0xa3c>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d009      	beq.n	80043cc <HAL_DMA_IRQHandler+0x8b8>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a65      	ldr	r2, [pc, #404]	; (8004554 <HAL_DMA_IRQHandler+0xa40>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d004      	beq.n	80043cc <HAL_DMA_IRQHandler+0x8b8>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a64      	ldr	r2, [pc, #400]	; (8004558 <HAL_DMA_IRQHandler+0xa44>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d108      	bne.n	80043de <HAL_DMA_IRQHandler+0x8ca>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f022 0201 	bic.w	r2, r2, #1
 80043da:	601a      	str	r2, [r3, #0]
 80043dc:	e007      	b.n	80043ee <HAL_DMA_IRQHandler+0x8da>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f022 0201 	bic.w	r2, r2, #1
 80043ec:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	3301      	adds	r3, #1
 80043f2:	60fb      	str	r3, [r7, #12]
 80043f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d307      	bcc.n	800440a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0301 	and.w	r3, r3, #1
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1f2      	bne.n	80043ee <HAL_DMA_IRQHandler+0x8da>
 8004408:	e000      	b.n	800440c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800440a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d004      	beq.n	8004424 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2203      	movs	r2, #3
 800441e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004422:	e003      	b.n	800442c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 8272 	beq.w	8004922 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	4798      	blx	r3
 8004446:	e26c      	b.n	8004922 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a43      	ldr	r2, [pc, #268]	; (800455c <HAL_DMA_IRQHandler+0xa48>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d022      	beq.n	8004498 <HAL_DMA_IRQHandler+0x984>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a42      	ldr	r2, [pc, #264]	; (8004560 <HAL_DMA_IRQHandler+0xa4c>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d01d      	beq.n	8004498 <HAL_DMA_IRQHandler+0x984>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a40      	ldr	r2, [pc, #256]	; (8004564 <HAL_DMA_IRQHandler+0xa50>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d018      	beq.n	8004498 <HAL_DMA_IRQHandler+0x984>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a3f      	ldr	r2, [pc, #252]	; (8004568 <HAL_DMA_IRQHandler+0xa54>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d013      	beq.n	8004498 <HAL_DMA_IRQHandler+0x984>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a3d      	ldr	r2, [pc, #244]	; (800456c <HAL_DMA_IRQHandler+0xa58>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d00e      	beq.n	8004498 <HAL_DMA_IRQHandler+0x984>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a3c      	ldr	r2, [pc, #240]	; (8004570 <HAL_DMA_IRQHandler+0xa5c>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d009      	beq.n	8004498 <HAL_DMA_IRQHandler+0x984>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a3a      	ldr	r2, [pc, #232]	; (8004574 <HAL_DMA_IRQHandler+0xa60>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d004      	beq.n	8004498 <HAL_DMA_IRQHandler+0x984>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a39      	ldr	r2, [pc, #228]	; (8004578 <HAL_DMA_IRQHandler+0xa64>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d101      	bne.n	800449c <HAL_DMA_IRQHandler+0x988>
 8004498:	2301      	movs	r3, #1
 800449a:	e000      	b.n	800449e <HAL_DMA_IRQHandler+0x98a>
 800449c:	2300      	movs	r3, #0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f000 823f 	beq.w	8004922 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044b0:	f003 031f 	and.w	r3, r3, #31
 80044b4:	2204      	movs	r2, #4
 80044b6:	409a      	lsls	r2, r3
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	4013      	ands	r3, r2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f000 80cd 	beq.w	800465c <HAL_DMA_IRQHandler+0xb48>
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	f003 0304 	and.w	r3, r3, #4
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 80c7 	beq.w	800465c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044d2:	f003 031f 	and.w	r3, r3, #31
 80044d6:	2204      	movs	r2, #4
 80044d8:	409a      	lsls	r2, r3
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d049      	beq.n	800457c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d109      	bne.n	8004506 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f000 8210 	beq.w	800491c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004504:	e20a      	b.n	800491c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	2b00      	cmp	r3, #0
 800450c:	f000 8206 	beq.w	800491c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004518:	e200      	b.n	800491c <HAL_DMA_IRQHandler+0xe08>
 800451a:	bf00      	nop
 800451c:	40020010 	.word	0x40020010
 8004520:	40020028 	.word	0x40020028
 8004524:	40020040 	.word	0x40020040
 8004528:	40020058 	.word	0x40020058
 800452c:	40020070 	.word	0x40020070
 8004530:	40020088 	.word	0x40020088
 8004534:	400200a0 	.word	0x400200a0
 8004538:	400200b8 	.word	0x400200b8
 800453c:	40020410 	.word	0x40020410
 8004540:	40020428 	.word	0x40020428
 8004544:	40020440 	.word	0x40020440
 8004548:	40020458 	.word	0x40020458
 800454c:	40020470 	.word	0x40020470
 8004550:	40020488 	.word	0x40020488
 8004554:	400204a0 	.word	0x400204a0
 8004558:	400204b8 	.word	0x400204b8
 800455c:	58025408 	.word	0x58025408
 8004560:	5802541c 	.word	0x5802541c
 8004564:	58025430 	.word	0x58025430
 8004568:	58025444 	.word	0x58025444
 800456c:	58025458 	.word	0x58025458
 8004570:	5802546c 	.word	0x5802546c
 8004574:	58025480 	.word	0x58025480
 8004578:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	f003 0320 	and.w	r3, r3, #32
 8004582:	2b00      	cmp	r3, #0
 8004584:	d160      	bne.n	8004648 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a7f      	ldr	r2, [pc, #508]	; (8004788 <HAL_DMA_IRQHandler+0xc74>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d04a      	beq.n	8004626 <HAL_DMA_IRQHandler+0xb12>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a7d      	ldr	r2, [pc, #500]	; (800478c <HAL_DMA_IRQHandler+0xc78>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d045      	beq.n	8004626 <HAL_DMA_IRQHandler+0xb12>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a7c      	ldr	r2, [pc, #496]	; (8004790 <HAL_DMA_IRQHandler+0xc7c>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d040      	beq.n	8004626 <HAL_DMA_IRQHandler+0xb12>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a7a      	ldr	r2, [pc, #488]	; (8004794 <HAL_DMA_IRQHandler+0xc80>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d03b      	beq.n	8004626 <HAL_DMA_IRQHandler+0xb12>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a79      	ldr	r2, [pc, #484]	; (8004798 <HAL_DMA_IRQHandler+0xc84>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d036      	beq.n	8004626 <HAL_DMA_IRQHandler+0xb12>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a77      	ldr	r2, [pc, #476]	; (800479c <HAL_DMA_IRQHandler+0xc88>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d031      	beq.n	8004626 <HAL_DMA_IRQHandler+0xb12>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a76      	ldr	r2, [pc, #472]	; (80047a0 <HAL_DMA_IRQHandler+0xc8c>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d02c      	beq.n	8004626 <HAL_DMA_IRQHandler+0xb12>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a74      	ldr	r2, [pc, #464]	; (80047a4 <HAL_DMA_IRQHandler+0xc90>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d027      	beq.n	8004626 <HAL_DMA_IRQHandler+0xb12>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a73      	ldr	r2, [pc, #460]	; (80047a8 <HAL_DMA_IRQHandler+0xc94>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d022      	beq.n	8004626 <HAL_DMA_IRQHandler+0xb12>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a71      	ldr	r2, [pc, #452]	; (80047ac <HAL_DMA_IRQHandler+0xc98>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d01d      	beq.n	8004626 <HAL_DMA_IRQHandler+0xb12>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a70      	ldr	r2, [pc, #448]	; (80047b0 <HAL_DMA_IRQHandler+0xc9c>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d018      	beq.n	8004626 <HAL_DMA_IRQHandler+0xb12>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a6e      	ldr	r2, [pc, #440]	; (80047b4 <HAL_DMA_IRQHandler+0xca0>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d013      	beq.n	8004626 <HAL_DMA_IRQHandler+0xb12>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a6d      	ldr	r2, [pc, #436]	; (80047b8 <HAL_DMA_IRQHandler+0xca4>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d00e      	beq.n	8004626 <HAL_DMA_IRQHandler+0xb12>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a6b      	ldr	r2, [pc, #428]	; (80047bc <HAL_DMA_IRQHandler+0xca8>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d009      	beq.n	8004626 <HAL_DMA_IRQHandler+0xb12>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a6a      	ldr	r2, [pc, #424]	; (80047c0 <HAL_DMA_IRQHandler+0xcac>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d004      	beq.n	8004626 <HAL_DMA_IRQHandler+0xb12>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a68      	ldr	r2, [pc, #416]	; (80047c4 <HAL_DMA_IRQHandler+0xcb0>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d108      	bne.n	8004638 <HAL_DMA_IRQHandler+0xb24>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 0208 	bic.w	r2, r2, #8
 8004634:	601a      	str	r2, [r3, #0]
 8004636:	e007      	b.n	8004648 <HAL_DMA_IRQHandler+0xb34>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 0204 	bic.w	r2, r2, #4
 8004646:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464c:	2b00      	cmp	r3, #0
 800464e:	f000 8165 	beq.w	800491c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800465a:	e15f      	b.n	800491c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004660:	f003 031f 	and.w	r3, r3, #31
 8004664:	2202      	movs	r2, #2
 8004666:	409a      	lsls	r2, r3
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	4013      	ands	r3, r2
 800466c:	2b00      	cmp	r3, #0
 800466e:	f000 80c5 	beq.w	80047fc <HAL_DMA_IRQHandler+0xce8>
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	f003 0302 	and.w	r3, r3, #2
 8004678:	2b00      	cmp	r3, #0
 800467a:	f000 80bf 	beq.w	80047fc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004682:	f003 031f 	and.w	r3, r3, #31
 8004686:	2202      	movs	r2, #2
 8004688:	409a      	lsls	r2, r3
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d018      	beq.n	80046ca <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d109      	bne.n	80046b6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f000 813a 	beq.w	8004920 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046b4:	e134      	b.n	8004920 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f000 8130 	beq.w	8004920 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046c8:	e12a      	b.n	8004920 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	f003 0320 	and.w	r3, r3, #32
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f040 8089 	bne.w	80047e8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a2b      	ldr	r2, [pc, #172]	; (8004788 <HAL_DMA_IRQHandler+0xc74>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d04a      	beq.n	8004776 <HAL_DMA_IRQHandler+0xc62>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a29      	ldr	r2, [pc, #164]	; (800478c <HAL_DMA_IRQHandler+0xc78>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d045      	beq.n	8004776 <HAL_DMA_IRQHandler+0xc62>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a28      	ldr	r2, [pc, #160]	; (8004790 <HAL_DMA_IRQHandler+0xc7c>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d040      	beq.n	8004776 <HAL_DMA_IRQHandler+0xc62>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a26      	ldr	r2, [pc, #152]	; (8004794 <HAL_DMA_IRQHandler+0xc80>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d03b      	beq.n	8004776 <HAL_DMA_IRQHandler+0xc62>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a25      	ldr	r2, [pc, #148]	; (8004798 <HAL_DMA_IRQHandler+0xc84>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d036      	beq.n	8004776 <HAL_DMA_IRQHandler+0xc62>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a23      	ldr	r2, [pc, #140]	; (800479c <HAL_DMA_IRQHandler+0xc88>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d031      	beq.n	8004776 <HAL_DMA_IRQHandler+0xc62>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a22      	ldr	r2, [pc, #136]	; (80047a0 <HAL_DMA_IRQHandler+0xc8c>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d02c      	beq.n	8004776 <HAL_DMA_IRQHandler+0xc62>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a20      	ldr	r2, [pc, #128]	; (80047a4 <HAL_DMA_IRQHandler+0xc90>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d027      	beq.n	8004776 <HAL_DMA_IRQHandler+0xc62>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a1f      	ldr	r2, [pc, #124]	; (80047a8 <HAL_DMA_IRQHandler+0xc94>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d022      	beq.n	8004776 <HAL_DMA_IRQHandler+0xc62>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a1d      	ldr	r2, [pc, #116]	; (80047ac <HAL_DMA_IRQHandler+0xc98>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d01d      	beq.n	8004776 <HAL_DMA_IRQHandler+0xc62>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a1c      	ldr	r2, [pc, #112]	; (80047b0 <HAL_DMA_IRQHandler+0xc9c>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d018      	beq.n	8004776 <HAL_DMA_IRQHandler+0xc62>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a1a      	ldr	r2, [pc, #104]	; (80047b4 <HAL_DMA_IRQHandler+0xca0>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d013      	beq.n	8004776 <HAL_DMA_IRQHandler+0xc62>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a19      	ldr	r2, [pc, #100]	; (80047b8 <HAL_DMA_IRQHandler+0xca4>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d00e      	beq.n	8004776 <HAL_DMA_IRQHandler+0xc62>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a17      	ldr	r2, [pc, #92]	; (80047bc <HAL_DMA_IRQHandler+0xca8>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d009      	beq.n	8004776 <HAL_DMA_IRQHandler+0xc62>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a16      	ldr	r2, [pc, #88]	; (80047c0 <HAL_DMA_IRQHandler+0xcac>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d004      	beq.n	8004776 <HAL_DMA_IRQHandler+0xc62>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a14      	ldr	r2, [pc, #80]	; (80047c4 <HAL_DMA_IRQHandler+0xcb0>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d128      	bne.n	80047c8 <HAL_DMA_IRQHandler+0xcb4>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f022 0214 	bic.w	r2, r2, #20
 8004784:	601a      	str	r2, [r3, #0]
 8004786:	e027      	b.n	80047d8 <HAL_DMA_IRQHandler+0xcc4>
 8004788:	40020010 	.word	0x40020010
 800478c:	40020028 	.word	0x40020028
 8004790:	40020040 	.word	0x40020040
 8004794:	40020058 	.word	0x40020058
 8004798:	40020070 	.word	0x40020070
 800479c:	40020088 	.word	0x40020088
 80047a0:	400200a0 	.word	0x400200a0
 80047a4:	400200b8 	.word	0x400200b8
 80047a8:	40020410 	.word	0x40020410
 80047ac:	40020428 	.word	0x40020428
 80047b0:	40020440 	.word	0x40020440
 80047b4:	40020458 	.word	0x40020458
 80047b8:	40020470 	.word	0x40020470
 80047bc:	40020488 	.word	0x40020488
 80047c0:	400204a0 	.word	0x400204a0
 80047c4:	400204b8 	.word	0x400204b8
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 020a 	bic.w	r2, r2, #10
 80047d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f000 8097 	beq.w	8004920 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047fa:	e091      	b.n	8004920 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004800:	f003 031f 	and.w	r3, r3, #31
 8004804:	2208      	movs	r2, #8
 8004806:	409a      	lsls	r2, r3
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	4013      	ands	r3, r2
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 8088 	beq.w	8004922 <HAL_DMA_IRQHandler+0xe0e>
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	f003 0308 	and.w	r3, r3, #8
 8004818:	2b00      	cmp	r3, #0
 800481a:	f000 8082 	beq.w	8004922 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a41      	ldr	r2, [pc, #260]	; (8004928 <HAL_DMA_IRQHandler+0xe14>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d04a      	beq.n	80048be <HAL_DMA_IRQHandler+0xdaa>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a3f      	ldr	r2, [pc, #252]	; (800492c <HAL_DMA_IRQHandler+0xe18>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d045      	beq.n	80048be <HAL_DMA_IRQHandler+0xdaa>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a3e      	ldr	r2, [pc, #248]	; (8004930 <HAL_DMA_IRQHandler+0xe1c>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d040      	beq.n	80048be <HAL_DMA_IRQHandler+0xdaa>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a3c      	ldr	r2, [pc, #240]	; (8004934 <HAL_DMA_IRQHandler+0xe20>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d03b      	beq.n	80048be <HAL_DMA_IRQHandler+0xdaa>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a3b      	ldr	r2, [pc, #236]	; (8004938 <HAL_DMA_IRQHandler+0xe24>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d036      	beq.n	80048be <HAL_DMA_IRQHandler+0xdaa>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a39      	ldr	r2, [pc, #228]	; (800493c <HAL_DMA_IRQHandler+0xe28>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d031      	beq.n	80048be <HAL_DMA_IRQHandler+0xdaa>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a38      	ldr	r2, [pc, #224]	; (8004940 <HAL_DMA_IRQHandler+0xe2c>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d02c      	beq.n	80048be <HAL_DMA_IRQHandler+0xdaa>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a36      	ldr	r2, [pc, #216]	; (8004944 <HAL_DMA_IRQHandler+0xe30>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d027      	beq.n	80048be <HAL_DMA_IRQHandler+0xdaa>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a35      	ldr	r2, [pc, #212]	; (8004948 <HAL_DMA_IRQHandler+0xe34>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d022      	beq.n	80048be <HAL_DMA_IRQHandler+0xdaa>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a33      	ldr	r2, [pc, #204]	; (800494c <HAL_DMA_IRQHandler+0xe38>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d01d      	beq.n	80048be <HAL_DMA_IRQHandler+0xdaa>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a32      	ldr	r2, [pc, #200]	; (8004950 <HAL_DMA_IRQHandler+0xe3c>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d018      	beq.n	80048be <HAL_DMA_IRQHandler+0xdaa>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a30      	ldr	r2, [pc, #192]	; (8004954 <HAL_DMA_IRQHandler+0xe40>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d013      	beq.n	80048be <HAL_DMA_IRQHandler+0xdaa>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a2f      	ldr	r2, [pc, #188]	; (8004958 <HAL_DMA_IRQHandler+0xe44>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d00e      	beq.n	80048be <HAL_DMA_IRQHandler+0xdaa>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a2d      	ldr	r2, [pc, #180]	; (800495c <HAL_DMA_IRQHandler+0xe48>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d009      	beq.n	80048be <HAL_DMA_IRQHandler+0xdaa>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a2c      	ldr	r2, [pc, #176]	; (8004960 <HAL_DMA_IRQHandler+0xe4c>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d004      	beq.n	80048be <HAL_DMA_IRQHandler+0xdaa>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a2a      	ldr	r2, [pc, #168]	; (8004964 <HAL_DMA_IRQHandler+0xe50>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d108      	bne.n	80048d0 <HAL_DMA_IRQHandler+0xdbc>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f022 021c 	bic.w	r2, r2, #28
 80048cc:	601a      	str	r2, [r3, #0]
 80048ce:	e007      	b.n	80048e0 <HAL_DMA_IRQHandler+0xdcc>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 020e 	bic.w	r2, r2, #14
 80048de:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e4:	f003 031f 	and.w	r3, r3, #31
 80048e8:	2201      	movs	r2, #1
 80048ea:	409a      	lsls	r2, r3
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800490a:	2b00      	cmp	r3, #0
 800490c:	d009      	beq.n	8004922 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	4798      	blx	r3
 8004916:	e004      	b.n	8004922 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004918:	bf00      	nop
 800491a:	e002      	b.n	8004922 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800491c:	bf00      	nop
 800491e:	e000      	b.n	8004922 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004920:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004922:	3728      	adds	r7, #40	; 0x28
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	40020010 	.word	0x40020010
 800492c:	40020028 	.word	0x40020028
 8004930:	40020040 	.word	0x40020040
 8004934:	40020058 	.word	0x40020058
 8004938:	40020070 	.word	0x40020070
 800493c:	40020088 	.word	0x40020088
 8004940:	400200a0 	.word	0x400200a0
 8004944:	400200b8 	.word	0x400200b8
 8004948:	40020410 	.word	0x40020410
 800494c:	40020428 	.word	0x40020428
 8004950:	40020440 	.word	0x40020440
 8004954:	40020458 	.word	0x40020458
 8004958:	40020470 	.word	0x40020470
 800495c:	40020488 	.word	0x40020488
 8004960:	400204a0 	.word	0x400204a0
 8004964:	400204b8 	.word	0x400204b8

08004968 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004968:	b480      	push	{r7}
 800496a:	b087      	sub	sp, #28
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
 8004974:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800497a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004980:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a7f      	ldr	r2, [pc, #508]	; (8004b84 <DMA_SetConfig+0x21c>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d072      	beq.n	8004a72 <DMA_SetConfig+0x10a>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a7d      	ldr	r2, [pc, #500]	; (8004b88 <DMA_SetConfig+0x220>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d06d      	beq.n	8004a72 <DMA_SetConfig+0x10a>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a7c      	ldr	r2, [pc, #496]	; (8004b8c <DMA_SetConfig+0x224>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d068      	beq.n	8004a72 <DMA_SetConfig+0x10a>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a7a      	ldr	r2, [pc, #488]	; (8004b90 <DMA_SetConfig+0x228>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d063      	beq.n	8004a72 <DMA_SetConfig+0x10a>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a79      	ldr	r2, [pc, #484]	; (8004b94 <DMA_SetConfig+0x22c>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d05e      	beq.n	8004a72 <DMA_SetConfig+0x10a>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a77      	ldr	r2, [pc, #476]	; (8004b98 <DMA_SetConfig+0x230>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d059      	beq.n	8004a72 <DMA_SetConfig+0x10a>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a76      	ldr	r2, [pc, #472]	; (8004b9c <DMA_SetConfig+0x234>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d054      	beq.n	8004a72 <DMA_SetConfig+0x10a>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a74      	ldr	r2, [pc, #464]	; (8004ba0 <DMA_SetConfig+0x238>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d04f      	beq.n	8004a72 <DMA_SetConfig+0x10a>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a73      	ldr	r2, [pc, #460]	; (8004ba4 <DMA_SetConfig+0x23c>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d04a      	beq.n	8004a72 <DMA_SetConfig+0x10a>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a71      	ldr	r2, [pc, #452]	; (8004ba8 <DMA_SetConfig+0x240>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d045      	beq.n	8004a72 <DMA_SetConfig+0x10a>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a70      	ldr	r2, [pc, #448]	; (8004bac <DMA_SetConfig+0x244>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d040      	beq.n	8004a72 <DMA_SetConfig+0x10a>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a6e      	ldr	r2, [pc, #440]	; (8004bb0 <DMA_SetConfig+0x248>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d03b      	beq.n	8004a72 <DMA_SetConfig+0x10a>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a6d      	ldr	r2, [pc, #436]	; (8004bb4 <DMA_SetConfig+0x24c>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d036      	beq.n	8004a72 <DMA_SetConfig+0x10a>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a6b      	ldr	r2, [pc, #428]	; (8004bb8 <DMA_SetConfig+0x250>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d031      	beq.n	8004a72 <DMA_SetConfig+0x10a>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a6a      	ldr	r2, [pc, #424]	; (8004bbc <DMA_SetConfig+0x254>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d02c      	beq.n	8004a72 <DMA_SetConfig+0x10a>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a68      	ldr	r2, [pc, #416]	; (8004bc0 <DMA_SetConfig+0x258>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d027      	beq.n	8004a72 <DMA_SetConfig+0x10a>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a67      	ldr	r2, [pc, #412]	; (8004bc4 <DMA_SetConfig+0x25c>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d022      	beq.n	8004a72 <DMA_SetConfig+0x10a>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a65      	ldr	r2, [pc, #404]	; (8004bc8 <DMA_SetConfig+0x260>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d01d      	beq.n	8004a72 <DMA_SetConfig+0x10a>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a64      	ldr	r2, [pc, #400]	; (8004bcc <DMA_SetConfig+0x264>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d018      	beq.n	8004a72 <DMA_SetConfig+0x10a>
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a62      	ldr	r2, [pc, #392]	; (8004bd0 <DMA_SetConfig+0x268>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d013      	beq.n	8004a72 <DMA_SetConfig+0x10a>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a61      	ldr	r2, [pc, #388]	; (8004bd4 <DMA_SetConfig+0x26c>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d00e      	beq.n	8004a72 <DMA_SetConfig+0x10a>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a5f      	ldr	r2, [pc, #380]	; (8004bd8 <DMA_SetConfig+0x270>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d009      	beq.n	8004a72 <DMA_SetConfig+0x10a>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a5e      	ldr	r2, [pc, #376]	; (8004bdc <DMA_SetConfig+0x274>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d004      	beq.n	8004a72 <DMA_SetConfig+0x10a>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a5c      	ldr	r2, [pc, #368]	; (8004be0 <DMA_SetConfig+0x278>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d101      	bne.n	8004a76 <DMA_SetConfig+0x10e>
 8004a72:	2301      	movs	r3, #1
 8004a74:	e000      	b.n	8004a78 <DMA_SetConfig+0x110>
 8004a76:	2300      	movs	r3, #0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00d      	beq.n	8004a98 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004a84:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d004      	beq.n	8004a98 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004a96:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a39      	ldr	r2, [pc, #228]	; (8004b84 <DMA_SetConfig+0x21c>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d04a      	beq.n	8004b38 <DMA_SetConfig+0x1d0>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a38      	ldr	r2, [pc, #224]	; (8004b88 <DMA_SetConfig+0x220>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d045      	beq.n	8004b38 <DMA_SetConfig+0x1d0>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a36      	ldr	r2, [pc, #216]	; (8004b8c <DMA_SetConfig+0x224>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d040      	beq.n	8004b38 <DMA_SetConfig+0x1d0>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a35      	ldr	r2, [pc, #212]	; (8004b90 <DMA_SetConfig+0x228>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d03b      	beq.n	8004b38 <DMA_SetConfig+0x1d0>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a33      	ldr	r2, [pc, #204]	; (8004b94 <DMA_SetConfig+0x22c>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d036      	beq.n	8004b38 <DMA_SetConfig+0x1d0>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a32      	ldr	r2, [pc, #200]	; (8004b98 <DMA_SetConfig+0x230>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d031      	beq.n	8004b38 <DMA_SetConfig+0x1d0>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a30      	ldr	r2, [pc, #192]	; (8004b9c <DMA_SetConfig+0x234>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d02c      	beq.n	8004b38 <DMA_SetConfig+0x1d0>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a2f      	ldr	r2, [pc, #188]	; (8004ba0 <DMA_SetConfig+0x238>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d027      	beq.n	8004b38 <DMA_SetConfig+0x1d0>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a2d      	ldr	r2, [pc, #180]	; (8004ba4 <DMA_SetConfig+0x23c>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d022      	beq.n	8004b38 <DMA_SetConfig+0x1d0>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a2c      	ldr	r2, [pc, #176]	; (8004ba8 <DMA_SetConfig+0x240>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d01d      	beq.n	8004b38 <DMA_SetConfig+0x1d0>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a2a      	ldr	r2, [pc, #168]	; (8004bac <DMA_SetConfig+0x244>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d018      	beq.n	8004b38 <DMA_SetConfig+0x1d0>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a29      	ldr	r2, [pc, #164]	; (8004bb0 <DMA_SetConfig+0x248>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d013      	beq.n	8004b38 <DMA_SetConfig+0x1d0>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a27      	ldr	r2, [pc, #156]	; (8004bb4 <DMA_SetConfig+0x24c>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d00e      	beq.n	8004b38 <DMA_SetConfig+0x1d0>
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a26      	ldr	r2, [pc, #152]	; (8004bb8 <DMA_SetConfig+0x250>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d009      	beq.n	8004b38 <DMA_SetConfig+0x1d0>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a24      	ldr	r2, [pc, #144]	; (8004bbc <DMA_SetConfig+0x254>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d004      	beq.n	8004b38 <DMA_SetConfig+0x1d0>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a23      	ldr	r2, [pc, #140]	; (8004bc0 <DMA_SetConfig+0x258>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d101      	bne.n	8004b3c <DMA_SetConfig+0x1d4>
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e000      	b.n	8004b3e <DMA_SetConfig+0x1d6>
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d059      	beq.n	8004bf6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b46:	f003 031f 	and.w	r3, r3, #31
 8004b4a:	223f      	movs	r2, #63	; 0x3f
 8004b4c:	409a      	lsls	r2, r3
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b60:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	683a      	ldr	r2, [r7, #0]
 8004b68:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	2b40      	cmp	r3, #64	; 0x40
 8004b70:	d138      	bne.n	8004be4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68ba      	ldr	r2, [r7, #8]
 8004b80:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004b82:	e086      	b.n	8004c92 <DMA_SetConfig+0x32a>
 8004b84:	40020010 	.word	0x40020010
 8004b88:	40020028 	.word	0x40020028
 8004b8c:	40020040 	.word	0x40020040
 8004b90:	40020058 	.word	0x40020058
 8004b94:	40020070 	.word	0x40020070
 8004b98:	40020088 	.word	0x40020088
 8004b9c:	400200a0 	.word	0x400200a0
 8004ba0:	400200b8 	.word	0x400200b8
 8004ba4:	40020410 	.word	0x40020410
 8004ba8:	40020428 	.word	0x40020428
 8004bac:	40020440 	.word	0x40020440
 8004bb0:	40020458 	.word	0x40020458
 8004bb4:	40020470 	.word	0x40020470
 8004bb8:	40020488 	.word	0x40020488
 8004bbc:	400204a0 	.word	0x400204a0
 8004bc0:	400204b8 	.word	0x400204b8
 8004bc4:	58025408 	.word	0x58025408
 8004bc8:	5802541c 	.word	0x5802541c
 8004bcc:	58025430 	.word	0x58025430
 8004bd0:	58025444 	.word	0x58025444
 8004bd4:	58025458 	.word	0x58025458
 8004bd8:	5802546c 	.word	0x5802546c
 8004bdc:	58025480 	.word	0x58025480
 8004be0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68ba      	ldr	r2, [r7, #8]
 8004bea:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	60da      	str	r2, [r3, #12]
}
 8004bf4:	e04d      	b.n	8004c92 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a29      	ldr	r2, [pc, #164]	; (8004ca0 <DMA_SetConfig+0x338>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d022      	beq.n	8004c46 <DMA_SetConfig+0x2de>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a27      	ldr	r2, [pc, #156]	; (8004ca4 <DMA_SetConfig+0x33c>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d01d      	beq.n	8004c46 <DMA_SetConfig+0x2de>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a26      	ldr	r2, [pc, #152]	; (8004ca8 <DMA_SetConfig+0x340>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d018      	beq.n	8004c46 <DMA_SetConfig+0x2de>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a24      	ldr	r2, [pc, #144]	; (8004cac <DMA_SetConfig+0x344>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d013      	beq.n	8004c46 <DMA_SetConfig+0x2de>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a23      	ldr	r2, [pc, #140]	; (8004cb0 <DMA_SetConfig+0x348>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d00e      	beq.n	8004c46 <DMA_SetConfig+0x2de>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a21      	ldr	r2, [pc, #132]	; (8004cb4 <DMA_SetConfig+0x34c>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d009      	beq.n	8004c46 <DMA_SetConfig+0x2de>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a20      	ldr	r2, [pc, #128]	; (8004cb8 <DMA_SetConfig+0x350>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d004      	beq.n	8004c46 <DMA_SetConfig+0x2de>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a1e      	ldr	r2, [pc, #120]	; (8004cbc <DMA_SetConfig+0x354>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d101      	bne.n	8004c4a <DMA_SetConfig+0x2e2>
 8004c46:	2301      	movs	r3, #1
 8004c48:	e000      	b.n	8004c4c <DMA_SetConfig+0x2e4>
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d020      	beq.n	8004c92 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c54:	f003 031f 	and.w	r3, r3, #31
 8004c58:	2201      	movs	r2, #1
 8004c5a:	409a      	lsls	r2, r3
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	2b40      	cmp	r3, #64	; 0x40
 8004c6e:	d108      	bne.n	8004c82 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68ba      	ldr	r2, [r7, #8]
 8004c7e:	60da      	str	r2, [r3, #12]
}
 8004c80:	e007      	b.n	8004c92 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68ba      	ldr	r2, [r7, #8]
 8004c88:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	60da      	str	r2, [r3, #12]
}
 8004c92:	bf00      	nop
 8004c94:	371c      	adds	r7, #28
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	58025408 	.word	0x58025408
 8004ca4:	5802541c 	.word	0x5802541c
 8004ca8:	58025430 	.word	0x58025430
 8004cac:	58025444 	.word	0x58025444
 8004cb0:	58025458 	.word	0x58025458
 8004cb4:	5802546c 	.word	0x5802546c
 8004cb8:	58025480 	.word	0x58025480
 8004cbc:	58025494 	.word	0x58025494

08004cc0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a42      	ldr	r2, [pc, #264]	; (8004dd8 <DMA_CalcBaseAndBitshift+0x118>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d04a      	beq.n	8004d68 <DMA_CalcBaseAndBitshift+0xa8>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a41      	ldr	r2, [pc, #260]	; (8004ddc <DMA_CalcBaseAndBitshift+0x11c>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d045      	beq.n	8004d68 <DMA_CalcBaseAndBitshift+0xa8>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a3f      	ldr	r2, [pc, #252]	; (8004de0 <DMA_CalcBaseAndBitshift+0x120>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d040      	beq.n	8004d68 <DMA_CalcBaseAndBitshift+0xa8>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a3e      	ldr	r2, [pc, #248]	; (8004de4 <DMA_CalcBaseAndBitshift+0x124>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d03b      	beq.n	8004d68 <DMA_CalcBaseAndBitshift+0xa8>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a3c      	ldr	r2, [pc, #240]	; (8004de8 <DMA_CalcBaseAndBitshift+0x128>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d036      	beq.n	8004d68 <DMA_CalcBaseAndBitshift+0xa8>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a3b      	ldr	r2, [pc, #236]	; (8004dec <DMA_CalcBaseAndBitshift+0x12c>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d031      	beq.n	8004d68 <DMA_CalcBaseAndBitshift+0xa8>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a39      	ldr	r2, [pc, #228]	; (8004df0 <DMA_CalcBaseAndBitshift+0x130>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d02c      	beq.n	8004d68 <DMA_CalcBaseAndBitshift+0xa8>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a38      	ldr	r2, [pc, #224]	; (8004df4 <DMA_CalcBaseAndBitshift+0x134>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d027      	beq.n	8004d68 <DMA_CalcBaseAndBitshift+0xa8>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a36      	ldr	r2, [pc, #216]	; (8004df8 <DMA_CalcBaseAndBitshift+0x138>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d022      	beq.n	8004d68 <DMA_CalcBaseAndBitshift+0xa8>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a35      	ldr	r2, [pc, #212]	; (8004dfc <DMA_CalcBaseAndBitshift+0x13c>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d01d      	beq.n	8004d68 <DMA_CalcBaseAndBitshift+0xa8>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a33      	ldr	r2, [pc, #204]	; (8004e00 <DMA_CalcBaseAndBitshift+0x140>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d018      	beq.n	8004d68 <DMA_CalcBaseAndBitshift+0xa8>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a32      	ldr	r2, [pc, #200]	; (8004e04 <DMA_CalcBaseAndBitshift+0x144>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d013      	beq.n	8004d68 <DMA_CalcBaseAndBitshift+0xa8>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a30      	ldr	r2, [pc, #192]	; (8004e08 <DMA_CalcBaseAndBitshift+0x148>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d00e      	beq.n	8004d68 <DMA_CalcBaseAndBitshift+0xa8>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a2f      	ldr	r2, [pc, #188]	; (8004e0c <DMA_CalcBaseAndBitshift+0x14c>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d009      	beq.n	8004d68 <DMA_CalcBaseAndBitshift+0xa8>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a2d      	ldr	r2, [pc, #180]	; (8004e10 <DMA_CalcBaseAndBitshift+0x150>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d004      	beq.n	8004d68 <DMA_CalcBaseAndBitshift+0xa8>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a2c      	ldr	r2, [pc, #176]	; (8004e14 <DMA_CalcBaseAndBitshift+0x154>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d101      	bne.n	8004d6c <DMA_CalcBaseAndBitshift+0xac>
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e000      	b.n	8004d6e <DMA_CalcBaseAndBitshift+0xae>
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d024      	beq.n	8004dbc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	3b10      	subs	r3, #16
 8004d7a:	4a27      	ldr	r2, [pc, #156]	; (8004e18 <DMA_CalcBaseAndBitshift+0x158>)
 8004d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d80:	091b      	lsrs	r3, r3, #4
 8004d82:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f003 0307 	and.w	r3, r3, #7
 8004d8a:	4a24      	ldr	r2, [pc, #144]	; (8004e1c <DMA_CalcBaseAndBitshift+0x15c>)
 8004d8c:	5cd3      	ldrb	r3, [r2, r3]
 8004d8e:	461a      	mov	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2b03      	cmp	r3, #3
 8004d98:	d908      	bls.n	8004dac <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	461a      	mov	r2, r3
 8004da0:	4b1f      	ldr	r3, [pc, #124]	; (8004e20 <DMA_CalcBaseAndBitshift+0x160>)
 8004da2:	4013      	ands	r3, r2
 8004da4:	1d1a      	adds	r2, r3, #4
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	659a      	str	r2, [r3, #88]	; 0x58
 8004daa:	e00d      	b.n	8004dc8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	461a      	mov	r2, r3
 8004db2:	4b1b      	ldr	r3, [pc, #108]	; (8004e20 <DMA_CalcBaseAndBitshift+0x160>)
 8004db4:	4013      	ands	r3, r2
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	6593      	str	r3, [r2, #88]	; 0x58
 8004dba:	e005      	b.n	8004dc8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr
 8004dd8:	40020010 	.word	0x40020010
 8004ddc:	40020028 	.word	0x40020028
 8004de0:	40020040 	.word	0x40020040
 8004de4:	40020058 	.word	0x40020058
 8004de8:	40020070 	.word	0x40020070
 8004dec:	40020088 	.word	0x40020088
 8004df0:	400200a0 	.word	0x400200a0
 8004df4:	400200b8 	.word	0x400200b8
 8004df8:	40020410 	.word	0x40020410
 8004dfc:	40020428 	.word	0x40020428
 8004e00:	40020440 	.word	0x40020440
 8004e04:	40020458 	.word	0x40020458
 8004e08:	40020470 	.word	0x40020470
 8004e0c:	40020488 	.word	0x40020488
 8004e10:	400204a0 	.word	0x400204a0
 8004e14:	400204b8 	.word	0x400204b8
 8004e18:	aaaaaaab 	.word	0xaaaaaaab
 8004e1c:	0800bb38 	.word	0x0800bb38
 8004e20:	fffffc00 	.word	0xfffffc00

08004e24 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d120      	bne.n	8004e7a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3c:	2b03      	cmp	r3, #3
 8004e3e:	d858      	bhi.n	8004ef2 <DMA_CheckFifoParam+0xce>
 8004e40:	a201      	add	r2, pc, #4	; (adr r2, 8004e48 <DMA_CheckFifoParam+0x24>)
 8004e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e46:	bf00      	nop
 8004e48:	08004e59 	.word	0x08004e59
 8004e4c:	08004e6b 	.word	0x08004e6b
 8004e50:	08004e59 	.word	0x08004e59
 8004e54:	08004ef3 	.word	0x08004ef3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d048      	beq.n	8004ef6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e68:	e045      	b.n	8004ef6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e72:	d142      	bne.n	8004efa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e78:	e03f      	b.n	8004efa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e82:	d123      	bne.n	8004ecc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e88:	2b03      	cmp	r3, #3
 8004e8a:	d838      	bhi.n	8004efe <DMA_CheckFifoParam+0xda>
 8004e8c:	a201      	add	r2, pc, #4	; (adr r2, 8004e94 <DMA_CheckFifoParam+0x70>)
 8004e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e92:	bf00      	nop
 8004e94:	08004ea5 	.word	0x08004ea5
 8004e98:	08004eab 	.word	0x08004eab
 8004e9c:	08004ea5 	.word	0x08004ea5
 8004ea0:	08004ebd 	.word	0x08004ebd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	73fb      	strb	r3, [r7, #15]
        break;
 8004ea8:	e030      	b.n	8004f0c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d025      	beq.n	8004f02 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004eba:	e022      	b.n	8004f02 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ec4:	d11f      	bne.n	8004f06 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004eca:	e01c      	b.n	8004f06 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d902      	bls.n	8004eda <DMA_CheckFifoParam+0xb6>
 8004ed4:	2b03      	cmp	r3, #3
 8004ed6:	d003      	beq.n	8004ee0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004ed8:	e018      	b.n	8004f0c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	73fb      	strb	r3, [r7, #15]
        break;
 8004ede:	e015      	b.n	8004f0c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00e      	beq.n	8004f0a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	73fb      	strb	r3, [r7, #15]
    break;
 8004ef0:	e00b      	b.n	8004f0a <DMA_CheckFifoParam+0xe6>
        break;
 8004ef2:	bf00      	nop
 8004ef4:	e00a      	b.n	8004f0c <DMA_CheckFifoParam+0xe8>
        break;
 8004ef6:	bf00      	nop
 8004ef8:	e008      	b.n	8004f0c <DMA_CheckFifoParam+0xe8>
        break;
 8004efa:	bf00      	nop
 8004efc:	e006      	b.n	8004f0c <DMA_CheckFifoParam+0xe8>
        break;
 8004efe:	bf00      	nop
 8004f00:	e004      	b.n	8004f0c <DMA_CheckFifoParam+0xe8>
        break;
 8004f02:	bf00      	nop
 8004f04:	e002      	b.n	8004f0c <DMA_CheckFifoParam+0xe8>
        break;
 8004f06:	bf00      	nop
 8004f08:	e000      	b.n	8004f0c <DMA_CheckFifoParam+0xe8>
    break;
 8004f0a:	bf00      	nop
    }
  }

  return status;
 8004f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3714      	adds	r7, #20
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop

08004f1c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a38      	ldr	r2, [pc, #224]	; (8005010 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d022      	beq.n	8004f7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a36      	ldr	r2, [pc, #216]	; (8005014 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d01d      	beq.n	8004f7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a35      	ldr	r2, [pc, #212]	; (8005018 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d018      	beq.n	8004f7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a33      	ldr	r2, [pc, #204]	; (800501c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d013      	beq.n	8004f7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a32      	ldr	r2, [pc, #200]	; (8005020 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d00e      	beq.n	8004f7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a30      	ldr	r2, [pc, #192]	; (8005024 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d009      	beq.n	8004f7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a2f      	ldr	r2, [pc, #188]	; (8005028 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d004      	beq.n	8004f7a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a2d      	ldr	r2, [pc, #180]	; (800502c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d101      	bne.n	8004f7e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e000      	b.n	8004f80 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004f7e:	2300      	movs	r3, #0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d01a      	beq.n	8004fba <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	3b08      	subs	r3, #8
 8004f8c:	4a28      	ldr	r2, [pc, #160]	; (8005030 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f92:	091b      	lsrs	r3, r3, #4
 8004f94:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	4b26      	ldr	r3, [pc, #152]	; (8005034 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004f9a:	4413      	add	r3, r2
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a24      	ldr	r2, [pc, #144]	; (8005038 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004fa8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f003 031f 	and.w	r3, r3, #31
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	409a      	lsls	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004fb8:	e024      	b.n	8005004 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	3b10      	subs	r3, #16
 8004fc2:	4a1e      	ldr	r2, [pc, #120]	; (800503c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc8:	091b      	lsrs	r3, r3, #4
 8004fca:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	4a1c      	ldr	r2, [pc, #112]	; (8005040 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d806      	bhi.n	8004fe2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	4a1b      	ldr	r2, [pc, #108]	; (8005044 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d902      	bls.n	8004fe2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	3308      	adds	r3, #8
 8004fe0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	4b18      	ldr	r3, [pc, #96]	; (8005048 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004fe6:	4413      	add	r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	461a      	mov	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a16      	ldr	r2, [pc, #88]	; (800504c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004ff4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f003 031f 	and.w	r3, r3, #31
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	409a      	lsls	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005004:	bf00      	nop
 8005006:	3714      	adds	r7, #20
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr
 8005010:	58025408 	.word	0x58025408
 8005014:	5802541c 	.word	0x5802541c
 8005018:	58025430 	.word	0x58025430
 800501c:	58025444 	.word	0x58025444
 8005020:	58025458 	.word	0x58025458
 8005024:	5802546c 	.word	0x5802546c
 8005028:	58025480 	.word	0x58025480
 800502c:	58025494 	.word	0x58025494
 8005030:	cccccccd 	.word	0xcccccccd
 8005034:	16009600 	.word	0x16009600
 8005038:	58025880 	.word	0x58025880
 800503c:	aaaaaaab 	.word	0xaaaaaaab
 8005040:	400204b8 	.word	0x400204b8
 8005044:	4002040f 	.word	0x4002040f
 8005048:	10008200 	.word	0x10008200
 800504c:	40020880 	.word	0x40020880

08005050 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	b2db      	uxtb	r3, r3
 800505e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d04a      	beq.n	80050fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2b08      	cmp	r3, #8
 800506a:	d847      	bhi.n	80050fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a25      	ldr	r2, [pc, #148]	; (8005108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d022      	beq.n	80050bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a24      	ldr	r2, [pc, #144]	; (800510c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d01d      	beq.n	80050bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a22      	ldr	r2, [pc, #136]	; (8005110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d018      	beq.n	80050bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a21      	ldr	r2, [pc, #132]	; (8005114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d013      	beq.n	80050bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a1f      	ldr	r2, [pc, #124]	; (8005118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d00e      	beq.n	80050bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a1e      	ldr	r2, [pc, #120]	; (800511c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d009      	beq.n	80050bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a1c      	ldr	r2, [pc, #112]	; (8005120 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d004      	beq.n	80050bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a1b      	ldr	r2, [pc, #108]	; (8005124 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d101      	bne.n	80050c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80050bc:	2301      	movs	r3, #1
 80050be:	e000      	b.n	80050c2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80050c0:	2300      	movs	r3, #0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00a      	beq.n	80050dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	4b17      	ldr	r3, [pc, #92]	; (8005128 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80050ca:	4413      	add	r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	461a      	mov	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a15      	ldr	r2, [pc, #84]	; (800512c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80050d8:	671a      	str	r2, [r3, #112]	; 0x70
 80050da:	e009      	b.n	80050f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	4b14      	ldr	r3, [pc, #80]	; (8005130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80050e0:	4413      	add	r3, r2
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	461a      	mov	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a11      	ldr	r2, [pc, #68]	; (8005134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80050ee:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	3b01      	subs	r3, #1
 80050f4:	2201      	movs	r2, #1
 80050f6:	409a      	lsls	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80050fc:	bf00      	nop
 80050fe:	3714      	adds	r7, #20
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr
 8005108:	58025408 	.word	0x58025408
 800510c:	5802541c 	.word	0x5802541c
 8005110:	58025430 	.word	0x58025430
 8005114:	58025444 	.word	0x58025444
 8005118:	58025458 	.word	0x58025458
 800511c:	5802546c 	.word	0x5802546c
 8005120:	58025480 	.word	0x58025480
 8005124:	58025494 	.word	0x58025494
 8005128:	1600963f 	.word	0x1600963f
 800512c:	58025940 	.word	0x58025940
 8005130:	1000823f 	.word	0x1000823f
 8005134:	40020940 	.word	0x40020940

08005138 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d101      	bne.n	800514a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e0cf      	b.n	80052ea <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005150:	2b00      	cmp	r3, #0
 8005152:	d106      	bne.n	8005162 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2223      	movs	r2, #35	; 0x23
 8005158:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f7fb feef 	bl	8000f40 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005162:	4b64      	ldr	r3, [pc, #400]	; (80052f4 <HAL_ETH_Init+0x1bc>)
 8005164:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005168:	4a62      	ldr	r2, [pc, #392]	; (80052f4 <HAL_ETH_Init+0x1bc>)
 800516a:	f043 0302 	orr.w	r3, r3, #2
 800516e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005172:	4b60      	ldr	r3, [pc, #384]	; (80052f4 <HAL_ETH_Init+0x1bc>)
 8005174:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005178:	f003 0302 	and.w	r3, r3, #2
 800517c:	60bb      	str	r3, [r7, #8]
 800517e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	7a1b      	ldrb	r3, [r3, #8]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d103      	bne.n	8005190 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8005188:	2000      	movs	r0, #0
 800518a:	f7fc f9df 	bl	800154c <HAL_SYSCFG_ETHInterfaceSelect>
 800518e:	e003      	b.n	8005198 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8005190:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8005194:	f7fc f9da 	bl	800154c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8005198:	4b57      	ldr	r3, [pc, #348]	; (80052f8 <HAL_ETH_Init+0x1c0>)
 800519a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	6812      	ldr	r2, [r2, #0]
 80051aa:	f043 0301 	orr.w	r3, r3, #1
 80051ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80051b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051b4:	f7fc f98e 	bl	80014d4 <HAL_GetTick>
 80051b8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80051ba:	e011      	b.n	80051e0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80051bc:	f7fc f98a 	bl	80014d4 <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80051ca:	d909      	bls.n	80051e0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2204      	movs	r2, #4
 80051d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	22e0      	movs	r2, #224	; 0xe0
 80051d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e084      	b.n	80052ea <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1e4      	bne.n	80051bc <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 f886 	bl	8005304 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80051f8:	f001 fedc 	bl	8006fb4 <HAL_RCC_GetHCLKFreq>
 80051fc:	4603      	mov	r3, r0
 80051fe:	4a3f      	ldr	r2, [pc, #252]	; (80052fc <HAL_ETH_Init+0x1c4>)
 8005200:	fba2 2303 	umull	r2, r3, r2, r3
 8005204:	0c9a      	lsrs	r2, r3, #18
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	3a01      	subs	r2, #1
 800520c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 fa71 	bl	80056f8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800521e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005222:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	6812      	ldr	r2, [r2, #0]
 800522a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800522e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005232:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	f003 0303 	and.w	r3, r3, #3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d009      	beq.n	8005256 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2201      	movs	r2, #1
 8005246:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	22e0      	movs	r2, #224	; 0xe0
 800524e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e049      	b.n	80052ea <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800525e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8005262:	4b27      	ldr	r3, [pc, #156]	; (8005300 <HAL_ETH_Init+0x1c8>)
 8005264:	4013      	ands	r3, r2
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	6952      	ldr	r2, [r2, #20]
 800526a:	0051      	lsls	r1, r2, #1
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	6812      	ldr	r2, [r2, #0]
 8005270:	430b      	orrs	r3, r1
 8005272:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005276:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 fad9 	bl	8005832 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 fb1f 	bl	80058c4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	3305      	adds	r3, #5
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	021a      	lsls	r2, r3, #8
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	3304      	adds	r3, #4
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	4619      	mov	r1, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	430a      	orrs	r2, r1
 80052a0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	3303      	adds	r3, #3
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	061a      	lsls	r2, r3, #24
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	3302      	adds	r3, #2
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	041b      	lsls	r3, r3, #16
 80052b8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	3301      	adds	r3, #1
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80052c4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80052d2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80052d4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2210      	movs	r2, #16
 80052e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3710      	adds	r7, #16
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	58024400 	.word	0x58024400
 80052f8:	58000400 	.word	0x58000400
 80052fc:	431bde83 	.word	0x431bde83
 8005300:	ffff8001 	.word	0xffff8001

08005304 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005314:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800531c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800531e:	f001 fe49 	bl	8006fb4 <HAL_RCC_GetHCLKFreq>
 8005322:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	4a1e      	ldr	r2, [pc, #120]	; (80053a0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d908      	bls.n	800533e <HAL_ETH_SetMDIOClockRange+0x3a>
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	4a1d      	ldr	r2, [pc, #116]	; (80053a4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d804      	bhi.n	800533e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800533a:	60fb      	str	r3, [r7, #12]
 800533c:	e027      	b.n	800538e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	4a18      	ldr	r2, [pc, #96]	; (80053a4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d908      	bls.n	8005358 <HAL_ETH_SetMDIOClockRange+0x54>
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	4a17      	ldr	r2, [pc, #92]	; (80053a8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d204      	bcs.n	8005358 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005354:	60fb      	str	r3, [r7, #12]
 8005356:	e01a      	b.n	800538e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	4a13      	ldr	r2, [pc, #76]	; (80053a8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d303      	bcc.n	8005368 <HAL_ETH_SetMDIOClockRange+0x64>
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	4a12      	ldr	r2, [pc, #72]	; (80053ac <HAL_ETH_SetMDIOClockRange+0xa8>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d911      	bls.n	800538c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	4a10      	ldr	r2, [pc, #64]	; (80053ac <HAL_ETH_SetMDIOClockRange+0xa8>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d908      	bls.n	8005382 <HAL_ETH_SetMDIOClockRange+0x7e>
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	4a0f      	ldr	r2, [pc, #60]	; (80053b0 <HAL_ETH_SetMDIOClockRange+0xac>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d804      	bhi.n	8005382 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800537e:	60fb      	str	r3, [r7, #12]
 8005380:	e005      	b.n	800538e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005388:	60fb      	str	r3, [r7, #12]
 800538a:	e000      	b.n	800538e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800538c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8005398:	bf00      	nop
 800539a:	3710      	adds	r7, #16
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	01312cff 	.word	0x01312cff
 80053a4:	02160ebf 	.word	0x02160ebf
 80053a8:	03938700 	.word	0x03938700
 80053ac:	05f5e0ff 	.word	0x05f5e0ff
 80053b0:	08f0d17f 	.word	0x08f0d17f

080053b4 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80053c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	791b      	ldrb	r3, [r3, #4]
 80053cc:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80053ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	7b1b      	ldrb	r3, [r3, #12]
 80053d4:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80053d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	7b5b      	ldrb	r3, [r3, #13]
 80053dc:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80053de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	7b9b      	ldrb	r3, [r3, #14]
 80053e4:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80053e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	7bdb      	ldrb	r3, [r3, #15]
 80053ec:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80053ee:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80053f0:	683a      	ldr	r2, [r7, #0]
 80053f2:	7c12      	ldrb	r2, [r2, #16]
 80053f4:	2a00      	cmp	r2, #0
 80053f6:	d102      	bne.n	80053fe <ETH_SetMACConfig+0x4a>
 80053f8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80053fc:	e000      	b.n	8005400 <ETH_SetMACConfig+0x4c>
 80053fe:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005400:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005402:	683a      	ldr	r2, [r7, #0]
 8005404:	7c52      	ldrb	r2, [r2, #17]
 8005406:	2a00      	cmp	r2, #0
 8005408:	d102      	bne.n	8005410 <ETH_SetMACConfig+0x5c>
 800540a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800540e:	e000      	b.n	8005412 <ETH_SetMACConfig+0x5e>
 8005410:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005412:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	7c9b      	ldrb	r3, [r3, #18]
 8005418:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800541a:	431a      	orrs	r2, r3
               macconf->Speed |
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8005420:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8005426:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	7f1b      	ldrb	r3, [r3, #28]
 800542c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800542e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	7f5b      	ldrb	r3, [r3, #29]
 8005434:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8005436:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005438:	683a      	ldr	r2, [r7, #0]
 800543a:	7f92      	ldrb	r2, [r2, #30]
 800543c:	2a00      	cmp	r2, #0
 800543e:	d102      	bne.n	8005446 <ETH_SetMACConfig+0x92>
 8005440:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005444:	e000      	b.n	8005448 <ETH_SetMACConfig+0x94>
 8005446:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005448:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	7fdb      	ldrb	r3, [r3, #31]
 800544e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005450:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8005452:	683a      	ldr	r2, [r7, #0]
 8005454:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005458:	2a00      	cmp	r2, #0
 800545a:	d102      	bne.n	8005462 <ETH_SetMACConfig+0xae>
 800545c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005460:	e000      	b.n	8005464 <ETH_SetMACConfig+0xb0>
 8005462:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005464:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800546a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005472:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8005474:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800547a:	4313      	orrs	r3, r2
 800547c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	4b56      	ldr	r3, [pc, #344]	; (80055e0 <ETH_SetMACConfig+0x22c>)
 8005486:	4013      	ands	r3, r2
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	6812      	ldr	r2, [r2, #0]
 800548c:	68f9      	ldr	r1, [r7, #12]
 800548e:	430b      	orrs	r3, r1
 8005490:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005496:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800549e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80054a0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80054a8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80054aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80054b2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80054b4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80054b6:	683a      	ldr	r2, [r7, #0]
 80054b8:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80054bc:	2a00      	cmp	r2, #0
 80054be:	d102      	bne.n	80054c6 <ETH_SetMACConfig+0x112>
 80054c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80054c4:	e000      	b.n	80054c8 <ETH_SetMACConfig+0x114>
 80054c6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80054c8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80054ce:	4313      	orrs	r3, r2
 80054d0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	685a      	ldr	r2, [r3, #4]
 80054d8:	4b42      	ldr	r3, [pc, #264]	; (80055e4 <ETH_SetMACConfig+0x230>)
 80054da:	4013      	ands	r3, r2
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	6812      	ldr	r2, [r2, #0]
 80054e0:	68f9      	ldr	r1, [r7, #12]
 80054e2:	430b      	orrs	r3, r1
 80054e4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054ec:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80054f2:	4313      	orrs	r3, r2
 80054f4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68da      	ldr	r2, [r3, #12]
 80054fc:	4b3a      	ldr	r3, [pc, #232]	; (80055e8 <ETH_SetMACConfig+0x234>)
 80054fe:	4013      	ands	r3, r2
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	6812      	ldr	r2, [r2, #0]
 8005504:	68f9      	ldr	r1, [r7, #12]
 8005506:	430b      	orrs	r3, r1
 8005508:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005510:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005516:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8005518:	683a      	ldr	r2, [r7, #0]
 800551a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800551e:	2a00      	cmp	r2, #0
 8005520:	d101      	bne.n	8005526 <ETH_SetMACConfig+0x172>
 8005522:	2280      	movs	r2, #128	; 0x80
 8005524:	e000      	b.n	8005528 <ETH_SetMACConfig+0x174>
 8005526:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005528:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800552e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005530:	4313      	orrs	r3, r2
 8005532:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800553a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800553e:	4013      	ands	r3, r2
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	6812      	ldr	r2, [r2, #0]
 8005544:	68f9      	ldr	r1, [r7, #12]
 8005546:	430b      	orrs	r3, r1
 8005548:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005550:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005558:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800555a:	4313      	orrs	r3, r2
 800555c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005566:	f023 0103 	bic.w	r1, r3, #3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	430a      	orrs	r2, r1
 8005572:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800557e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	430a      	orrs	r2, r1
 800558c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005594:	683a      	ldr	r2, [r7, #0]
 8005596:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800559a:	2a00      	cmp	r2, #0
 800559c:	d101      	bne.n	80055a2 <ETH_SetMACConfig+0x1ee>
 800559e:	2240      	movs	r2, #64	; 0x40
 80055a0:	e000      	b.n	80055a4 <ETH_SetMACConfig+0x1f0>
 80055a2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80055a4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80055ac:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80055ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80055b6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80055b8:	4313      	orrs	r3, r2
 80055ba:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80055c4:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	430a      	orrs	r2, r1
 80055d0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80055d4:	bf00      	nop
 80055d6:	3714      	adds	r7, #20
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr
 80055e0:	00048083 	.word	0x00048083
 80055e4:	c0f88000 	.word	0xc0f88000
 80055e8:	fffffef0 	.word	0xfffffef0

080055ec <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	4b38      	ldr	r3, [pc, #224]	; (80056e4 <ETH_SetDMAConfig+0xf8>)
 8005602:	4013      	ands	r3, r2
 8005604:	683a      	ldr	r2, [r7, #0]
 8005606:	6811      	ldr	r1, [r2, #0]
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	6812      	ldr	r2, [r2, #0]
 800560c:	430b      	orrs	r3, r1
 800560e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005612:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	791b      	ldrb	r3, [r3, #4]
 8005618:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800561e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	7b1b      	ldrb	r3, [r3, #12]
 8005624:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005626:	4313      	orrs	r3, r2
 8005628:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005632:	685a      	ldr	r2, [r3, #4]
 8005634:	4b2c      	ldr	r3, [pc, #176]	; (80056e8 <ETH_SetDMAConfig+0xfc>)
 8005636:	4013      	ands	r3, r2
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	6812      	ldr	r2, [r2, #0]
 800563c:	68f9      	ldr	r1, [r7, #12]
 800563e:	430b      	orrs	r3, r1
 8005640:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005644:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	7b5b      	ldrb	r3, [r3, #13]
 800564a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005650:	4313      	orrs	r3, r2
 8005652:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800565c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8005660:	4b22      	ldr	r3, [pc, #136]	; (80056ec <ETH_SetDMAConfig+0x100>)
 8005662:	4013      	ands	r3, r2
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	6812      	ldr	r2, [r2, #0]
 8005668:	68f9      	ldr	r1, [r7, #12]
 800566a:	430b      	orrs	r3, r1
 800566c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005670:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	7d1b      	ldrb	r3, [r3, #20]
 800567c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800567e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	7f5b      	ldrb	r3, [r3, #29]
 8005684:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8005686:	4313      	orrs	r3, r2
 8005688:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005692:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8005696:	4b16      	ldr	r3, [pc, #88]	; (80056f0 <ETH_SetDMAConfig+0x104>)
 8005698:	4013      	ands	r3, r2
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	6812      	ldr	r2, [r2, #0]
 800569e:	68f9      	ldr	r1, [r7, #12]
 80056a0:	430b      	orrs	r3, r1
 80056a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80056a6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	7f1b      	ldrb	r3, [r3, #28]
 80056ae:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80056b4:	4313      	orrs	r3, r2
 80056b6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056c0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80056c4:	4b0b      	ldr	r3, [pc, #44]	; (80056f4 <ETH_SetDMAConfig+0x108>)
 80056c6:	4013      	ands	r3, r2
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	6812      	ldr	r2, [r2, #0]
 80056cc:	68f9      	ldr	r1, [r7, #12]
 80056ce:	430b      	orrs	r3, r1
 80056d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80056d4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80056d8:	bf00      	nop
 80056da:	3714      	adds	r7, #20
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr
 80056e4:	ffff87fd 	.word	0xffff87fd
 80056e8:	ffff2ffe 	.word	0xffff2ffe
 80056ec:	fffec000 	.word	0xfffec000
 80056f0:	ffc0efef 	.word	0xffc0efef
 80056f4:	7fc0ffff 	.word	0x7fc0ffff

080056f8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b0a4      	sub	sp, #144	; 0x90
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005700:	2301      	movs	r3, #1
 8005702:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005706:	2300      	movs	r3, #0
 8005708:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800570a:	2300      	movs	r3, #0
 800570c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005710:	2300      	movs	r3, #0
 8005712:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8005716:	2301      	movs	r3, #1
 8005718:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800571c:	2301      	movs	r3, #1
 800571e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005722:	2301      	movs	r3, #1
 8005724:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005728:	2300      	movs	r3, #0
 800572a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800572e:	2301      	movs	r3, #1
 8005730:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005734:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005738:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800573a:	2300      	movs	r3, #0
 800573c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8005740:	2300      	movs	r3, #0
 8005742:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005744:	2300      	movs	r3, #0
 8005746:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800574a:	2300      	movs	r3, #0
 800574c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8005750:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005754:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8005756:	2300      	movs	r3, #0
 8005758:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800575c:	2300      	movs	r3, #0
 800575e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8005760:	2301      	movs	r3, #1
 8005762:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005766:	2300      	movs	r3, #0
 8005768:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800576c:	2300      	movs	r3, #0
 800576e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005772:	2300      	movs	r3, #0
 8005774:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8005776:	2300      	movs	r3, #0
 8005778:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800577a:	2300      	movs	r3, #0
 800577c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800577e:	2300      	movs	r3, #0
 8005780:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005784:	2300      	movs	r3, #0
 8005786:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800578a:	2301      	movs	r3, #1
 800578c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005790:	2320      	movs	r3, #32
 8005792:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8005796:	2301      	movs	r3, #1
 8005798:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800579c:	2300      	movs	r3, #0
 800579e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80057a2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80057a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80057a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80057ac:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80057ae:	2300      	movs	r3, #0
 80057b0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80057b4:	2302      	movs	r3, #2
 80057b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80057ba:	2300      	movs	r3, #0
 80057bc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80057c0:	2300      	movs	r3, #0
 80057c2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80057c6:	2300      	movs	r3, #0
 80057c8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80057cc:	2301      	movs	r3, #1
 80057ce:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80057d2:	2300      	movs	r3, #0
 80057d4:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80057d6:	2301      	movs	r3, #1
 80057d8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80057dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80057e0:	4619      	mov	r1, r3
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f7ff fde6 	bl	80053b4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80057e8:	2301      	movs	r3, #1
 80057ea:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80057ec:	2301      	movs	r3, #1
 80057ee:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80057f0:	2300      	movs	r3, #0
 80057f2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80057f4:	2300      	movs	r3, #0
 80057f6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80057fa:	2300      	movs	r3, #0
 80057fc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80057fe:	2300      	movs	r3, #0
 8005800:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005802:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005806:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005808:	2300      	movs	r3, #0
 800580a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800580c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005810:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005812:	2300      	movs	r3, #0
 8005814:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8005818:	f44f 7306 	mov.w	r3, #536	; 0x218
 800581c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800581e:	f107 0308 	add.w	r3, r7, #8
 8005822:	4619      	mov	r1, r3
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f7ff fee1 	bl	80055ec <ETH_SetDMAConfig>
}
 800582a:	bf00      	nop
 800582c:	3790      	adds	r7, #144	; 0x90
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005832:	b480      	push	{r7}
 8005834:	b085      	sub	sp, #20
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800583a:	2300      	movs	r3, #0
 800583c:	60fb      	str	r3, [r7, #12]
 800583e:	e01d      	b.n	800587c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	68d9      	ldr	r1, [r3, #12]
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	4613      	mov	r3, r2
 8005848:	005b      	lsls	r3, r3, #1
 800584a:	4413      	add	r3, r2
 800584c:	00db      	lsls	r3, r3, #3
 800584e:	440b      	add	r3, r1
 8005850:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	2200      	movs	r2, #0
 8005856:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	2200      	movs	r2, #0
 800585c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	2200      	movs	r2, #0
 8005862:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	2200      	movs	r2, #0
 8005868:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800586a:	68b9      	ldr	r1, [r7, #8]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	3206      	adds	r2, #6
 8005872:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	3301      	adds	r3, #1
 800587a:	60fb      	str	r3, [r7, #12]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2b03      	cmp	r3, #3
 8005880:	d9de      	bls.n	8005840 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005890:	461a      	mov	r2, r3
 8005892:	2303      	movs	r3, #3
 8005894:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	68da      	ldr	r2, [r3, #12]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058a4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68da      	ldr	r2, [r3, #12]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058b4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80058b8:	bf00      	nop
 80058ba:	3714      	adds	r7, #20
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80058cc:	2300      	movs	r3, #0
 80058ce:	60fb      	str	r3, [r7, #12]
 80058d0:	e023      	b.n	800591a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6919      	ldr	r1, [r3, #16]
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	4613      	mov	r3, r2
 80058da:	005b      	lsls	r3, r3, #1
 80058dc:	4413      	add	r3, r2
 80058de:	00db      	lsls	r3, r3, #3
 80058e0:	440b      	add	r3, r1
 80058e2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	2200      	movs	r2, #0
 80058e8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	2200      	movs	r2, #0
 80058ee:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	2200      	movs	r2, #0
 80058f4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	2200      	movs	r2, #0
 80058fa:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	2200      	movs	r2, #0
 8005900:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	2200      	movs	r2, #0
 8005906:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005908:	68b9      	ldr	r1, [r7, #8]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	3212      	adds	r2, #18
 8005910:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	3301      	adds	r3, #1
 8005918:	60fb      	str	r3, [r7, #12]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2b03      	cmp	r3, #3
 800591e:	d9d8      	bls.n	80058d2 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005946:	461a      	mov	r2, r3
 8005948:	2303      	movs	r3, #3
 800594a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	691a      	ldr	r2, [r3, #16]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800595a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800596e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8005972:	bf00      	nop
 8005974:	3714      	adds	r7, #20
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
	...

08005980 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005980:	b480      	push	{r7}
 8005982:	b089      	sub	sp, #36	; 0x24
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800598a:	2300      	movs	r3, #0
 800598c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800598e:	4b89      	ldr	r3, [pc, #548]	; (8005bb4 <HAL_GPIO_Init+0x234>)
 8005990:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005992:	e194      	b.n	8005cbe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	2101      	movs	r1, #1
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	fa01 f303 	lsl.w	r3, r1, r3
 80059a0:	4013      	ands	r3, r2
 80059a2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	f000 8186 	beq.w	8005cb8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f003 0303 	and.w	r3, r3, #3
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d005      	beq.n	80059c4 <HAL_GPIO_Init+0x44>
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	f003 0303 	and.w	r3, r3, #3
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d130      	bne.n	8005a26 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	005b      	lsls	r3, r3, #1
 80059ce:	2203      	movs	r2, #3
 80059d0:	fa02 f303 	lsl.w	r3, r2, r3
 80059d4:	43db      	mvns	r3, r3
 80059d6:	69ba      	ldr	r2, [r7, #24]
 80059d8:	4013      	ands	r3, r2
 80059da:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	68da      	ldr	r2, [r3, #12]
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	005b      	lsls	r3, r3, #1
 80059e4:	fa02 f303 	lsl.w	r3, r2, r3
 80059e8:	69ba      	ldr	r2, [r7, #24]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	69ba      	ldr	r2, [r7, #24]
 80059f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80059fa:	2201      	movs	r2, #1
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005a02:	43db      	mvns	r3, r3
 8005a04:	69ba      	ldr	r2, [r7, #24]
 8005a06:	4013      	ands	r3, r2
 8005a08:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	091b      	lsrs	r3, r3, #4
 8005a10:	f003 0201 	and.w	r2, r3, #1
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1a:	69ba      	ldr	r2, [r7, #24]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	69ba      	ldr	r2, [r7, #24]
 8005a24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	f003 0303 	and.w	r3, r3, #3
 8005a2e:	2b03      	cmp	r3, #3
 8005a30:	d017      	beq.n	8005a62 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	005b      	lsls	r3, r3, #1
 8005a3c:	2203      	movs	r2, #3
 8005a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a42:	43db      	mvns	r3, r3
 8005a44:	69ba      	ldr	r2, [r7, #24]
 8005a46:	4013      	ands	r3, r2
 8005a48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	689a      	ldr	r2, [r3, #8]
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	005b      	lsls	r3, r3, #1
 8005a52:	fa02 f303 	lsl.w	r3, r2, r3
 8005a56:	69ba      	ldr	r2, [r7, #24]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	69ba      	ldr	r2, [r7, #24]
 8005a60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f003 0303 	and.w	r3, r3, #3
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d123      	bne.n	8005ab6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	08da      	lsrs	r2, r3, #3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	3208      	adds	r2, #8
 8005a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	f003 0307 	and.w	r3, r3, #7
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	220f      	movs	r2, #15
 8005a86:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8a:	43db      	mvns	r3, r3
 8005a8c:	69ba      	ldr	r2, [r7, #24]
 8005a8e:	4013      	ands	r3, r2
 8005a90:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	691a      	ldr	r2, [r3, #16]
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	f003 0307 	and.w	r3, r3, #7
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa2:	69ba      	ldr	r2, [r7, #24]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	08da      	lsrs	r2, r3, #3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	3208      	adds	r2, #8
 8005ab0:	69b9      	ldr	r1, [r7, #24]
 8005ab2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	005b      	lsls	r3, r3, #1
 8005ac0:	2203      	movs	r2, #3
 8005ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac6:	43db      	mvns	r3, r3
 8005ac8:	69ba      	ldr	r2, [r7, #24]
 8005aca:	4013      	ands	r3, r2
 8005acc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	f003 0203 	and.w	r2, r3, #3
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	005b      	lsls	r3, r3, #1
 8005ada:	fa02 f303 	lsl.w	r3, r2, r3
 8005ade:	69ba      	ldr	r2, [r7, #24]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	69ba      	ldr	r2, [r7, #24]
 8005ae8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	f000 80e0 	beq.w	8005cb8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005af8:	4b2f      	ldr	r3, [pc, #188]	; (8005bb8 <HAL_GPIO_Init+0x238>)
 8005afa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005afe:	4a2e      	ldr	r2, [pc, #184]	; (8005bb8 <HAL_GPIO_Init+0x238>)
 8005b00:	f043 0302 	orr.w	r3, r3, #2
 8005b04:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005b08:	4b2b      	ldr	r3, [pc, #172]	; (8005bb8 <HAL_GPIO_Init+0x238>)
 8005b0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b0e:	f003 0302 	and.w	r3, r3, #2
 8005b12:	60fb      	str	r3, [r7, #12]
 8005b14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b16:	4a29      	ldr	r2, [pc, #164]	; (8005bbc <HAL_GPIO_Init+0x23c>)
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	089b      	lsrs	r3, r3, #2
 8005b1c:	3302      	adds	r3, #2
 8005b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	f003 0303 	and.w	r3, r3, #3
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	220f      	movs	r2, #15
 8005b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b32:	43db      	mvns	r3, r3
 8005b34:	69ba      	ldr	r2, [r7, #24]
 8005b36:	4013      	ands	r3, r2
 8005b38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a20      	ldr	r2, [pc, #128]	; (8005bc0 <HAL_GPIO_Init+0x240>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d052      	beq.n	8005be8 <HAL_GPIO_Init+0x268>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a1f      	ldr	r2, [pc, #124]	; (8005bc4 <HAL_GPIO_Init+0x244>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d031      	beq.n	8005bae <HAL_GPIO_Init+0x22e>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a1e      	ldr	r2, [pc, #120]	; (8005bc8 <HAL_GPIO_Init+0x248>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d02b      	beq.n	8005baa <HAL_GPIO_Init+0x22a>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a1d      	ldr	r2, [pc, #116]	; (8005bcc <HAL_GPIO_Init+0x24c>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d025      	beq.n	8005ba6 <HAL_GPIO_Init+0x226>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a1c      	ldr	r2, [pc, #112]	; (8005bd0 <HAL_GPIO_Init+0x250>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d01f      	beq.n	8005ba2 <HAL_GPIO_Init+0x222>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a1b      	ldr	r2, [pc, #108]	; (8005bd4 <HAL_GPIO_Init+0x254>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d019      	beq.n	8005b9e <HAL_GPIO_Init+0x21e>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a1a      	ldr	r2, [pc, #104]	; (8005bd8 <HAL_GPIO_Init+0x258>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d013      	beq.n	8005b9a <HAL_GPIO_Init+0x21a>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a19      	ldr	r2, [pc, #100]	; (8005bdc <HAL_GPIO_Init+0x25c>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d00d      	beq.n	8005b96 <HAL_GPIO_Init+0x216>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a18      	ldr	r2, [pc, #96]	; (8005be0 <HAL_GPIO_Init+0x260>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d007      	beq.n	8005b92 <HAL_GPIO_Init+0x212>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a17      	ldr	r2, [pc, #92]	; (8005be4 <HAL_GPIO_Init+0x264>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d101      	bne.n	8005b8e <HAL_GPIO_Init+0x20e>
 8005b8a:	2309      	movs	r3, #9
 8005b8c:	e02d      	b.n	8005bea <HAL_GPIO_Init+0x26a>
 8005b8e:	230a      	movs	r3, #10
 8005b90:	e02b      	b.n	8005bea <HAL_GPIO_Init+0x26a>
 8005b92:	2308      	movs	r3, #8
 8005b94:	e029      	b.n	8005bea <HAL_GPIO_Init+0x26a>
 8005b96:	2307      	movs	r3, #7
 8005b98:	e027      	b.n	8005bea <HAL_GPIO_Init+0x26a>
 8005b9a:	2306      	movs	r3, #6
 8005b9c:	e025      	b.n	8005bea <HAL_GPIO_Init+0x26a>
 8005b9e:	2305      	movs	r3, #5
 8005ba0:	e023      	b.n	8005bea <HAL_GPIO_Init+0x26a>
 8005ba2:	2304      	movs	r3, #4
 8005ba4:	e021      	b.n	8005bea <HAL_GPIO_Init+0x26a>
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e01f      	b.n	8005bea <HAL_GPIO_Init+0x26a>
 8005baa:	2302      	movs	r3, #2
 8005bac:	e01d      	b.n	8005bea <HAL_GPIO_Init+0x26a>
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e01b      	b.n	8005bea <HAL_GPIO_Init+0x26a>
 8005bb2:	bf00      	nop
 8005bb4:	58000080 	.word	0x58000080
 8005bb8:	58024400 	.word	0x58024400
 8005bbc:	58000400 	.word	0x58000400
 8005bc0:	58020000 	.word	0x58020000
 8005bc4:	58020400 	.word	0x58020400
 8005bc8:	58020800 	.word	0x58020800
 8005bcc:	58020c00 	.word	0x58020c00
 8005bd0:	58021000 	.word	0x58021000
 8005bd4:	58021400 	.word	0x58021400
 8005bd8:	58021800 	.word	0x58021800
 8005bdc:	58021c00 	.word	0x58021c00
 8005be0:	58022000 	.word	0x58022000
 8005be4:	58022400 	.word	0x58022400
 8005be8:	2300      	movs	r3, #0
 8005bea:	69fa      	ldr	r2, [r7, #28]
 8005bec:	f002 0203 	and.w	r2, r2, #3
 8005bf0:	0092      	lsls	r2, r2, #2
 8005bf2:	4093      	lsls	r3, r2
 8005bf4:	69ba      	ldr	r2, [r7, #24]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005bfa:	4938      	ldr	r1, [pc, #224]	; (8005cdc <HAL_GPIO_Init+0x35c>)
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	089b      	lsrs	r3, r3, #2
 8005c00:	3302      	adds	r3, #2
 8005c02:	69ba      	ldr	r2, [r7, #24]
 8005c04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	43db      	mvns	r3, r3
 8005c14:	69ba      	ldr	r2, [r7, #24]
 8005c16:	4013      	ands	r3, r2
 8005c18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d003      	beq.n	8005c2e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005c26:	69ba      	ldr	r2, [r7, #24]
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005c2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005c36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	43db      	mvns	r3, r3
 8005c42:	69ba      	ldr	r2, [r7, #24]
 8005c44:	4013      	ands	r3, r2
 8005c46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d003      	beq.n	8005c5c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005c54:	69ba      	ldr	r2, [r7, #24]
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005c5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	43db      	mvns	r3, r3
 8005c6e:	69ba      	ldr	r2, [r7, #24]
 8005c70:	4013      	ands	r3, r2
 8005c72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d003      	beq.n	8005c88 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005c80:	69ba      	ldr	r2, [r7, #24]
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	69ba      	ldr	r2, [r7, #24]
 8005c8c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	43db      	mvns	r3, r3
 8005c98:	69ba      	ldr	r2, [r7, #24]
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d003      	beq.n	8005cb2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005caa:	69ba      	ldr	r2, [r7, #24]
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	69ba      	ldr	r2, [r7, #24]
 8005cb6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	3301      	adds	r3, #1
 8005cbc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	f47f ae63 	bne.w	8005994 <HAL_GPIO_Init+0x14>
  }
}
 8005cce:	bf00      	nop
 8005cd0:	bf00      	nop
 8005cd2:	3724      	adds	r7, #36	; 0x24
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr
 8005cdc:	58000400 	.word	0x58000400

08005ce0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005ce8:	4a08      	ldr	r2, [pc, #32]	; (8005d0c <HAL_HSEM_FastTake+0x2c>)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	3320      	adds	r3, #32
 8005cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cf2:	4a07      	ldr	r2, [pc, #28]	; (8005d10 <HAL_HSEM_FastTake+0x30>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d101      	bne.n	8005cfc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	e000      	b.n	8005cfe <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	370c      	adds	r7, #12
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	58026400 	.word	0x58026400
 8005d10:	80000300 	.word	0x80000300

08005d14 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005d1e:	4906      	ldr	r1, [pc, #24]	; (8005d38 <HAL_HSEM_Release+0x24>)
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005d2c:	bf00      	nop
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr
 8005d38:	58026400 	.word	0x58026400

08005d3c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d3e:	b08f      	sub	sp, #60	; 0x3c
 8005d40:	af0a      	add	r7, sp, #40	; 0x28
 8005d42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d101      	bne.n	8005d4e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e116      	b.n	8005f7c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d106      	bne.n	8005d6e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f7fb fa43 	bl	80011f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2203      	movs	r2, #3
 8005d72:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d102      	bne.n	8005d88 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f005 fac5 	bl	800b31c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	603b      	str	r3, [r7, #0]
 8005d98:	687e      	ldr	r6, [r7, #4]
 8005d9a:	466d      	mov	r5, sp
 8005d9c:	f106 0410 	add.w	r4, r6, #16
 8005da0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005da2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005da4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005da6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005da8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005dac:	e885 0003 	stmia.w	r5, {r0, r1}
 8005db0:	1d33      	adds	r3, r6, #4
 8005db2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005db4:	6838      	ldr	r0, [r7, #0]
 8005db6:	f005 fa43 	bl	800b240 <USB_CoreInit>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d005      	beq.n	8005dcc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2202      	movs	r2, #2
 8005dc4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e0d7      	b.n	8005f7c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2100      	movs	r1, #0
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f005 fab3 	bl	800b33e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005dd8:	2300      	movs	r3, #0
 8005dda:	73fb      	strb	r3, [r7, #15]
 8005ddc:	e04a      	b.n	8005e74 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005dde:	7bfa      	ldrb	r2, [r7, #15]
 8005de0:	6879      	ldr	r1, [r7, #4]
 8005de2:	4613      	mov	r3, r2
 8005de4:	00db      	lsls	r3, r3, #3
 8005de6:	4413      	add	r3, r2
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	440b      	add	r3, r1
 8005dec:	333d      	adds	r3, #61	; 0x3d
 8005dee:	2201      	movs	r2, #1
 8005df0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005df2:	7bfa      	ldrb	r2, [r7, #15]
 8005df4:	6879      	ldr	r1, [r7, #4]
 8005df6:	4613      	mov	r3, r2
 8005df8:	00db      	lsls	r3, r3, #3
 8005dfa:	4413      	add	r3, r2
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	440b      	add	r3, r1
 8005e00:	333c      	adds	r3, #60	; 0x3c
 8005e02:	7bfa      	ldrb	r2, [r7, #15]
 8005e04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005e06:	7bfa      	ldrb	r2, [r7, #15]
 8005e08:	7bfb      	ldrb	r3, [r7, #15]
 8005e0a:	b298      	uxth	r0, r3
 8005e0c:	6879      	ldr	r1, [r7, #4]
 8005e0e:	4613      	mov	r3, r2
 8005e10:	00db      	lsls	r3, r3, #3
 8005e12:	4413      	add	r3, r2
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	440b      	add	r3, r1
 8005e18:	3356      	adds	r3, #86	; 0x56
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005e1e:	7bfa      	ldrb	r2, [r7, #15]
 8005e20:	6879      	ldr	r1, [r7, #4]
 8005e22:	4613      	mov	r3, r2
 8005e24:	00db      	lsls	r3, r3, #3
 8005e26:	4413      	add	r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	440b      	add	r3, r1
 8005e2c:	3340      	adds	r3, #64	; 0x40
 8005e2e:	2200      	movs	r2, #0
 8005e30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005e32:	7bfa      	ldrb	r2, [r7, #15]
 8005e34:	6879      	ldr	r1, [r7, #4]
 8005e36:	4613      	mov	r3, r2
 8005e38:	00db      	lsls	r3, r3, #3
 8005e3a:	4413      	add	r3, r2
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	440b      	add	r3, r1
 8005e40:	3344      	adds	r3, #68	; 0x44
 8005e42:	2200      	movs	r2, #0
 8005e44:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005e46:	7bfa      	ldrb	r2, [r7, #15]
 8005e48:	6879      	ldr	r1, [r7, #4]
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	00db      	lsls	r3, r3, #3
 8005e4e:	4413      	add	r3, r2
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	440b      	add	r3, r1
 8005e54:	3348      	adds	r3, #72	; 0x48
 8005e56:	2200      	movs	r2, #0
 8005e58:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005e5a:	7bfa      	ldrb	r2, [r7, #15]
 8005e5c:	6879      	ldr	r1, [r7, #4]
 8005e5e:	4613      	mov	r3, r2
 8005e60:	00db      	lsls	r3, r3, #3
 8005e62:	4413      	add	r3, r2
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	440b      	add	r3, r1
 8005e68:	334c      	adds	r3, #76	; 0x4c
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e6e:	7bfb      	ldrb	r3, [r7, #15]
 8005e70:	3301      	adds	r3, #1
 8005e72:	73fb      	strb	r3, [r7, #15]
 8005e74:	7bfa      	ldrb	r2, [r7, #15]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d3af      	bcc.n	8005dde <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e7e:	2300      	movs	r3, #0
 8005e80:	73fb      	strb	r3, [r7, #15]
 8005e82:	e044      	b.n	8005f0e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005e84:	7bfa      	ldrb	r2, [r7, #15]
 8005e86:	6879      	ldr	r1, [r7, #4]
 8005e88:	4613      	mov	r3, r2
 8005e8a:	00db      	lsls	r3, r3, #3
 8005e8c:	4413      	add	r3, r2
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	440b      	add	r3, r1
 8005e92:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005e96:	2200      	movs	r2, #0
 8005e98:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005e9a:	7bfa      	ldrb	r2, [r7, #15]
 8005e9c:	6879      	ldr	r1, [r7, #4]
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	00db      	lsls	r3, r3, #3
 8005ea2:	4413      	add	r3, r2
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	440b      	add	r3, r1
 8005ea8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005eac:	7bfa      	ldrb	r2, [r7, #15]
 8005eae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005eb0:	7bfa      	ldrb	r2, [r7, #15]
 8005eb2:	6879      	ldr	r1, [r7, #4]
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	00db      	lsls	r3, r3, #3
 8005eb8:	4413      	add	r3, r2
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	440b      	add	r3, r1
 8005ebe:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005ec6:	7bfa      	ldrb	r2, [r7, #15]
 8005ec8:	6879      	ldr	r1, [r7, #4]
 8005eca:	4613      	mov	r3, r2
 8005ecc:	00db      	lsls	r3, r3, #3
 8005ece:	4413      	add	r3, r2
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	440b      	add	r3, r1
 8005ed4:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8005ed8:	2200      	movs	r2, #0
 8005eda:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005edc:	7bfa      	ldrb	r2, [r7, #15]
 8005ede:	6879      	ldr	r1, [r7, #4]
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	00db      	lsls	r3, r3, #3
 8005ee4:	4413      	add	r3, r2
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	440b      	add	r3, r1
 8005eea:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005eee:	2200      	movs	r2, #0
 8005ef0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005ef2:	7bfa      	ldrb	r2, [r7, #15]
 8005ef4:	6879      	ldr	r1, [r7, #4]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	00db      	lsls	r3, r3, #3
 8005efa:	4413      	add	r3, r2
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	440b      	add	r3, r1
 8005f00:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005f04:	2200      	movs	r2, #0
 8005f06:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f08:	7bfb      	ldrb	r3, [r7, #15]
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	73fb      	strb	r3, [r7, #15]
 8005f0e:	7bfa      	ldrb	r2, [r7, #15]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d3b5      	bcc.n	8005e84 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	603b      	str	r3, [r7, #0]
 8005f1e:	687e      	ldr	r6, [r7, #4]
 8005f20:	466d      	mov	r5, sp
 8005f22:	f106 0410 	add.w	r4, r6, #16
 8005f26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f2e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005f32:	e885 0003 	stmia.w	r5, {r0, r1}
 8005f36:	1d33      	adds	r3, r6, #4
 8005f38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f3a:	6838      	ldr	r0, [r7, #0]
 8005f3c:	f005 fa4c 	bl	800b3d8 <USB_DevInit>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d005      	beq.n	8005f52 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2202      	movs	r2, #2
 8005f4a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e014      	b.n	8005f7c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d102      	bne.n	8005f70 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 f80a 	bl	8005f84 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4618      	mov	r0, r3
 8005f76:	f005 fc0a 	bl	800b78e <USB_DevDisconnect>

  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3714      	adds	r7, #20
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005f84 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2201      	movs	r2, #1
 8005f96:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	699b      	ldr	r3, [r3, #24]
 8005fa6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fb2:	4b05      	ldr	r3, [pc, #20]	; (8005fc8 <HAL_PCDEx_ActivateLPM+0x44>)
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	68fa      	ldr	r2, [r7, #12]
 8005fb8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3714      	adds	r7, #20
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr
 8005fc8:	10000003 	.word	0x10000003

08005fcc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005fd4:	4b29      	ldr	r3, [pc, #164]	; (800607c <HAL_PWREx_ConfigSupply+0xb0>)
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	f003 0307 	and.w	r3, r3, #7
 8005fdc:	2b06      	cmp	r3, #6
 8005fde:	d00a      	beq.n	8005ff6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005fe0:	4b26      	ldr	r3, [pc, #152]	; (800607c <HAL_PWREx_ConfigSupply+0xb0>)
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d001      	beq.n	8005ff2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e040      	b.n	8006074 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	e03e      	b.n	8006074 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005ff6:	4b21      	ldr	r3, [pc, #132]	; (800607c <HAL_PWREx_ConfigSupply+0xb0>)
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005ffe:	491f      	ldr	r1, [pc, #124]	; (800607c <HAL_PWREx_ConfigSupply+0xb0>)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4313      	orrs	r3, r2
 8006004:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006006:	f7fb fa65 	bl	80014d4 <HAL_GetTick>
 800600a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800600c:	e009      	b.n	8006022 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800600e:	f7fb fa61 	bl	80014d4 <HAL_GetTick>
 8006012:	4602      	mov	r2, r0
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	1ad3      	subs	r3, r2, r3
 8006018:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800601c:	d901      	bls.n	8006022 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e028      	b.n	8006074 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006022:	4b16      	ldr	r3, [pc, #88]	; (800607c <HAL_PWREx_ConfigSupply+0xb0>)
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800602a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800602e:	d1ee      	bne.n	800600e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2b1e      	cmp	r3, #30
 8006034:	d008      	beq.n	8006048 <HAL_PWREx_ConfigSupply+0x7c>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2b2e      	cmp	r3, #46	; 0x2e
 800603a:	d005      	beq.n	8006048 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2b1d      	cmp	r3, #29
 8006040:	d002      	beq.n	8006048 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2b2d      	cmp	r3, #45	; 0x2d
 8006046:	d114      	bne.n	8006072 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006048:	f7fb fa44 	bl	80014d4 <HAL_GetTick>
 800604c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800604e:	e009      	b.n	8006064 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006050:	f7fb fa40 	bl	80014d4 <HAL_GetTick>
 8006054:	4602      	mov	r2, r0
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800605e:	d901      	bls.n	8006064 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	e007      	b.n	8006074 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006064:	4b05      	ldr	r3, [pc, #20]	; (800607c <HAL_PWREx_ConfigSupply+0xb0>)
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800606c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006070:	d1ee      	bne.n	8006050 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3710      	adds	r7, #16
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	58024800 	.word	0x58024800

08006080 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006080:	b480      	push	{r7}
 8006082:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006084:	4b05      	ldr	r3, [pc, #20]	; (800609c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	4a04      	ldr	r2, [pc, #16]	; (800609c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800608a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800608e:	60d3      	str	r3, [r2, #12]
}
 8006090:	bf00      	nop
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	58024800 	.word	0x58024800

080060a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b08c      	sub	sp, #48	; 0x30
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d102      	bne.n	80060b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	f000 bc48 	b.w	8006944 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0301 	and.w	r3, r3, #1
 80060bc:	2b00      	cmp	r3, #0
 80060be:	f000 8088 	beq.w	80061d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060c2:	4b99      	ldr	r3, [pc, #612]	; (8006328 <HAL_RCC_OscConfig+0x288>)
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80060cc:	4b96      	ldr	r3, [pc, #600]	; (8006328 <HAL_RCC_OscConfig+0x288>)
 80060ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80060d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d4:	2b10      	cmp	r3, #16
 80060d6:	d007      	beq.n	80060e8 <HAL_RCC_OscConfig+0x48>
 80060d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060da:	2b18      	cmp	r3, #24
 80060dc:	d111      	bne.n	8006102 <HAL_RCC_OscConfig+0x62>
 80060de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e0:	f003 0303 	and.w	r3, r3, #3
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d10c      	bne.n	8006102 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060e8:	4b8f      	ldr	r3, [pc, #572]	; (8006328 <HAL_RCC_OscConfig+0x288>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d06d      	beq.n	80061d0 <HAL_RCC_OscConfig+0x130>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d169      	bne.n	80061d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	f000 bc21 	b.w	8006944 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800610a:	d106      	bne.n	800611a <HAL_RCC_OscConfig+0x7a>
 800610c:	4b86      	ldr	r3, [pc, #536]	; (8006328 <HAL_RCC_OscConfig+0x288>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a85      	ldr	r2, [pc, #532]	; (8006328 <HAL_RCC_OscConfig+0x288>)
 8006112:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006116:	6013      	str	r3, [r2, #0]
 8006118:	e02e      	b.n	8006178 <HAL_RCC_OscConfig+0xd8>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10c      	bne.n	800613c <HAL_RCC_OscConfig+0x9c>
 8006122:	4b81      	ldr	r3, [pc, #516]	; (8006328 <HAL_RCC_OscConfig+0x288>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a80      	ldr	r2, [pc, #512]	; (8006328 <HAL_RCC_OscConfig+0x288>)
 8006128:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800612c:	6013      	str	r3, [r2, #0]
 800612e:	4b7e      	ldr	r3, [pc, #504]	; (8006328 <HAL_RCC_OscConfig+0x288>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a7d      	ldr	r2, [pc, #500]	; (8006328 <HAL_RCC_OscConfig+0x288>)
 8006134:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006138:	6013      	str	r3, [r2, #0]
 800613a:	e01d      	b.n	8006178 <HAL_RCC_OscConfig+0xd8>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006144:	d10c      	bne.n	8006160 <HAL_RCC_OscConfig+0xc0>
 8006146:	4b78      	ldr	r3, [pc, #480]	; (8006328 <HAL_RCC_OscConfig+0x288>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a77      	ldr	r2, [pc, #476]	; (8006328 <HAL_RCC_OscConfig+0x288>)
 800614c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006150:	6013      	str	r3, [r2, #0]
 8006152:	4b75      	ldr	r3, [pc, #468]	; (8006328 <HAL_RCC_OscConfig+0x288>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a74      	ldr	r2, [pc, #464]	; (8006328 <HAL_RCC_OscConfig+0x288>)
 8006158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800615c:	6013      	str	r3, [r2, #0]
 800615e:	e00b      	b.n	8006178 <HAL_RCC_OscConfig+0xd8>
 8006160:	4b71      	ldr	r3, [pc, #452]	; (8006328 <HAL_RCC_OscConfig+0x288>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a70      	ldr	r2, [pc, #448]	; (8006328 <HAL_RCC_OscConfig+0x288>)
 8006166:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800616a:	6013      	str	r3, [r2, #0]
 800616c:	4b6e      	ldr	r3, [pc, #440]	; (8006328 <HAL_RCC_OscConfig+0x288>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a6d      	ldr	r2, [pc, #436]	; (8006328 <HAL_RCC_OscConfig+0x288>)
 8006172:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006176:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d013      	beq.n	80061a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006180:	f7fb f9a8 	bl	80014d4 <HAL_GetTick>
 8006184:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006186:	e008      	b.n	800619a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006188:	f7fb f9a4 	bl	80014d4 <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	2b64      	cmp	r3, #100	; 0x64
 8006194:	d901      	bls.n	800619a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e3d4      	b.n	8006944 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800619a:	4b63      	ldr	r3, [pc, #396]	; (8006328 <HAL_RCC_OscConfig+0x288>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d0f0      	beq.n	8006188 <HAL_RCC_OscConfig+0xe8>
 80061a6:	e014      	b.n	80061d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061a8:	f7fb f994 	bl	80014d4 <HAL_GetTick>
 80061ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80061ae:	e008      	b.n	80061c2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061b0:	f7fb f990 	bl	80014d4 <HAL_GetTick>
 80061b4:	4602      	mov	r2, r0
 80061b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b8:	1ad3      	subs	r3, r2, r3
 80061ba:	2b64      	cmp	r3, #100	; 0x64
 80061bc:	d901      	bls.n	80061c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80061be:	2303      	movs	r3, #3
 80061c0:	e3c0      	b.n	8006944 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80061c2:	4b59      	ldr	r3, [pc, #356]	; (8006328 <HAL_RCC_OscConfig+0x288>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1f0      	bne.n	80061b0 <HAL_RCC_OscConfig+0x110>
 80061ce:	e000      	b.n	80061d2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 0302 	and.w	r3, r3, #2
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f000 80ca 	beq.w	8006374 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061e0:	4b51      	ldr	r3, [pc, #324]	; (8006328 <HAL_RCC_OscConfig+0x288>)
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061e8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80061ea:	4b4f      	ldr	r3, [pc, #316]	; (8006328 <HAL_RCC_OscConfig+0x288>)
 80061ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ee:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80061f0:	6a3b      	ldr	r3, [r7, #32]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d007      	beq.n	8006206 <HAL_RCC_OscConfig+0x166>
 80061f6:	6a3b      	ldr	r3, [r7, #32]
 80061f8:	2b18      	cmp	r3, #24
 80061fa:	d156      	bne.n	80062aa <HAL_RCC_OscConfig+0x20a>
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	f003 0303 	and.w	r3, r3, #3
 8006202:	2b00      	cmp	r3, #0
 8006204:	d151      	bne.n	80062aa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006206:	4b48      	ldr	r3, [pc, #288]	; (8006328 <HAL_RCC_OscConfig+0x288>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 0304 	and.w	r3, r3, #4
 800620e:	2b00      	cmp	r3, #0
 8006210:	d005      	beq.n	800621e <HAL_RCC_OscConfig+0x17e>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d101      	bne.n	800621e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e392      	b.n	8006944 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800621e:	4b42      	ldr	r3, [pc, #264]	; (8006328 <HAL_RCC_OscConfig+0x288>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f023 0219 	bic.w	r2, r3, #25
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	493f      	ldr	r1, [pc, #252]	; (8006328 <HAL_RCC_OscConfig+0x288>)
 800622c:	4313      	orrs	r3, r2
 800622e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006230:	f7fb f950 	bl	80014d4 <HAL_GetTick>
 8006234:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006236:	e008      	b.n	800624a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006238:	f7fb f94c 	bl	80014d4 <HAL_GetTick>
 800623c:	4602      	mov	r2, r0
 800623e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	2b02      	cmp	r3, #2
 8006244:	d901      	bls.n	800624a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e37c      	b.n	8006944 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800624a:	4b37      	ldr	r3, [pc, #220]	; (8006328 <HAL_RCC_OscConfig+0x288>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 0304 	and.w	r3, r3, #4
 8006252:	2b00      	cmp	r3, #0
 8006254:	d0f0      	beq.n	8006238 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006256:	f7fb f96d 	bl	8001534 <HAL_GetREVID>
 800625a:	4603      	mov	r3, r0
 800625c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006260:	4293      	cmp	r3, r2
 8006262:	d817      	bhi.n	8006294 <HAL_RCC_OscConfig+0x1f4>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	2b40      	cmp	r3, #64	; 0x40
 800626a:	d108      	bne.n	800627e <HAL_RCC_OscConfig+0x1de>
 800626c:	4b2e      	ldr	r3, [pc, #184]	; (8006328 <HAL_RCC_OscConfig+0x288>)
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006274:	4a2c      	ldr	r2, [pc, #176]	; (8006328 <HAL_RCC_OscConfig+0x288>)
 8006276:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800627a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800627c:	e07a      	b.n	8006374 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800627e:	4b2a      	ldr	r3, [pc, #168]	; (8006328 <HAL_RCC_OscConfig+0x288>)
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	031b      	lsls	r3, r3, #12
 800628c:	4926      	ldr	r1, [pc, #152]	; (8006328 <HAL_RCC_OscConfig+0x288>)
 800628e:	4313      	orrs	r3, r2
 8006290:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006292:	e06f      	b.n	8006374 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006294:	4b24      	ldr	r3, [pc, #144]	; (8006328 <HAL_RCC_OscConfig+0x288>)
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	061b      	lsls	r3, r3, #24
 80062a2:	4921      	ldr	r1, [pc, #132]	; (8006328 <HAL_RCC_OscConfig+0x288>)
 80062a4:	4313      	orrs	r3, r2
 80062a6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062a8:	e064      	b.n	8006374 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d047      	beq.n	8006342 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80062b2:	4b1d      	ldr	r3, [pc, #116]	; (8006328 <HAL_RCC_OscConfig+0x288>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f023 0219 	bic.w	r2, r3, #25
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	491a      	ldr	r1, [pc, #104]	; (8006328 <HAL_RCC_OscConfig+0x288>)
 80062c0:	4313      	orrs	r3, r2
 80062c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062c4:	f7fb f906 	bl	80014d4 <HAL_GetTick>
 80062c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80062ca:	e008      	b.n	80062de <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062cc:	f7fb f902 	bl	80014d4 <HAL_GetTick>
 80062d0:	4602      	mov	r2, r0
 80062d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	d901      	bls.n	80062de <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80062da:	2303      	movs	r3, #3
 80062dc:	e332      	b.n	8006944 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80062de:	4b12      	ldr	r3, [pc, #72]	; (8006328 <HAL_RCC_OscConfig+0x288>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 0304 	and.w	r3, r3, #4
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d0f0      	beq.n	80062cc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062ea:	f7fb f923 	bl	8001534 <HAL_GetREVID>
 80062ee:	4603      	mov	r3, r0
 80062f0:	f241 0203 	movw	r2, #4099	; 0x1003
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d819      	bhi.n	800632c <HAL_RCC_OscConfig+0x28c>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	2b40      	cmp	r3, #64	; 0x40
 80062fe:	d108      	bne.n	8006312 <HAL_RCC_OscConfig+0x272>
 8006300:	4b09      	ldr	r3, [pc, #36]	; (8006328 <HAL_RCC_OscConfig+0x288>)
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006308:	4a07      	ldr	r2, [pc, #28]	; (8006328 <HAL_RCC_OscConfig+0x288>)
 800630a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800630e:	6053      	str	r3, [r2, #4]
 8006310:	e030      	b.n	8006374 <HAL_RCC_OscConfig+0x2d4>
 8006312:	4b05      	ldr	r3, [pc, #20]	; (8006328 <HAL_RCC_OscConfig+0x288>)
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	031b      	lsls	r3, r3, #12
 8006320:	4901      	ldr	r1, [pc, #4]	; (8006328 <HAL_RCC_OscConfig+0x288>)
 8006322:	4313      	orrs	r3, r2
 8006324:	604b      	str	r3, [r1, #4]
 8006326:	e025      	b.n	8006374 <HAL_RCC_OscConfig+0x2d4>
 8006328:	58024400 	.word	0x58024400
 800632c:	4b9a      	ldr	r3, [pc, #616]	; (8006598 <HAL_RCC_OscConfig+0x4f8>)
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	061b      	lsls	r3, r3, #24
 800633a:	4997      	ldr	r1, [pc, #604]	; (8006598 <HAL_RCC_OscConfig+0x4f8>)
 800633c:	4313      	orrs	r3, r2
 800633e:	604b      	str	r3, [r1, #4]
 8006340:	e018      	b.n	8006374 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006342:	4b95      	ldr	r3, [pc, #596]	; (8006598 <HAL_RCC_OscConfig+0x4f8>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a94      	ldr	r2, [pc, #592]	; (8006598 <HAL_RCC_OscConfig+0x4f8>)
 8006348:	f023 0301 	bic.w	r3, r3, #1
 800634c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800634e:	f7fb f8c1 	bl	80014d4 <HAL_GetTick>
 8006352:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006354:	e008      	b.n	8006368 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006356:	f7fb f8bd 	bl	80014d4 <HAL_GetTick>
 800635a:	4602      	mov	r2, r0
 800635c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635e:	1ad3      	subs	r3, r2, r3
 8006360:	2b02      	cmp	r3, #2
 8006362:	d901      	bls.n	8006368 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006364:	2303      	movs	r3, #3
 8006366:	e2ed      	b.n	8006944 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006368:	4b8b      	ldr	r3, [pc, #556]	; (8006598 <HAL_RCC_OscConfig+0x4f8>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 0304 	and.w	r3, r3, #4
 8006370:	2b00      	cmp	r3, #0
 8006372:	d1f0      	bne.n	8006356 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 0310 	and.w	r3, r3, #16
 800637c:	2b00      	cmp	r3, #0
 800637e:	f000 80a9 	beq.w	80064d4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006382:	4b85      	ldr	r3, [pc, #532]	; (8006598 <HAL_RCC_OscConfig+0x4f8>)
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800638a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800638c:	4b82      	ldr	r3, [pc, #520]	; (8006598 <HAL_RCC_OscConfig+0x4f8>)
 800638e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006390:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	2b08      	cmp	r3, #8
 8006396:	d007      	beq.n	80063a8 <HAL_RCC_OscConfig+0x308>
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	2b18      	cmp	r3, #24
 800639c:	d13a      	bne.n	8006414 <HAL_RCC_OscConfig+0x374>
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	f003 0303 	and.w	r3, r3, #3
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d135      	bne.n	8006414 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80063a8:	4b7b      	ldr	r3, [pc, #492]	; (8006598 <HAL_RCC_OscConfig+0x4f8>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d005      	beq.n	80063c0 <HAL_RCC_OscConfig+0x320>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	69db      	ldr	r3, [r3, #28]
 80063b8:	2b80      	cmp	r3, #128	; 0x80
 80063ba:	d001      	beq.n	80063c0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e2c1      	b.n	8006944 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80063c0:	f7fb f8b8 	bl	8001534 <HAL_GetREVID>
 80063c4:	4603      	mov	r3, r0
 80063c6:	f241 0203 	movw	r2, #4099	; 0x1003
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d817      	bhi.n	80063fe <HAL_RCC_OscConfig+0x35e>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a1b      	ldr	r3, [r3, #32]
 80063d2:	2b20      	cmp	r3, #32
 80063d4:	d108      	bne.n	80063e8 <HAL_RCC_OscConfig+0x348>
 80063d6:	4b70      	ldr	r3, [pc, #448]	; (8006598 <HAL_RCC_OscConfig+0x4f8>)
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80063de:	4a6e      	ldr	r2, [pc, #440]	; (8006598 <HAL_RCC_OscConfig+0x4f8>)
 80063e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063e4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80063e6:	e075      	b.n	80064d4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80063e8:	4b6b      	ldr	r3, [pc, #428]	; (8006598 <HAL_RCC_OscConfig+0x4f8>)
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6a1b      	ldr	r3, [r3, #32]
 80063f4:	069b      	lsls	r3, r3, #26
 80063f6:	4968      	ldr	r1, [pc, #416]	; (8006598 <HAL_RCC_OscConfig+0x4f8>)
 80063f8:	4313      	orrs	r3, r2
 80063fa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80063fc:	e06a      	b.n	80064d4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80063fe:	4b66      	ldr	r3, [pc, #408]	; (8006598 <HAL_RCC_OscConfig+0x4f8>)
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a1b      	ldr	r3, [r3, #32]
 800640a:	061b      	lsls	r3, r3, #24
 800640c:	4962      	ldr	r1, [pc, #392]	; (8006598 <HAL_RCC_OscConfig+0x4f8>)
 800640e:	4313      	orrs	r3, r2
 8006410:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006412:	e05f      	b.n	80064d4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	69db      	ldr	r3, [r3, #28]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d042      	beq.n	80064a2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800641c:	4b5e      	ldr	r3, [pc, #376]	; (8006598 <HAL_RCC_OscConfig+0x4f8>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a5d      	ldr	r2, [pc, #372]	; (8006598 <HAL_RCC_OscConfig+0x4f8>)
 8006422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006426:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006428:	f7fb f854 	bl	80014d4 <HAL_GetTick>
 800642c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800642e:	e008      	b.n	8006442 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006430:	f7fb f850 	bl	80014d4 <HAL_GetTick>
 8006434:	4602      	mov	r2, r0
 8006436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	2b02      	cmp	r3, #2
 800643c:	d901      	bls.n	8006442 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800643e:	2303      	movs	r3, #3
 8006440:	e280      	b.n	8006944 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006442:	4b55      	ldr	r3, [pc, #340]	; (8006598 <HAL_RCC_OscConfig+0x4f8>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800644a:	2b00      	cmp	r3, #0
 800644c:	d0f0      	beq.n	8006430 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800644e:	f7fb f871 	bl	8001534 <HAL_GetREVID>
 8006452:	4603      	mov	r3, r0
 8006454:	f241 0203 	movw	r2, #4099	; 0x1003
 8006458:	4293      	cmp	r3, r2
 800645a:	d817      	bhi.n	800648c <HAL_RCC_OscConfig+0x3ec>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6a1b      	ldr	r3, [r3, #32]
 8006460:	2b20      	cmp	r3, #32
 8006462:	d108      	bne.n	8006476 <HAL_RCC_OscConfig+0x3d6>
 8006464:	4b4c      	ldr	r3, [pc, #304]	; (8006598 <HAL_RCC_OscConfig+0x4f8>)
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800646c:	4a4a      	ldr	r2, [pc, #296]	; (8006598 <HAL_RCC_OscConfig+0x4f8>)
 800646e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006472:	6053      	str	r3, [r2, #4]
 8006474:	e02e      	b.n	80064d4 <HAL_RCC_OscConfig+0x434>
 8006476:	4b48      	ldr	r3, [pc, #288]	; (8006598 <HAL_RCC_OscConfig+0x4f8>)
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a1b      	ldr	r3, [r3, #32]
 8006482:	069b      	lsls	r3, r3, #26
 8006484:	4944      	ldr	r1, [pc, #272]	; (8006598 <HAL_RCC_OscConfig+0x4f8>)
 8006486:	4313      	orrs	r3, r2
 8006488:	604b      	str	r3, [r1, #4]
 800648a:	e023      	b.n	80064d4 <HAL_RCC_OscConfig+0x434>
 800648c:	4b42      	ldr	r3, [pc, #264]	; (8006598 <HAL_RCC_OscConfig+0x4f8>)
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6a1b      	ldr	r3, [r3, #32]
 8006498:	061b      	lsls	r3, r3, #24
 800649a:	493f      	ldr	r1, [pc, #252]	; (8006598 <HAL_RCC_OscConfig+0x4f8>)
 800649c:	4313      	orrs	r3, r2
 800649e:	60cb      	str	r3, [r1, #12]
 80064a0:	e018      	b.n	80064d4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80064a2:	4b3d      	ldr	r3, [pc, #244]	; (8006598 <HAL_RCC_OscConfig+0x4f8>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a3c      	ldr	r2, [pc, #240]	; (8006598 <HAL_RCC_OscConfig+0x4f8>)
 80064a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ae:	f7fb f811 	bl	80014d4 <HAL_GetTick>
 80064b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80064b4:	e008      	b.n	80064c8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80064b6:	f7fb f80d 	bl	80014d4 <HAL_GetTick>
 80064ba:	4602      	mov	r2, r0
 80064bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064be:	1ad3      	subs	r3, r2, r3
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d901      	bls.n	80064c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80064c4:	2303      	movs	r3, #3
 80064c6:	e23d      	b.n	8006944 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80064c8:	4b33      	ldr	r3, [pc, #204]	; (8006598 <HAL_RCC_OscConfig+0x4f8>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1f0      	bne.n	80064b6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0308 	and.w	r3, r3, #8
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d036      	beq.n	800654e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	695b      	ldr	r3, [r3, #20]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d019      	beq.n	800651c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064e8:	4b2b      	ldr	r3, [pc, #172]	; (8006598 <HAL_RCC_OscConfig+0x4f8>)
 80064ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064ec:	4a2a      	ldr	r2, [pc, #168]	; (8006598 <HAL_RCC_OscConfig+0x4f8>)
 80064ee:	f043 0301 	orr.w	r3, r3, #1
 80064f2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064f4:	f7fa ffee 	bl	80014d4 <HAL_GetTick>
 80064f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80064fa:	e008      	b.n	800650e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064fc:	f7fa ffea 	bl	80014d4 <HAL_GetTick>
 8006500:	4602      	mov	r2, r0
 8006502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	2b02      	cmp	r3, #2
 8006508:	d901      	bls.n	800650e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	e21a      	b.n	8006944 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800650e:	4b22      	ldr	r3, [pc, #136]	; (8006598 <HAL_RCC_OscConfig+0x4f8>)
 8006510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006512:	f003 0302 	and.w	r3, r3, #2
 8006516:	2b00      	cmp	r3, #0
 8006518:	d0f0      	beq.n	80064fc <HAL_RCC_OscConfig+0x45c>
 800651a:	e018      	b.n	800654e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800651c:	4b1e      	ldr	r3, [pc, #120]	; (8006598 <HAL_RCC_OscConfig+0x4f8>)
 800651e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006520:	4a1d      	ldr	r2, [pc, #116]	; (8006598 <HAL_RCC_OscConfig+0x4f8>)
 8006522:	f023 0301 	bic.w	r3, r3, #1
 8006526:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006528:	f7fa ffd4 	bl	80014d4 <HAL_GetTick>
 800652c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800652e:	e008      	b.n	8006542 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006530:	f7fa ffd0 	bl	80014d4 <HAL_GetTick>
 8006534:	4602      	mov	r2, r0
 8006536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	2b02      	cmp	r3, #2
 800653c:	d901      	bls.n	8006542 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	e200      	b.n	8006944 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006542:	4b15      	ldr	r3, [pc, #84]	; (8006598 <HAL_RCC_OscConfig+0x4f8>)
 8006544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006546:	f003 0302 	and.w	r3, r3, #2
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1f0      	bne.n	8006530 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 0320 	and.w	r3, r3, #32
 8006556:	2b00      	cmp	r3, #0
 8006558:	d039      	beq.n	80065ce <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d01c      	beq.n	800659c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006562:	4b0d      	ldr	r3, [pc, #52]	; (8006598 <HAL_RCC_OscConfig+0x4f8>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a0c      	ldr	r2, [pc, #48]	; (8006598 <HAL_RCC_OscConfig+0x4f8>)
 8006568:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800656c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800656e:	f7fa ffb1 	bl	80014d4 <HAL_GetTick>
 8006572:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006574:	e008      	b.n	8006588 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006576:	f7fa ffad 	bl	80014d4 <HAL_GetTick>
 800657a:	4602      	mov	r2, r0
 800657c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	2b02      	cmp	r3, #2
 8006582:	d901      	bls.n	8006588 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006584:	2303      	movs	r3, #3
 8006586:	e1dd      	b.n	8006944 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006588:	4b03      	ldr	r3, [pc, #12]	; (8006598 <HAL_RCC_OscConfig+0x4f8>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006590:	2b00      	cmp	r3, #0
 8006592:	d0f0      	beq.n	8006576 <HAL_RCC_OscConfig+0x4d6>
 8006594:	e01b      	b.n	80065ce <HAL_RCC_OscConfig+0x52e>
 8006596:	bf00      	nop
 8006598:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800659c:	4b9b      	ldr	r3, [pc, #620]	; (800680c <HAL_RCC_OscConfig+0x76c>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a9a      	ldr	r2, [pc, #616]	; (800680c <HAL_RCC_OscConfig+0x76c>)
 80065a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065a6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80065a8:	f7fa ff94 	bl	80014d4 <HAL_GetTick>
 80065ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80065ae:	e008      	b.n	80065c2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80065b0:	f7fa ff90 	bl	80014d4 <HAL_GetTick>
 80065b4:	4602      	mov	r2, r0
 80065b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d901      	bls.n	80065c2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	e1c0      	b.n	8006944 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80065c2:	4b92      	ldr	r3, [pc, #584]	; (800680c <HAL_RCC_OscConfig+0x76c>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d1f0      	bne.n	80065b0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0304 	and.w	r3, r3, #4
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	f000 8081 	beq.w	80066de <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80065dc:	4b8c      	ldr	r3, [pc, #560]	; (8006810 <HAL_RCC_OscConfig+0x770>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a8b      	ldr	r2, [pc, #556]	; (8006810 <HAL_RCC_OscConfig+0x770>)
 80065e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80065e8:	f7fa ff74 	bl	80014d4 <HAL_GetTick>
 80065ec:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80065ee:	e008      	b.n	8006602 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065f0:	f7fa ff70 	bl	80014d4 <HAL_GetTick>
 80065f4:	4602      	mov	r2, r0
 80065f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	2b64      	cmp	r3, #100	; 0x64
 80065fc:	d901      	bls.n	8006602 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	e1a0      	b.n	8006944 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006602:	4b83      	ldr	r3, [pc, #524]	; (8006810 <HAL_RCC_OscConfig+0x770>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800660a:	2b00      	cmp	r3, #0
 800660c:	d0f0      	beq.n	80065f0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	2b01      	cmp	r3, #1
 8006614:	d106      	bne.n	8006624 <HAL_RCC_OscConfig+0x584>
 8006616:	4b7d      	ldr	r3, [pc, #500]	; (800680c <HAL_RCC_OscConfig+0x76c>)
 8006618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800661a:	4a7c      	ldr	r2, [pc, #496]	; (800680c <HAL_RCC_OscConfig+0x76c>)
 800661c:	f043 0301 	orr.w	r3, r3, #1
 8006620:	6713      	str	r3, [r2, #112]	; 0x70
 8006622:	e02d      	b.n	8006680 <HAL_RCC_OscConfig+0x5e0>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d10c      	bne.n	8006646 <HAL_RCC_OscConfig+0x5a6>
 800662c:	4b77      	ldr	r3, [pc, #476]	; (800680c <HAL_RCC_OscConfig+0x76c>)
 800662e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006630:	4a76      	ldr	r2, [pc, #472]	; (800680c <HAL_RCC_OscConfig+0x76c>)
 8006632:	f023 0301 	bic.w	r3, r3, #1
 8006636:	6713      	str	r3, [r2, #112]	; 0x70
 8006638:	4b74      	ldr	r3, [pc, #464]	; (800680c <HAL_RCC_OscConfig+0x76c>)
 800663a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800663c:	4a73      	ldr	r2, [pc, #460]	; (800680c <HAL_RCC_OscConfig+0x76c>)
 800663e:	f023 0304 	bic.w	r3, r3, #4
 8006642:	6713      	str	r3, [r2, #112]	; 0x70
 8006644:	e01c      	b.n	8006680 <HAL_RCC_OscConfig+0x5e0>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	2b05      	cmp	r3, #5
 800664c:	d10c      	bne.n	8006668 <HAL_RCC_OscConfig+0x5c8>
 800664e:	4b6f      	ldr	r3, [pc, #444]	; (800680c <HAL_RCC_OscConfig+0x76c>)
 8006650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006652:	4a6e      	ldr	r2, [pc, #440]	; (800680c <HAL_RCC_OscConfig+0x76c>)
 8006654:	f043 0304 	orr.w	r3, r3, #4
 8006658:	6713      	str	r3, [r2, #112]	; 0x70
 800665a:	4b6c      	ldr	r3, [pc, #432]	; (800680c <HAL_RCC_OscConfig+0x76c>)
 800665c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800665e:	4a6b      	ldr	r2, [pc, #428]	; (800680c <HAL_RCC_OscConfig+0x76c>)
 8006660:	f043 0301 	orr.w	r3, r3, #1
 8006664:	6713      	str	r3, [r2, #112]	; 0x70
 8006666:	e00b      	b.n	8006680 <HAL_RCC_OscConfig+0x5e0>
 8006668:	4b68      	ldr	r3, [pc, #416]	; (800680c <HAL_RCC_OscConfig+0x76c>)
 800666a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800666c:	4a67      	ldr	r2, [pc, #412]	; (800680c <HAL_RCC_OscConfig+0x76c>)
 800666e:	f023 0301 	bic.w	r3, r3, #1
 8006672:	6713      	str	r3, [r2, #112]	; 0x70
 8006674:	4b65      	ldr	r3, [pc, #404]	; (800680c <HAL_RCC_OscConfig+0x76c>)
 8006676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006678:	4a64      	ldr	r2, [pc, #400]	; (800680c <HAL_RCC_OscConfig+0x76c>)
 800667a:	f023 0304 	bic.w	r3, r3, #4
 800667e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d015      	beq.n	80066b4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006688:	f7fa ff24 	bl	80014d4 <HAL_GetTick>
 800668c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800668e:	e00a      	b.n	80066a6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006690:	f7fa ff20 	bl	80014d4 <HAL_GetTick>
 8006694:	4602      	mov	r2, r0
 8006696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	f241 3288 	movw	r2, #5000	; 0x1388
 800669e:	4293      	cmp	r3, r2
 80066a0:	d901      	bls.n	80066a6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80066a2:	2303      	movs	r3, #3
 80066a4:	e14e      	b.n	8006944 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066a6:	4b59      	ldr	r3, [pc, #356]	; (800680c <HAL_RCC_OscConfig+0x76c>)
 80066a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066aa:	f003 0302 	and.w	r3, r3, #2
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d0ee      	beq.n	8006690 <HAL_RCC_OscConfig+0x5f0>
 80066b2:	e014      	b.n	80066de <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066b4:	f7fa ff0e 	bl	80014d4 <HAL_GetTick>
 80066b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80066ba:	e00a      	b.n	80066d2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066bc:	f7fa ff0a 	bl	80014d4 <HAL_GetTick>
 80066c0:	4602      	mov	r2, r0
 80066c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d901      	bls.n	80066d2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	e138      	b.n	8006944 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80066d2:	4b4e      	ldr	r3, [pc, #312]	; (800680c <HAL_RCC_OscConfig+0x76c>)
 80066d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066d6:	f003 0302 	and.w	r3, r3, #2
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1ee      	bne.n	80066bc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	f000 812d 	beq.w	8006942 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80066e8:	4b48      	ldr	r3, [pc, #288]	; (800680c <HAL_RCC_OscConfig+0x76c>)
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066f0:	2b18      	cmp	r3, #24
 80066f2:	f000 80bd 	beq.w	8006870 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	f040 809e 	bne.w	800683c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006700:	4b42      	ldr	r3, [pc, #264]	; (800680c <HAL_RCC_OscConfig+0x76c>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a41      	ldr	r2, [pc, #260]	; (800680c <HAL_RCC_OscConfig+0x76c>)
 8006706:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800670a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800670c:	f7fa fee2 	bl	80014d4 <HAL_GetTick>
 8006710:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006712:	e008      	b.n	8006726 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006714:	f7fa fede 	bl	80014d4 <HAL_GetTick>
 8006718:	4602      	mov	r2, r0
 800671a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	2b02      	cmp	r3, #2
 8006720:	d901      	bls.n	8006726 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	e10e      	b.n	8006944 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006726:	4b39      	ldr	r3, [pc, #228]	; (800680c <HAL_RCC_OscConfig+0x76c>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800672e:	2b00      	cmp	r3, #0
 8006730:	d1f0      	bne.n	8006714 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006732:	4b36      	ldr	r3, [pc, #216]	; (800680c <HAL_RCC_OscConfig+0x76c>)
 8006734:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006736:	4b37      	ldr	r3, [pc, #220]	; (8006814 <HAL_RCC_OscConfig+0x774>)
 8006738:	4013      	ands	r3, r2
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006742:	0112      	lsls	r2, r2, #4
 8006744:	430a      	orrs	r2, r1
 8006746:	4931      	ldr	r1, [pc, #196]	; (800680c <HAL_RCC_OscConfig+0x76c>)
 8006748:	4313      	orrs	r3, r2
 800674a:	628b      	str	r3, [r1, #40]	; 0x28
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006750:	3b01      	subs	r3, #1
 8006752:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800675a:	3b01      	subs	r3, #1
 800675c:	025b      	lsls	r3, r3, #9
 800675e:	b29b      	uxth	r3, r3
 8006760:	431a      	orrs	r2, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006766:	3b01      	subs	r3, #1
 8006768:	041b      	lsls	r3, r3, #16
 800676a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800676e:	431a      	orrs	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006774:	3b01      	subs	r3, #1
 8006776:	061b      	lsls	r3, r3, #24
 8006778:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800677c:	4923      	ldr	r1, [pc, #140]	; (800680c <HAL_RCC_OscConfig+0x76c>)
 800677e:	4313      	orrs	r3, r2
 8006780:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006782:	4b22      	ldr	r3, [pc, #136]	; (800680c <HAL_RCC_OscConfig+0x76c>)
 8006784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006786:	4a21      	ldr	r2, [pc, #132]	; (800680c <HAL_RCC_OscConfig+0x76c>)
 8006788:	f023 0301 	bic.w	r3, r3, #1
 800678c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800678e:	4b1f      	ldr	r3, [pc, #124]	; (800680c <HAL_RCC_OscConfig+0x76c>)
 8006790:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006792:	4b21      	ldr	r3, [pc, #132]	; (8006818 <HAL_RCC_OscConfig+0x778>)
 8006794:	4013      	ands	r3, r2
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800679a:	00d2      	lsls	r2, r2, #3
 800679c:	491b      	ldr	r1, [pc, #108]	; (800680c <HAL_RCC_OscConfig+0x76c>)
 800679e:	4313      	orrs	r3, r2
 80067a0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80067a2:	4b1a      	ldr	r3, [pc, #104]	; (800680c <HAL_RCC_OscConfig+0x76c>)
 80067a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a6:	f023 020c 	bic.w	r2, r3, #12
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ae:	4917      	ldr	r1, [pc, #92]	; (800680c <HAL_RCC_OscConfig+0x76c>)
 80067b0:	4313      	orrs	r3, r2
 80067b2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80067b4:	4b15      	ldr	r3, [pc, #84]	; (800680c <HAL_RCC_OscConfig+0x76c>)
 80067b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b8:	f023 0202 	bic.w	r2, r3, #2
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067c0:	4912      	ldr	r1, [pc, #72]	; (800680c <HAL_RCC_OscConfig+0x76c>)
 80067c2:	4313      	orrs	r3, r2
 80067c4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80067c6:	4b11      	ldr	r3, [pc, #68]	; (800680c <HAL_RCC_OscConfig+0x76c>)
 80067c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ca:	4a10      	ldr	r2, [pc, #64]	; (800680c <HAL_RCC_OscConfig+0x76c>)
 80067cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067d2:	4b0e      	ldr	r3, [pc, #56]	; (800680c <HAL_RCC_OscConfig+0x76c>)
 80067d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d6:	4a0d      	ldr	r2, [pc, #52]	; (800680c <HAL_RCC_OscConfig+0x76c>)
 80067d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80067de:	4b0b      	ldr	r3, [pc, #44]	; (800680c <HAL_RCC_OscConfig+0x76c>)
 80067e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e2:	4a0a      	ldr	r2, [pc, #40]	; (800680c <HAL_RCC_OscConfig+0x76c>)
 80067e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80067ea:	4b08      	ldr	r3, [pc, #32]	; (800680c <HAL_RCC_OscConfig+0x76c>)
 80067ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ee:	4a07      	ldr	r2, [pc, #28]	; (800680c <HAL_RCC_OscConfig+0x76c>)
 80067f0:	f043 0301 	orr.w	r3, r3, #1
 80067f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067f6:	4b05      	ldr	r3, [pc, #20]	; (800680c <HAL_RCC_OscConfig+0x76c>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a04      	ldr	r2, [pc, #16]	; (800680c <HAL_RCC_OscConfig+0x76c>)
 80067fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006800:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006802:	f7fa fe67 	bl	80014d4 <HAL_GetTick>
 8006806:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006808:	e011      	b.n	800682e <HAL_RCC_OscConfig+0x78e>
 800680a:	bf00      	nop
 800680c:	58024400 	.word	0x58024400
 8006810:	58024800 	.word	0x58024800
 8006814:	fffffc0c 	.word	0xfffffc0c
 8006818:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800681c:	f7fa fe5a 	bl	80014d4 <HAL_GetTick>
 8006820:	4602      	mov	r2, r0
 8006822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	2b02      	cmp	r3, #2
 8006828:	d901      	bls.n	800682e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800682a:	2303      	movs	r3, #3
 800682c:	e08a      	b.n	8006944 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800682e:	4b47      	ldr	r3, [pc, #284]	; (800694c <HAL_RCC_OscConfig+0x8ac>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006836:	2b00      	cmp	r3, #0
 8006838:	d0f0      	beq.n	800681c <HAL_RCC_OscConfig+0x77c>
 800683a:	e082      	b.n	8006942 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800683c:	4b43      	ldr	r3, [pc, #268]	; (800694c <HAL_RCC_OscConfig+0x8ac>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a42      	ldr	r2, [pc, #264]	; (800694c <HAL_RCC_OscConfig+0x8ac>)
 8006842:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006846:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006848:	f7fa fe44 	bl	80014d4 <HAL_GetTick>
 800684c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800684e:	e008      	b.n	8006862 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006850:	f7fa fe40 	bl	80014d4 <HAL_GetTick>
 8006854:	4602      	mov	r2, r0
 8006856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	2b02      	cmp	r3, #2
 800685c:	d901      	bls.n	8006862 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800685e:	2303      	movs	r3, #3
 8006860:	e070      	b.n	8006944 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006862:	4b3a      	ldr	r3, [pc, #232]	; (800694c <HAL_RCC_OscConfig+0x8ac>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1f0      	bne.n	8006850 <HAL_RCC_OscConfig+0x7b0>
 800686e:	e068      	b.n	8006942 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006870:	4b36      	ldr	r3, [pc, #216]	; (800694c <HAL_RCC_OscConfig+0x8ac>)
 8006872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006874:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006876:	4b35      	ldr	r3, [pc, #212]	; (800694c <HAL_RCC_OscConfig+0x8ac>)
 8006878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800687a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006880:	2b01      	cmp	r3, #1
 8006882:	d031      	beq.n	80068e8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	f003 0203 	and.w	r2, r3, #3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800688e:	429a      	cmp	r2, r3
 8006890:	d12a      	bne.n	80068e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	091b      	lsrs	r3, r3, #4
 8006896:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800689e:	429a      	cmp	r2, r3
 80068a0:	d122      	bne.n	80068e8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d11a      	bne.n	80068e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	0a5b      	lsrs	r3, r3, #9
 80068b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068be:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d111      	bne.n	80068e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	0c1b      	lsrs	r3, r3, #16
 80068c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d108      	bne.n	80068e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	0e1b      	lsrs	r3, r3, #24
 80068da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068e2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d001      	beq.n	80068ec <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	e02b      	b.n	8006944 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80068ec:	4b17      	ldr	r3, [pc, #92]	; (800694c <HAL_RCC_OscConfig+0x8ac>)
 80068ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068f0:	08db      	lsrs	r3, r3, #3
 80068f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80068f6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068fc:	693a      	ldr	r2, [r7, #16]
 80068fe:	429a      	cmp	r2, r3
 8006900:	d01f      	beq.n	8006942 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006902:	4b12      	ldr	r3, [pc, #72]	; (800694c <HAL_RCC_OscConfig+0x8ac>)
 8006904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006906:	4a11      	ldr	r2, [pc, #68]	; (800694c <HAL_RCC_OscConfig+0x8ac>)
 8006908:	f023 0301 	bic.w	r3, r3, #1
 800690c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800690e:	f7fa fde1 	bl	80014d4 <HAL_GetTick>
 8006912:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006914:	bf00      	nop
 8006916:	f7fa fddd 	bl	80014d4 <HAL_GetTick>
 800691a:	4602      	mov	r2, r0
 800691c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691e:	4293      	cmp	r3, r2
 8006920:	d0f9      	beq.n	8006916 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006922:	4b0a      	ldr	r3, [pc, #40]	; (800694c <HAL_RCC_OscConfig+0x8ac>)
 8006924:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006926:	4b0a      	ldr	r3, [pc, #40]	; (8006950 <HAL_RCC_OscConfig+0x8b0>)
 8006928:	4013      	ands	r3, r2
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800692e:	00d2      	lsls	r2, r2, #3
 8006930:	4906      	ldr	r1, [pc, #24]	; (800694c <HAL_RCC_OscConfig+0x8ac>)
 8006932:	4313      	orrs	r3, r2
 8006934:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006936:	4b05      	ldr	r3, [pc, #20]	; (800694c <HAL_RCC_OscConfig+0x8ac>)
 8006938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693a:	4a04      	ldr	r2, [pc, #16]	; (800694c <HAL_RCC_OscConfig+0x8ac>)
 800693c:	f043 0301 	orr.w	r3, r3, #1
 8006940:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3730      	adds	r7, #48	; 0x30
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}
 800694c:	58024400 	.word	0x58024400
 8006950:	ffff0007 	.word	0xffff0007

08006954 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b086      	sub	sp, #24
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d101      	bne.n	8006968 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	e19c      	b.n	8006ca2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006968:	4b8a      	ldr	r3, [pc, #552]	; (8006b94 <HAL_RCC_ClockConfig+0x240>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 030f 	and.w	r3, r3, #15
 8006970:	683a      	ldr	r2, [r7, #0]
 8006972:	429a      	cmp	r2, r3
 8006974:	d910      	bls.n	8006998 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006976:	4b87      	ldr	r3, [pc, #540]	; (8006b94 <HAL_RCC_ClockConfig+0x240>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f023 020f 	bic.w	r2, r3, #15
 800697e:	4985      	ldr	r1, [pc, #532]	; (8006b94 <HAL_RCC_ClockConfig+0x240>)
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	4313      	orrs	r3, r2
 8006984:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006986:	4b83      	ldr	r3, [pc, #524]	; (8006b94 <HAL_RCC_ClockConfig+0x240>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 030f 	and.w	r3, r3, #15
 800698e:	683a      	ldr	r2, [r7, #0]
 8006990:	429a      	cmp	r2, r3
 8006992:	d001      	beq.n	8006998 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	e184      	b.n	8006ca2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 0304 	and.w	r3, r3, #4
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d010      	beq.n	80069c6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	691a      	ldr	r2, [r3, #16]
 80069a8:	4b7b      	ldr	r3, [pc, #492]	; (8006b98 <HAL_RCC_ClockConfig+0x244>)
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d908      	bls.n	80069c6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80069b4:	4b78      	ldr	r3, [pc, #480]	; (8006b98 <HAL_RCC_ClockConfig+0x244>)
 80069b6:	699b      	ldr	r3, [r3, #24]
 80069b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	4975      	ldr	r1, [pc, #468]	; (8006b98 <HAL_RCC_ClockConfig+0x244>)
 80069c2:	4313      	orrs	r3, r2
 80069c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 0308 	and.w	r3, r3, #8
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d010      	beq.n	80069f4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	695a      	ldr	r2, [r3, #20]
 80069d6:	4b70      	ldr	r3, [pc, #448]	; (8006b98 <HAL_RCC_ClockConfig+0x244>)
 80069d8:	69db      	ldr	r3, [r3, #28]
 80069da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80069de:	429a      	cmp	r2, r3
 80069e0:	d908      	bls.n	80069f4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80069e2:	4b6d      	ldr	r3, [pc, #436]	; (8006b98 <HAL_RCC_ClockConfig+0x244>)
 80069e4:	69db      	ldr	r3, [r3, #28]
 80069e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	695b      	ldr	r3, [r3, #20]
 80069ee:	496a      	ldr	r1, [pc, #424]	; (8006b98 <HAL_RCC_ClockConfig+0x244>)
 80069f0:	4313      	orrs	r3, r2
 80069f2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 0310 	and.w	r3, r3, #16
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d010      	beq.n	8006a22 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	699a      	ldr	r2, [r3, #24]
 8006a04:	4b64      	ldr	r3, [pc, #400]	; (8006b98 <HAL_RCC_ClockConfig+0x244>)
 8006a06:	69db      	ldr	r3, [r3, #28]
 8006a08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d908      	bls.n	8006a22 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006a10:	4b61      	ldr	r3, [pc, #388]	; (8006b98 <HAL_RCC_ClockConfig+0x244>)
 8006a12:	69db      	ldr	r3, [r3, #28]
 8006a14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	699b      	ldr	r3, [r3, #24]
 8006a1c:	495e      	ldr	r1, [pc, #376]	; (8006b98 <HAL_RCC_ClockConfig+0x244>)
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f003 0320 	and.w	r3, r3, #32
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d010      	beq.n	8006a50 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	69da      	ldr	r2, [r3, #28]
 8006a32:	4b59      	ldr	r3, [pc, #356]	; (8006b98 <HAL_RCC_ClockConfig+0x244>)
 8006a34:	6a1b      	ldr	r3, [r3, #32]
 8006a36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d908      	bls.n	8006a50 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006a3e:	4b56      	ldr	r3, [pc, #344]	; (8006b98 <HAL_RCC_ClockConfig+0x244>)
 8006a40:	6a1b      	ldr	r3, [r3, #32]
 8006a42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	69db      	ldr	r3, [r3, #28]
 8006a4a:	4953      	ldr	r1, [pc, #332]	; (8006b98 <HAL_RCC_ClockConfig+0x244>)
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 0302 	and.w	r3, r3, #2
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d010      	beq.n	8006a7e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	68da      	ldr	r2, [r3, #12]
 8006a60:	4b4d      	ldr	r3, [pc, #308]	; (8006b98 <HAL_RCC_ClockConfig+0x244>)
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	f003 030f 	and.w	r3, r3, #15
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d908      	bls.n	8006a7e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a6c:	4b4a      	ldr	r3, [pc, #296]	; (8006b98 <HAL_RCC_ClockConfig+0x244>)
 8006a6e:	699b      	ldr	r3, [r3, #24]
 8006a70:	f023 020f 	bic.w	r2, r3, #15
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	4947      	ldr	r1, [pc, #284]	; (8006b98 <HAL_RCC_ClockConfig+0x244>)
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 0301 	and.w	r3, r3, #1
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d055      	beq.n	8006b36 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006a8a:	4b43      	ldr	r3, [pc, #268]	; (8006b98 <HAL_RCC_ClockConfig+0x244>)
 8006a8c:	699b      	ldr	r3, [r3, #24]
 8006a8e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	4940      	ldr	r1, [pc, #256]	; (8006b98 <HAL_RCC_ClockConfig+0x244>)
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	d107      	bne.n	8006ab4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006aa4:	4b3c      	ldr	r3, [pc, #240]	; (8006b98 <HAL_RCC_ClockConfig+0x244>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d121      	bne.n	8006af4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e0f6      	b.n	8006ca2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	2b03      	cmp	r3, #3
 8006aba:	d107      	bne.n	8006acc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006abc:	4b36      	ldr	r3, [pc, #216]	; (8006b98 <HAL_RCC_ClockConfig+0x244>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d115      	bne.n	8006af4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e0ea      	b.n	8006ca2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d107      	bne.n	8006ae4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006ad4:	4b30      	ldr	r3, [pc, #192]	; (8006b98 <HAL_RCC_ClockConfig+0x244>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d109      	bne.n	8006af4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e0de      	b.n	8006ca2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ae4:	4b2c      	ldr	r3, [pc, #176]	; (8006b98 <HAL_RCC_ClockConfig+0x244>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 0304 	and.w	r3, r3, #4
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d101      	bne.n	8006af4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	e0d6      	b.n	8006ca2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006af4:	4b28      	ldr	r3, [pc, #160]	; (8006b98 <HAL_RCC_ClockConfig+0x244>)
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	f023 0207 	bic.w	r2, r3, #7
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	4925      	ldr	r1, [pc, #148]	; (8006b98 <HAL_RCC_ClockConfig+0x244>)
 8006b02:	4313      	orrs	r3, r2
 8006b04:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b06:	f7fa fce5 	bl	80014d4 <HAL_GetTick>
 8006b0a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b0c:	e00a      	b.n	8006b24 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b0e:	f7fa fce1 	bl	80014d4 <HAL_GetTick>
 8006b12:	4602      	mov	r2, r0
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	1ad3      	subs	r3, r2, r3
 8006b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d901      	bls.n	8006b24 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006b20:	2303      	movs	r3, #3
 8006b22:	e0be      	b.n	8006ca2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b24:	4b1c      	ldr	r3, [pc, #112]	; (8006b98 <HAL_RCC_ClockConfig+0x244>)
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	00db      	lsls	r3, r3, #3
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d1eb      	bne.n	8006b0e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f003 0302 	and.w	r3, r3, #2
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d010      	beq.n	8006b64 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	68da      	ldr	r2, [r3, #12]
 8006b46:	4b14      	ldr	r3, [pc, #80]	; (8006b98 <HAL_RCC_ClockConfig+0x244>)
 8006b48:	699b      	ldr	r3, [r3, #24]
 8006b4a:	f003 030f 	and.w	r3, r3, #15
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d208      	bcs.n	8006b64 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b52:	4b11      	ldr	r3, [pc, #68]	; (8006b98 <HAL_RCC_ClockConfig+0x244>)
 8006b54:	699b      	ldr	r3, [r3, #24]
 8006b56:	f023 020f 	bic.w	r2, r3, #15
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	490e      	ldr	r1, [pc, #56]	; (8006b98 <HAL_RCC_ClockConfig+0x244>)
 8006b60:	4313      	orrs	r3, r2
 8006b62:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b64:	4b0b      	ldr	r3, [pc, #44]	; (8006b94 <HAL_RCC_ClockConfig+0x240>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 030f 	and.w	r3, r3, #15
 8006b6c:	683a      	ldr	r2, [r7, #0]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d214      	bcs.n	8006b9c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b72:	4b08      	ldr	r3, [pc, #32]	; (8006b94 <HAL_RCC_ClockConfig+0x240>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f023 020f 	bic.w	r2, r3, #15
 8006b7a:	4906      	ldr	r1, [pc, #24]	; (8006b94 <HAL_RCC_ClockConfig+0x240>)
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b82:	4b04      	ldr	r3, [pc, #16]	; (8006b94 <HAL_RCC_ClockConfig+0x240>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 030f 	and.w	r3, r3, #15
 8006b8a:	683a      	ldr	r2, [r7, #0]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d005      	beq.n	8006b9c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	e086      	b.n	8006ca2 <HAL_RCC_ClockConfig+0x34e>
 8006b94:	52002000 	.word	0x52002000
 8006b98:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 0304 	and.w	r3, r3, #4
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d010      	beq.n	8006bca <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	691a      	ldr	r2, [r3, #16]
 8006bac:	4b3f      	ldr	r3, [pc, #252]	; (8006cac <HAL_RCC_ClockConfig+0x358>)
 8006bae:	699b      	ldr	r3, [r3, #24]
 8006bb0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d208      	bcs.n	8006bca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006bb8:	4b3c      	ldr	r3, [pc, #240]	; (8006cac <HAL_RCC_ClockConfig+0x358>)
 8006bba:	699b      	ldr	r3, [r3, #24]
 8006bbc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	4939      	ldr	r1, [pc, #228]	; (8006cac <HAL_RCC_ClockConfig+0x358>)
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f003 0308 	and.w	r3, r3, #8
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d010      	beq.n	8006bf8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	695a      	ldr	r2, [r3, #20]
 8006bda:	4b34      	ldr	r3, [pc, #208]	; (8006cac <HAL_RCC_ClockConfig+0x358>)
 8006bdc:	69db      	ldr	r3, [r3, #28]
 8006bde:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d208      	bcs.n	8006bf8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006be6:	4b31      	ldr	r3, [pc, #196]	; (8006cac <HAL_RCC_ClockConfig+0x358>)
 8006be8:	69db      	ldr	r3, [r3, #28]
 8006bea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	695b      	ldr	r3, [r3, #20]
 8006bf2:	492e      	ldr	r1, [pc, #184]	; (8006cac <HAL_RCC_ClockConfig+0x358>)
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 0310 	and.w	r3, r3, #16
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d010      	beq.n	8006c26 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	699a      	ldr	r2, [r3, #24]
 8006c08:	4b28      	ldr	r3, [pc, #160]	; (8006cac <HAL_RCC_ClockConfig+0x358>)
 8006c0a:	69db      	ldr	r3, [r3, #28]
 8006c0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d208      	bcs.n	8006c26 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006c14:	4b25      	ldr	r3, [pc, #148]	; (8006cac <HAL_RCC_ClockConfig+0x358>)
 8006c16:	69db      	ldr	r3, [r3, #28]
 8006c18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	699b      	ldr	r3, [r3, #24]
 8006c20:	4922      	ldr	r1, [pc, #136]	; (8006cac <HAL_RCC_ClockConfig+0x358>)
 8006c22:	4313      	orrs	r3, r2
 8006c24:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 0320 	and.w	r3, r3, #32
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d010      	beq.n	8006c54 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	69da      	ldr	r2, [r3, #28]
 8006c36:	4b1d      	ldr	r3, [pc, #116]	; (8006cac <HAL_RCC_ClockConfig+0x358>)
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d208      	bcs.n	8006c54 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006c42:	4b1a      	ldr	r3, [pc, #104]	; (8006cac <HAL_RCC_ClockConfig+0x358>)
 8006c44:	6a1b      	ldr	r3, [r3, #32]
 8006c46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	69db      	ldr	r3, [r3, #28]
 8006c4e:	4917      	ldr	r1, [pc, #92]	; (8006cac <HAL_RCC_ClockConfig+0x358>)
 8006c50:	4313      	orrs	r3, r2
 8006c52:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006c54:	f000 f834 	bl	8006cc0 <HAL_RCC_GetSysClockFreq>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	4b14      	ldr	r3, [pc, #80]	; (8006cac <HAL_RCC_ClockConfig+0x358>)
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	0a1b      	lsrs	r3, r3, #8
 8006c60:	f003 030f 	and.w	r3, r3, #15
 8006c64:	4912      	ldr	r1, [pc, #72]	; (8006cb0 <HAL_RCC_ClockConfig+0x35c>)
 8006c66:	5ccb      	ldrb	r3, [r1, r3]
 8006c68:	f003 031f 	and.w	r3, r3, #31
 8006c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8006c70:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006c72:	4b0e      	ldr	r3, [pc, #56]	; (8006cac <HAL_RCC_ClockConfig+0x358>)
 8006c74:	699b      	ldr	r3, [r3, #24]
 8006c76:	f003 030f 	and.w	r3, r3, #15
 8006c7a:	4a0d      	ldr	r2, [pc, #52]	; (8006cb0 <HAL_RCC_ClockConfig+0x35c>)
 8006c7c:	5cd3      	ldrb	r3, [r2, r3]
 8006c7e:	f003 031f 	and.w	r3, r3, #31
 8006c82:	693a      	ldr	r2, [r7, #16]
 8006c84:	fa22 f303 	lsr.w	r3, r2, r3
 8006c88:	4a0a      	ldr	r2, [pc, #40]	; (8006cb4 <HAL_RCC_ClockConfig+0x360>)
 8006c8a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006c8c:	4a0a      	ldr	r2, [pc, #40]	; (8006cb8 <HAL_RCC_ClockConfig+0x364>)
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006c92:	4b0a      	ldr	r3, [pc, #40]	; (8006cbc <HAL_RCC_ClockConfig+0x368>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4618      	mov	r0, r3
 8006c98:	f7fa fbd2 	bl	8001440 <HAL_InitTick>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3718      	adds	r7, #24
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	58024400 	.word	0x58024400
 8006cb0:	0800bb28 	.word	0x0800bb28
 8006cb4:	24000004 	.word	0x24000004
 8006cb8:	24000000 	.word	0x24000000
 8006cbc:	24000008 	.word	0x24000008

08006cc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b089      	sub	sp, #36	; 0x24
 8006cc4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006cc6:	4bb3      	ldr	r3, [pc, #716]	; (8006f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006cce:	2b18      	cmp	r3, #24
 8006cd0:	f200 8155 	bhi.w	8006f7e <HAL_RCC_GetSysClockFreq+0x2be>
 8006cd4:	a201      	add	r2, pc, #4	; (adr r2, 8006cdc <HAL_RCC_GetSysClockFreq+0x1c>)
 8006cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cda:	bf00      	nop
 8006cdc:	08006d41 	.word	0x08006d41
 8006ce0:	08006f7f 	.word	0x08006f7f
 8006ce4:	08006f7f 	.word	0x08006f7f
 8006ce8:	08006f7f 	.word	0x08006f7f
 8006cec:	08006f7f 	.word	0x08006f7f
 8006cf0:	08006f7f 	.word	0x08006f7f
 8006cf4:	08006f7f 	.word	0x08006f7f
 8006cf8:	08006f7f 	.word	0x08006f7f
 8006cfc:	08006d67 	.word	0x08006d67
 8006d00:	08006f7f 	.word	0x08006f7f
 8006d04:	08006f7f 	.word	0x08006f7f
 8006d08:	08006f7f 	.word	0x08006f7f
 8006d0c:	08006f7f 	.word	0x08006f7f
 8006d10:	08006f7f 	.word	0x08006f7f
 8006d14:	08006f7f 	.word	0x08006f7f
 8006d18:	08006f7f 	.word	0x08006f7f
 8006d1c:	08006d6d 	.word	0x08006d6d
 8006d20:	08006f7f 	.word	0x08006f7f
 8006d24:	08006f7f 	.word	0x08006f7f
 8006d28:	08006f7f 	.word	0x08006f7f
 8006d2c:	08006f7f 	.word	0x08006f7f
 8006d30:	08006f7f 	.word	0x08006f7f
 8006d34:	08006f7f 	.word	0x08006f7f
 8006d38:	08006f7f 	.word	0x08006f7f
 8006d3c:	08006d73 	.word	0x08006d73
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d40:	4b94      	ldr	r3, [pc, #592]	; (8006f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 0320 	and.w	r3, r3, #32
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d009      	beq.n	8006d60 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d4c:	4b91      	ldr	r3, [pc, #580]	; (8006f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	08db      	lsrs	r3, r3, #3
 8006d52:	f003 0303 	and.w	r3, r3, #3
 8006d56:	4a90      	ldr	r2, [pc, #576]	; (8006f98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006d58:	fa22 f303 	lsr.w	r3, r2, r3
 8006d5c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006d5e:	e111      	b.n	8006f84 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006d60:	4b8d      	ldr	r3, [pc, #564]	; (8006f98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006d62:	61bb      	str	r3, [r7, #24]
      break;
 8006d64:	e10e      	b.n	8006f84 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006d66:	4b8d      	ldr	r3, [pc, #564]	; (8006f9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006d68:	61bb      	str	r3, [r7, #24]
      break;
 8006d6a:	e10b      	b.n	8006f84 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006d6c:	4b8c      	ldr	r3, [pc, #560]	; (8006fa0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006d6e:	61bb      	str	r3, [r7, #24]
      break;
 8006d70:	e108      	b.n	8006f84 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d72:	4b88      	ldr	r3, [pc, #544]	; (8006f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d76:	f003 0303 	and.w	r3, r3, #3
 8006d7a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006d7c:	4b85      	ldr	r3, [pc, #532]	; (8006f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d80:	091b      	lsrs	r3, r3, #4
 8006d82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d86:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006d88:	4b82      	ldr	r3, [pc, #520]	; (8006f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8c:	f003 0301 	and.w	r3, r3, #1
 8006d90:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006d92:	4b80      	ldr	r3, [pc, #512]	; (8006f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d96:	08db      	lsrs	r3, r3, #3
 8006d98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d9c:	68fa      	ldr	r2, [r7, #12]
 8006d9e:	fb02 f303 	mul.w	r3, r2, r3
 8006da2:	ee07 3a90 	vmov	s15, r3
 8006da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006daa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f000 80e1 	beq.w	8006f78 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	f000 8083 	beq.w	8006ec4 <HAL_RCC_GetSysClockFreq+0x204>
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	f200 80a1 	bhi.w	8006f08 <HAL_RCC_GetSysClockFreq+0x248>
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d003      	beq.n	8006dd4 <HAL_RCC_GetSysClockFreq+0x114>
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d056      	beq.n	8006e80 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006dd2:	e099      	b.n	8006f08 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006dd4:	4b6f      	ldr	r3, [pc, #444]	; (8006f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f003 0320 	and.w	r3, r3, #32
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d02d      	beq.n	8006e3c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006de0:	4b6c      	ldr	r3, [pc, #432]	; (8006f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	08db      	lsrs	r3, r3, #3
 8006de6:	f003 0303 	and.w	r3, r3, #3
 8006dea:	4a6b      	ldr	r2, [pc, #428]	; (8006f98 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006dec:	fa22 f303 	lsr.w	r3, r2, r3
 8006df0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	ee07 3a90 	vmov	s15, r3
 8006df8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	ee07 3a90 	vmov	s15, r3
 8006e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e0a:	4b62      	ldr	r3, [pc, #392]	; (8006f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e12:	ee07 3a90 	vmov	s15, r3
 8006e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e1e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006fa4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e36:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006e3a:	e087      	b.n	8006f4c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	ee07 3a90 	vmov	s15, r3
 8006e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e46:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006fa8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e4e:	4b51      	ldr	r3, [pc, #324]	; (8006f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e56:	ee07 3a90 	vmov	s15, r3
 8006e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e62:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006fa4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006e7e:	e065      	b.n	8006f4c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	ee07 3a90 	vmov	s15, r3
 8006e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e8a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006fac <HAL_RCC_GetSysClockFreq+0x2ec>
 8006e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e92:	4b40      	ldr	r3, [pc, #256]	; (8006f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e9a:	ee07 3a90 	vmov	s15, r3
 8006e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ea2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ea6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006fa4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ebe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006ec2:	e043      	b.n	8006f4c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	ee07 3a90 	vmov	s15, r3
 8006eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ece:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006fb0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ed6:	4b2f      	ldr	r3, [pc, #188]	; (8006f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ede:	ee07 3a90 	vmov	s15, r3
 8006ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ee6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006eea:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006fa4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ef6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006f06:	e021      	b.n	8006f4c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	ee07 3a90 	vmov	s15, r3
 8006f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f12:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006fac <HAL_RCC_GetSysClockFreq+0x2ec>
 8006f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f1a:	4b1e      	ldr	r3, [pc, #120]	; (8006f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f22:	ee07 3a90 	vmov	s15, r3
 8006f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f2e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006fa4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006f4a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006f4c:	4b11      	ldr	r3, [pc, #68]	; (8006f94 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f50:	0a5b      	lsrs	r3, r3, #9
 8006f52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f56:	3301      	adds	r3, #1
 8006f58:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	ee07 3a90 	vmov	s15, r3
 8006f60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006f64:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f70:	ee17 3a90 	vmov	r3, s15
 8006f74:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006f76:	e005      	b.n	8006f84 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	61bb      	str	r3, [r7, #24]
      break;
 8006f7c:	e002      	b.n	8006f84 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006f7e:	4b07      	ldr	r3, [pc, #28]	; (8006f9c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006f80:	61bb      	str	r3, [r7, #24]
      break;
 8006f82:	bf00      	nop
  }

  return sysclockfreq;
 8006f84:	69bb      	ldr	r3, [r7, #24]
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3724      	adds	r7, #36	; 0x24
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	58024400 	.word	0x58024400
 8006f98:	03d09000 	.word	0x03d09000
 8006f9c:	003d0900 	.word	0x003d0900
 8006fa0:	007a1200 	.word	0x007a1200
 8006fa4:	46000000 	.word	0x46000000
 8006fa8:	4c742400 	.word	0x4c742400
 8006fac:	4a742400 	.word	0x4a742400
 8006fb0:	4af42400 	.word	0x4af42400

08006fb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006fba:	f7ff fe81 	bl	8006cc0 <HAL_RCC_GetSysClockFreq>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	4b10      	ldr	r3, [pc, #64]	; (8007004 <HAL_RCC_GetHCLKFreq+0x50>)
 8006fc2:	699b      	ldr	r3, [r3, #24]
 8006fc4:	0a1b      	lsrs	r3, r3, #8
 8006fc6:	f003 030f 	and.w	r3, r3, #15
 8006fca:	490f      	ldr	r1, [pc, #60]	; (8007008 <HAL_RCC_GetHCLKFreq+0x54>)
 8006fcc:	5ccb      	ldrb	r3, [r1, r3]
 8006fce:	f003 031f 	and.w	r3, r3, #31
 8006fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8006fd6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006fd8:	4b0a      	ldr	r3, [pc, #40]	; (8007004 <HAL_RCC_GetHCLKFreq+0x50>)
 8006fda:	699b      	ldr	r3, [r3, #24]
 8006fdc:	f003 030f 	and.w	r3, r3, #15
 8006fe0:	4a09      	ldr	r2, [pc, #36]	; (8007008 <HAL_RCC_GetHCLKFreq+0x54>)
 8006fe2:	5cd3      	ldrb	r3, [r2, r3]
 8006fe4:	f003 031f 	and.w	r3, r3, #31
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	fa22 f303 	lsr.w	r3, r2, r3
 8006fee:	4a07      	ldr	r2, [pc, #28]	; (800700c <HAL_RCC_GetHCLKFreq+0x58>)
 8006ff0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006ff2:	4a07      	ldr	r2, [pc, #28]	; (8007010 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006ff8:	4b04      	ldr	r3, [pc, #16]	; (800700c <HAL_RCC_GetHCLKFreq+0x58>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3708      	adds	r7, #8
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}
 8007004:	58024400 	.word	0x58024400
 8007008:	0800bb28 	.word	0x0800bb28
 800700c:	24000004 	.word	0x24000004
 8007010:	24000000 	.word	0x24000000

08007014 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007018:	f7ff ffcc 	bl	8006fb4 <HAL_RCC_GetHCLKFreq>
 800701c:	4602      	mov	r2, r0
 800701e:	4b06      	ldr	r3, [pc, #24]	; (8007038 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007020:	69db      	ldr	r3, [r3, #28]
 8007022:	091b      	lsrs	r3, r3, #4
 8007024:	f003 0307 	and.w	r3, r3, #7
 8007028:	4904      	ldr	r1, [pc, #16]	; (800703c <HAL_RCC_GetPCLK1Freq+0x28>)
 800702a:	5ccb      	ldrb	r3, [r1, r3]
 800702c:	f003 031f 	and.w	r3, r3, #31
 8007030:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007034:	4618      	mov	r0, r3
 8007036:	bd80      	pop	{r7, pc}
 8007038:	58024400 	.word	0x58024400
 800703c:	0800bb28 	.word	0x0800bb28

08007040 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007044:	f7ff ffb6 	bl	8006fb4 <HAL_RCC_GetHCLKFreq>
 8007048:	4602      	mov	r2, r0
 800704a:	4b06      	ldr	r3, [pc, #24]	; (8007064 <HAL_RCC_GetPCLK2Freq+0x24>)
 800704c:	69db      	ldr	r3, [r3, #28]
 800704e:	0a1b      	lsrs	r3, r3, #8
 8007050:	f003 0307 	and.w	r3, r3, #7
 8007054:	4904      	ldr	r1, [pc, #16]	; (8007068 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007056:	5ccb      	ldrb	r3, [r1, r3]
 8007058:	f003 031f 	and.w	r3, r3, #31
 800705c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007060:	4618      	mov	r0, r3
 8007062:	bd80      	pop	{r7, pc}
 8007064:	58024400 	.word	0x58024400
 8007068:	0800bb28 	.word	0x0800bb28

0800706c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800706c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007070:	b0ca      	sub	sp, #296	; 0x128
 8007072:	af00      	add	r7, sp, #0
 8007074:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007078:	2300      	movs	r3, #0
 800707a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800707e:	2300      	movs	r3, #0
 8007080:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007084:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8007090:	2500      	movs	r5, #0
 8007092:	ea54 0305 	orrs.w	r3, r4, r5
 8007096:	d049      	beq.n	800712c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007098:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800709c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800709e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80070a2:	d02f      	beq.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80070a4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80070a8:	d828      	bhi.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80070aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070ae:	d01a      	beq.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80070b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070b4:	d822      	bhi.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d003      	beq.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80070ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070be:	d007      	beq.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80070c0:	e01c      	b.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070c2:	4bb8      	ldr	r3, [pc, #736]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c6:	4ab7      	ldr	r2, [pc, #732]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80070ce:	e01a      	b.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80070d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070d4:	3308      	adds	r3, #8
 80070d6:	2102      	movs	r1, #2
 80070d8:	4618      	mov	r0, r3
 80070da:	f002 fb61 	bl	80097a0 <RCCEx_PLL2_Config>
 80070de:	4603      	mov	r3, r0
 80070e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80070e4:	e00f      	b.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80070e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070ea:	3328      	adds	r3, #40	; 0x28
 80070ec:	2102      	movs	r1, #2
 80070ee:	4618      	mov	r0, r3
 80070f0:	f002 fc08 	bl	8009904 <RCCEx_PLL3_Config>
 80070f4:	4603      	mov	r3, r0
 80070f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80070fa:	e004      	b.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007102:	e000      	b.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007104:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007106:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800710a:	2b00      	cmp	r3, #0
 800710c:	d10a      	bne.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800710e:	4ba5      	ldr	r3, [pc, #660]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007112:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007116:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800711a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800711c:	4aa1      	ldr	r2, [pc, #644]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800711e:	430b      	orrs	r3, r1
 8007120:	6513      	str	r3, [r2, #80]	; 0x50
 8007122:	e003      	b.n	800712c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007124:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007128:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800712c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007134:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8007138:	f04f 0900 	mov.w	r9, #0
 800713c:	ea58 0309 	orrs.w	r3, r8, r9
 8007140:	d047      	beq.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007142:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007148:	2b04      	cmp	r3, #4
 800714a:	d82a      	bhi.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800714c:	a201      	add	r2, pc, #4	; (adr r2, 8007154 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800714e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007152:	bf00      	nop
 8007154:	08007169 	.word	0x08007169
 8007158:	08007177 	.word	0x08007177
 800715c:	0800718d 	.word	0x0800718d
 8007160:	080071ab 	.word	0x080071ab
 8007164:	080071ab 	.word	0x080071ab
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007168:	4b8e      	ldr	r3, [pc, #568]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800716a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800716c:	4a8d      	ldr	r2, [pc, #564]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800716e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007172:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007174:	e01a      	b.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007176:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800717a:	3308      	adds	r3, #8
 800717c:	2100      	movs	r1, #0
 800717e:	4618      	mov	r0, r3
 8007180:	f002 fb0e 	bl	80097a0 <RCCEx_PLL2_Config>
 8007184:	4603      	mov	r3, r0
 8007186:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800718a:	e00f      	b.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800718c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007190:	3328      	adds	r3, #40	; 0x28
 8007192:	2100      	movs	r1, #0
 8007194:	4618      	mov	r0, r3
 8007196:	f002 fbb5 	bl	8009904 <RCCEx_PLL3_Config>
 800719a:	4603      	mov	r3, r0
 800719c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80071a0:	e004      	b.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80071a8:	e000      	b.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80071aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d10a      	bne.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80071b4:	4b7b      	ldr	r3, [pc, #492]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80071b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071b8:	f023 0107 	bic.w	r1, r3, #7
 80071bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071c2:	4a78      	ldr	r2, [pc, #480]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80071c4:	430b      	orrs	r3, r1
 80071c6:	6513      	str	r3, [r2, #80]	; 0x50
 80071c8:	e003      	b.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80071d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071da:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80071de:	f04f 0b00 	mov.w	fp, #0
 80071e2:	ea5a 030b 	orrs.w	r3, sl, fp
 80071e6:	d04c      	beq.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80071e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071f2:	d030      	beq.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80071f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071f8:	d829      	bhi.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80071fa:	2bc0      	cmp	r3, #192	; 0xc0
 80071fc:	d02d      	beq.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80071fe:	2bc0      	cmp	r3, #192	; 0xc0
 8007200:	d825      	bhi.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007202:	2b80      	cmp	r3, #128	; 0x80
 8007204:	d018      	beq.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007206:	2b80      	cmp	r3, #128	; 0x80
 8007208:	d821      	bhi.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800720a:	2b00      	cmp	r3, #0
 800720c:	d002      	beq.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800720e:	2b40      	cmp	r3, #64	; 0x40
 8007210:	d007      	beq.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007212:	e01c      	b.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007214:	4b63      	ldr	r3, [pc, #396]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007218:	4a62      	ldr	r2, [pc, #392]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800721a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800721e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007220:	e01c      	b.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007222:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007226:	3308      	adds	r3, #8
 8007228:	2100      	movs	r1, #0
 800722a:	4618      	mov	r0, r3
 800722c:	f002 fab8 	bl	80097a0 <RCCEx_PLL2_Config>
 8007230:	4603      	mov	r3, r0
 8007232:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007236:	e011      	b.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007238:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800723c:	3328      	adds	r3, #40	; 0x28
 800723e:	2100      	movs	r1, #0
 8007240:	4618      	mov	r0, r3
 8007242:	f002 fb5f 	bl	8009904 <RCCEx_PLL3_Config>
 8007246:	4603      	mov	r3, r0
 8007248:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800724c:	e006      	b.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007254:	e002      	b.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007256:	bf00      	nop
 8007258:	e000      	b.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800725a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800725c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007260:	2b00      	cmp	r3, #0
 8007262:	d10a      	bne.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007264:	4b4f      	ldr	r3, [pc, #316]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007268:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800726c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007272:	4a4c      	ldr	r2, [pc, #304]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007274:	430b      	orrs	r3, r1
 8007276:	6513      	str	r3, [r2, #80]	; 0x50
 8007278:	e003      	b.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800727a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800727e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007282:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800728e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007292:	2300      	movs	r3, #0
 8007294:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007298:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800729c:	460b      	mov	r3, r1
 800729e:	4313      	orrs	r3, r2
 80072a0:	d053      	beq.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80072a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80072aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80072ae:	d035      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80072b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80072b4:	d82e      	bhi.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80072b6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80072ba:	d031      	beq.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80072bc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80072c0:	d828      	bhi.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80072c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072c6:	d01a      	beq.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x292>
 80072c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072cc:	d822      	bhi.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d003      	beq.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80072d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072d6:	d007      	beq.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80072d8:	e01c      	b.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072da:	4b32      	ldr	r3, [pc, #200]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80072dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072de:	4a31      	ldr	r2, [pc, #196]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80072e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80072e6:	e01c      	b.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80072e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072ec:	3308      	adds	r3, #8
 80072ee:	2100      	movs	r1, #0
 80072f0:	4618      	mov	r0, r3
 80072f2:	f002 fa55 	bl	80097a0 <RCCEx_PLL2_Config>
 80072f6:	4603      	mov	r3, r0
 80072f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80072fc:	e011      	b.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80072fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007302:	3328      	adds	r3, #40	; 0x28
 8007304:	2100      	movs	r1, #0
 8007306:	4618      	mov	r0, r3
 8007308:	f002 fafc 	bl	8009904 <RCCEx_PLL3_Config>
 800730c:	4603      	mov	r3, r0
 800730e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007312:	e006      	b.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007314:	2301      	movs	r3, #1
 8007316:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800731a:	e002      	b.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800731c:	bf00      	nop
 800731e:	e000      	b.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007320:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007322:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007326:	2b00      	cmp	r3, #0
 8007328:	d10b      	bne.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800732a:	4b1e      	ldr	r3, [pc, #120]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800732c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800732e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8007332:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007336:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800733a:	4a1a      	ldr	r2, [pc, #104]	; (80073a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800733c:	430b      	orrs	r3, r1
 800733e:	6593      	str	r3, [r2, #88]	; 0x58
 8007340:	e003      	b.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007342:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007346:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800734a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800734e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007352:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8007356:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800735a:	2300      	movs	r3, #0
 800735c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007360:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8007364:	460b      	mov	r3, r1
 8007366:	4313      	orrs	r3, r2
 8007368:	d056      	beq.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800736a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800736e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007372:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007376:	d038      	beq.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007378:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800737c:	d831      	bhi.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800737e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007382:	d034      	beq.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007384:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007388:	d82b      	bhi.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800738a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800738e:	d01d      	beq.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007390:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007394:	d825      	bhi.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007396:	2b00      	cmp	r3, #0
 8007398:	d006      	beq.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800739a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800739e:	d00a      	beq.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80073a0:	e01f      	b.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80073a2:	bf00      	nop
 80073a4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073a8:	4ba2      	ldr	r3, [pc, #648]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80073aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ac:	4aa1      	ldr	r2, [pc, #644]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80073ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80073b4:	e01c      	b.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073ba:	3308      	adds	r3, #8
 80073bc:	2100      	movs	r1, #0
 80073be:	4618      	mov	r0, r3
 80073c0:	f002 f9ee 	bl	80097a0 <RCCEx_PLL2_Config>
 80073c4:	4603      	mov	r3, r0
 80073c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80073ca:	e011      	b.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80073cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073d0:	3328      	adds	r3, #40	; 0x28
 80073d2:	2100      	movs	r1, #0
 80073d4:	4618      	mov	r0, r3
 80073d6:	f002 fa95 	bl	8009904 <RCCEx_PLL3_Config>
 80073da:	4603      	mov	r3, r0
 80073dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80073e0:	e006      	b.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80073e8:	e002      	b.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80073ea:	bf00      	nop
 80073ec:	e000      	b.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80073ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d10b      	bne.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80073f8:	4b8e      	ldr	r3, [pc, #568]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80073fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073fc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8007400:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007404:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007408:	4a8a      	ldr	r2, [pc, #552]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800740a:	430b      	orrs	r3, r1
 800740c:	6593      	str	r3, [r2, #88]	; 0x58
 800740e:	e003      	b.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007410:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007414:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007418:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800741c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007420:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8007424:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007428:	2300      	movs	r3, #0
 800742a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800742e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8007432:	460b      	mov	r3, r1
 8007434:	4313      	orrs	r3, r2
 8007436:	d03a      	beq.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007438:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800743c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800743e:	2b30      	cmp	r3, #48	; 0x30
 8007440:	d01f      	beq.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007442:	2b30      	cmp	r3, #48	; 0x30
 8007444:	d819      	bhi.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007446:	2b20      	cmp	r3, #32
 8007448:	d00c      	beq.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800744a:	2b20      	cmp	r3, #32
 800744c:	d815      	bhi.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800744e:	2b00      	cmp	r3, #0
 8007450:	d019      	beq.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007452:	2b10      	cmp	r3, #16
 8007454:	d111      	bne.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007456:	4b77      	ldr	r3, [pc, #476]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800745a:	4a76      	ldr	r2, [pc, #472]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800745c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007460:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007462:	e011      	b.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007464:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007468:	3308      	adds	r3, #8
 800746a:	2102      	movs	r1, #2
 800746c:	4618      	mov	r0, r3
 800746e:	f002 f997 	bl	80097a0 <RCCEx_PLL2_Config>
 8007472:	4603      	mov	r3, r0
 8007474:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007478:	e006      	b.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007480:	e002      	b.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007482:	bf00      	nop
 8007484:	e000      	b.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007486:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007488:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800748c:	2b00      	cmp	r3, #0
 800748e:	d10a      	bne.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007490:	4b68      	ldr	r3, [pc, #416]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007494:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8007498:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800749c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800749e:	4a65      	ldr	r2, [pc, #404]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80074a0:	430b      	orrs	r3, r1
 80074a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80074a4:	e003      	b.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80074ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80074ba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80074be:	2300      	movs	r3, #0
 80074c0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80074c4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80074c8:	460b      	mov	r3, r1
 80074ca:	4313      	orrs	r3, r2
 80074cc:	d051      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80074ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074d8:	d035      	beq.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80074da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074de:	d82e      	bhi.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80074e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80074e4:	d031      	beq.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80074e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80074ea:	d828      	bhi.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80074ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074f0:	d01a      	beq.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80074f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074f6:	d822      	bhi.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d003      	beq.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80074fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007500:	d007      	beq.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007502:	e01c      	b.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007504:	4b4b      	ldr	r3, [pc, #300]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007508:	4a4a      	ldr	r2, [pc, #296]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800750a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800750e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007510:	e01c      	b.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007512:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007516:	3308      	adds	r3, #8
 8007518:	2100      	movs	r1, #0
 800751a:	4618      	mov	r0, r3
 800751c:	f002 f940 	bl	80097a0 <RCCEx_PLL2_Config>
 8007520:	4603      	mov	r3, r0
 8007522:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007526:	e011      	b.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007528:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800752c:	3328      	adds	r3, #40	; 0x28
 800752e:	2100      	movs	r1, #0
 8007530:	4618      	mov	r0, r3
 8007532:	f002 f9e7 	bl	8009904 <RCCEx_PLL3_Config>
 8007536:	4603      	mov	r3, r0
 8007538:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800753c:	e006      	b.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007544:	e002      	b.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007546:	bf00      	nop
 8007548:	e000      	b.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800754a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800754c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007550:	2b00      	cmp	r3, #0
 8007552:	d10a      	bne.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007554:	4b37      	ldr	r3, [pc, #220]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007558:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800755c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007562:	4a34      	ldr	r2, [pc, #208]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007564:	430b      	orrs	r3, r1
 8007566:	6513      	str	r3, [r2, #80]	; 0x50
 8007568:	e003      	b.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800756a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800756e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007572:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800757a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800757e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007582:	2300      	movs	r3, #0
 8007584:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007588:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800758c:	460b      	mov	r3, r1
 800758e:	4313      	orrs	r3, r2
 8007590:	d056      	beq.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007592:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007596:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007598:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800759c:	d033      	beq.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800759e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80075a2:	d82c      	bhi.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80075a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80075a8:	d02f      	beq.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80075aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80075ae:	d826      	bhi.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80075b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80075b4:	d02b      	beq.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80075b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80075ba:	d820      	bhi.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80075bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075c0:	d012      	beq.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80075c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075c6:	d81a      	bhi.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d022      	beq.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80075cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075d0:	d115      	bne.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80075d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075d6:	3308      	adds	r3, #8
 80075d8:	2101      	movs	r1, #1
 80075da:	4618      	mov	r0, r3
 80075dc:	f002 f8e0 	bl	80097a0 <RCCEx_PLL2_Config>
 80075e0:	4603      	mov	r3, r0
 80075e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80075e6:	e015      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80075e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075ec:	3328      	adds	r3, #40	; 0x28
 80075ee:	2101      	movs	r1, #1
 80075f0:	4618      	mov	r0, r3
 80075f2:	f002 f987 	bl	8009904 <RCCEx_PLL3_Config>
 80075f6:	4603      	mov	r3, r0
 80075f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80075fc:	e00a      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007604:	e006      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007606:	bf00      	nop
 8007608:	e004      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800760a:	bf00      	nop
 800760c:	e002      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800760e:	bf00      	nop
 8007610:	e000      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007612:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007614:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007618:	2b00      	cmp	r3, #0
 800761a:	d10d      	bne.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800761c:	4b05      	ldr	r3, [pc, #20]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800761e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007620:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007624:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007628:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800762a:	4a02      	ldr	r2, [pc, #8]	; (8007634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800762c:	430b      	orrs	r3, r1
 800762e:	6513      	str	r3, [r2, #80]	; 0x50
 8007630:	e006      	b.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007632:	bf00      	nop
 8007634:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007638:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800763c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007640:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007648:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800764c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007650:	2300      	movs	r3, #0
 8007652:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007656:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800765a:	460b      	mov	r3, r1
 800765c:	4313      	orrs	r3, r2
 800765e:	d055      	beq.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007660:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007664:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007668:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800766c:	d033      	beq.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800766e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007672:	d82c      	bhi.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007678:	d02f      	beq.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800767a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800767e:	d826      	bhi.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007680:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007684:	d02b      	beq.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007686:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800768a:	d820      	bhi.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 800768c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007690:	d012      	beq.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007692:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007696:	d81a      	bhi.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007698:	2b00      	cmp	r3, #0
 800769a:	d022      	beq.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800769c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076a0:	d115      	bne.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80076a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076a6:	3308      	adds	r3, #8
 80076a8:	2101      	movs	r1, #1
 80076aa:	4618      	mov	r0, r3
 80076ac:	f002 f878 	bl	80097a0 <RCCEx_PLL2_Config>
 80076b0:	4603      	mov	r3, r0
 80076b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80076b6:	e015      	b.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80076b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076bc:	3328      	adds	r3, #40	; 0x28
 80076be:	2101      	movs	r1, #1
 80076c0:	4618      	mov	r0, r3
 80076c2:	f002 f91f 	bl	8009904 <RCCEx_PLL3_Config>
 80076c6:	4603      	mov	r3, r0
 80076c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80076cc:	e00a      	b.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
 80076d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80076d4:	e006      	b.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80076d6:	bf00      	nop
 80076d8:	e004      	b.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80076da:	bf00      	nop
 80076dc:	e002      	b.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80076de:	bf00      	nop
 80076e0:	e000      	b.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80076e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d10b      	bne.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80076ec:	4ba3      	ldr	r3, [pc, #652]	; (800797c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076f0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80076f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80076fc:	4a9f      	ldr	r2, [pc, #636]	; (800797c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076fe:	430b      	orrs	r3, r1
 8007700:	6593      	str	r3, [r2, #88]	; 0x58
 8007702:	e003      	b.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007704:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007708:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800770c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007714:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8007718:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800771c:	2300      	movs	r3, #0
 800771e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007722:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007726:	460b      	mov	r3, r1
 8007728:	4313      	orrs	r3, r2
 800772a:	d037      	beq.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800772c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007732:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007736:	d00e      	beq.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007738:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800773c:	d816      	bhi.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800773e:	2b00      	cmp	r3, #0
 8007740:	d018      	beq.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007742:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007746:	d111      	bne.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007748:	4b8c      	ldr	r3, [pc, #560]	; (800797c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800774a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800774c:	4a8b      	ldr	r2, [pc, #556]	; (800797c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800774e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007752:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007754:	e00f      	b.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007756:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800775a:	3308      	adds	r3, #8
 800775c:	2101      	movs	r1, #1
 800775e:	4618      	mov	r0, r3
 8007760:	f002 f81e 	bl	80097a0 <RCCEx_PLL2_Config>
 8007764:	4603      	mov	r3, r0
 8007766:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800776a:	e004      	b.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007772:	e000      	b.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007774:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007776:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800777a:	2b00      	cmp	r3, #0
 800777c:	d10a      	bne.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800777e:	4b7f      	ldr	r3, [pc, #508]	; (800797c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007782:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007786:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800778a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800778c:	4a7b      	ldr	r2, [pc, #492]	; (800797c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800778e:	430b      	orrs	r3, r1
 8007790:	6513      	str	r3, [r2, #80]	; 0x50
 8007792:	e003      	b.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007794:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007798:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800779c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80077a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80077ac:	2300      	movs	r3, #0
 80077ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80077b2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80077b6:	460b      	mov	r3, r1
 80077b8:	4313      	orrs	r3, r2
 80077ba:	d039      	beq.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80077bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077c2:	2b03      	cmp	r3, #3
 80077c4:	d81c      	bhi.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80077c6:	a201      	add	r2, pc, #4	; (adr r2, 80077cc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80077c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077cc:	08007809 	.word	0x08007809
 80077d0:	080077dd 	.word	0x080077dd
 80077d4:	080077eb 	.word	0x080077eb
 80077d8:	08007809 	.word	0x08007809
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077dc:	4b67      	ldr	r3, [pc, #412]	; (800797c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e0:	4a66      	ldr	r2, [pc, #408]	; (800797c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80077e8:	e00f      	b.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80077ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077ee:	3308      	adds	r3, #8
 80077f0:	2102      	movs	r1, #2
 80077f2:	4618      	mov	r0, r3
 80077f4:	f001 ffd4 	bl	80097a0 <RCCEx_PLL2_Config>
 80077f8:	4603      	mov	r3, r0
 80077fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80077fe:	e004      	b.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007806:	e000      	b.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007808:	bf00      	nop
    }

    if (ret == HAL_OK)
 800780a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800780e:	2b00      	cmp	r3, #0
 8007810:	d10a      	bne.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007812:	4b5a      	ldr	r3, [pc, #360]	; (800797c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007816:	f023 0103 	bic.w	r1, r3, #3
 800781a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800781e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007820:	4a56      	ldr	r2, [pc, #344]	; (800797c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007822:	430b      	orrs	r3, r1
 8007824:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007826:	e003      	b.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007828:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800782c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007830:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007838:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800783c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007840:	2300      	movs	r3, #0
 8007842:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007846:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800784a:	460b      	mov	r3, r1
 800784c:	4313      	orrs	r3, r2
 800784e:	f000 809f 	beq.w	8007990 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007852:	4b4b      	ldr	r3, [pc, #300]	; (8007980 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a4a      	ldr	r2, [pc, #296]	; (8007980 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800785c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800785e:	f7f9 fe39 	bl	80014d4 <HAL_GetTick>
 8007862:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007866:	e00b      	b.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007868:	f7f9 fe34 	bl	80014d4 <HAL_GetTick>
 800786c:	4602      	mov	r2, r0
 800786e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007872:	1ad3      	subs	r3, r2, r3
 8007874:	2b64      	cmp	r3, #100	; 0x64
 8007876:	d903      	bls.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007878:	2303      	movs	r3, #3
 800787a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800787e:	e005      	b.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007880:	4b3f      	ldr	r3, [pc, #252]	; (8007980 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007888:	2b00      	cmp	r3, #0
 800788a:	d0ed      	beq.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800788c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007890:	2b00      	cmp	r3, #0
 8007892:	d179      	bne.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007894:	4b39      	ldr	r3, [pc, #228]	; (800797c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007896:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007898:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800789c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80078a0:	4053      	eors	r3, r2
 80078a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d015      	beq.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80078aa:	4b34      	ldr	r3, [pc, #208]	; (800797c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078b2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80078b6:	4b31      	ldr	r3, [pc, #196]	; (800797c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ba:	4a30      	ldr	r2, [pc, #192]	; (800797c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078c0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80078c2:	4b2e      	ldr	r3, [pc, #184]	; (800797c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078c6:	4a2d      	ldr	r2, [pc, #180]	; (800797c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078cc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80078ce:	4a2b      	ldr	r2, [pc, #172]	; (800797c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80078d4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80078d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80078de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078e2:	d118      	bne.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078e4:	f7f9 fdf6 	bl	80014d4 <HAL_GetTick>
 80078e8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80078ec:	e00d      	b.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078ee:	f7f9 fdf1 	bl	80014d4 <HAL_GetTick>
 80078f2:	4602      	mov	r2, r0
 80078f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80078f8:	1ad2      	subs	r2, r2, r3
 80078fa:	f241 3388 	movw	r3, #5000	; 0x1388
 80078fe:	429a      	cmp	r2, r3
 8007900:	d903      	bls.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007902:	2303      	movs	r3, #3
 8007904:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8007908:	e005      	b.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800790a:	4b1c      	ldr	r3, [pc, #112]	; (800797c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800790c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800790e:	f003 0302 	and.w	r3, r3, #2
 8007912:	2b00      	cmp	r3, #0
 8007914:	d0eb      	beq.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007916:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800791a:	2b00      	cmp	r3, #0
 800791c:	d129      	bne.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800791e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007922:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800792a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800792e:	d10e      	bne.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007930:	4b12      	ldr	r3, [pc, #72]	; (800797c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007932:	691b      	ldr	r3, [r3, #16]
 8007934:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007938:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800793c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007940:	091a      	lsrs	r2, r3, #4
 8007942:	4b10      	ldr	r3, [pc, #64]	; (8007984 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007944:	4013      	ands	r3, r2
 8007946:	4a0d      	ldr	r2, [pc, #52]	; (800797c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007948:	430b      	orrs	r3, r1
 800794a:	6113      	str	r3, [r2, #16]
 800794c:	e005      	b.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800794e:	4b0b      	ldr	r3, [pc, #44]	; (800797c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	4a0a      	ldr	r2, [pc, #40]	; (800797c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007954:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007958:	6113      	str	r3, [r2, #16]
 800795a:	4b08      	ldr	r3, [pc, #32]	; (800797c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800795c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800795e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007962:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007966:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800796a:	4a04      	ldr	r2, [pc, #16]	; (800797c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800796c:	430b      	orrs	r3, r1
 800796e:	6713      	str	r3, [r2, #112]	; 0x70
 8007970:	e00e      	b.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007972:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007976:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800797a:	e009      	b.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800797c:	58024400 	.word	0x58024400
 8007980:	58024800 	.word	0x58024800
 8007984:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007988:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800798c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007990:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007998:	f002 0301 	and.w	r3, r2, #1
 800799c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80079a0:	2300      	movs	r3, #0
 80079a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80079a6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80079aa:	460b      	mov	r3, r1
 80079ac:	4313      	orrs	r3, r2
 80079ae:	f000 8089 	beq.w	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80079b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079b8:	2b28      	cmp	r3, #40	; 0x28
 80079ba:	d86b      	bhi.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80079bc:	a201      	add	r2, pc, #4	; (adr r2, 80079c4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80079be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c2:	bf00      	nop
 80079c4:	08007a9d 	.word	0x08007a9d
 80079c8:	08007a95 	.word	0x08007a95
 80079cc:	08007a95 	.word	0x08007a95
 80079d0:	08007a95 	.word	0x08007a95
 80079d4:	08007a95 	.word	0x08007a95
 80079d8:	08007a95 	.word	0x08007a95
 80079dc:	08007a95 	.word	0x08007a95
 80079e0:	08007a95 	.word	0x08007a95
 80079e4:	08007a69 	.word	0x08007a69
 80079e8:	08007a95 	.word	0x08007a95
 80079ec:	08007a95 	.word	0x08007a95
 80079f0:	08007a95 	.word	0x08007a95
 80079f4:	08007a95 	.word	0x08007a95
 80079f8:	08007a95 	.word	0x08007a95
 80079fc:	08007a95 	.word	0x08007a95
 8007a00:	08007a95 	.word	0x08007a95
 8007a04:	08007a7f 	.word	0x08007a7f
 8007a08:	08007a95 	.word	0x08007a95
 8007a0c:	08007a95 	.word	0x08007a95
 8007a10:	08007a95 	.word	0x08007a95
 8007a14:	08007a95 	.word	0x08007a95
 8007a18:	08007a95 	.word	0x08007a95
 8007a1c:	08007a95 	.word	0x08007a95
 8007a20:	08007a95 	.word	0x08007a95
 8007a24:	08007a9d 	.word	0x08007a9d
 8007a28:	08007a95 	.word	0x08007a95
 8007a2c:	08007a95 	.word	0x08007a95
 8007a30:	08007a95 	.word	0x08007a95
 8007a34:	08007a95 	.word	0x08007a95
 8007a38:	08007a95 	.word	0x08007a95
 8007a3c:	08007a95 	.word	0x08007a95
 8007a40:	08007a95 	.word	0x08007a95
 8007a44:	08007a9d 	.word	0x08007a9d
 8007a48:	08007a95 	.word	0x08007a95
 8007a4c:	08007a95 	.word	0x08007a95
 8007a50:	08007a95 	.word	0x08007a95
 8007a54:	08007a95 	.word	0x08007a95
 8007a58:	08007a95 	.word	0x08007a95
 8007a5c:	08007a95 	.word	0x08007a95
 8007a60:	08007a95 	.word	0x08007a95
 8007a64:	08007a9d 	.word	0x08007a9d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a6c:	3308      	adds	r3, #8
 8007a6e:	2101      	movs	r1, #1
 8007a70:	4618      	mov	r0, r3
 8007a72:	f001 fe95 	bl	80097a0 <RCCEx_PLL2_Config>
 8007a76:	4603      	mov	r3, r0
 8007a78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007a7c:	e00f      	b.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a82:	3328      	adds	r3, #40	; 0x28
 8007a84:	2101      	movs	r1, #1
 8007a86:	4618      	mov	r0, r3
 8007a88:	f001 ff3c 	bl	8009904 <RCCEx_PLL3_Config>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007a92:	e004      	b.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a94:	2301      	movs	r3, #1
 8007a96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007a9a:	e000      	b.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007a9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d10a      	bne.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007aa6:	4bbf      	ldr	r3, [pc, #764]	; (8007da4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aaa:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8007aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ab2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ab4:	4abb      	ldr	r2, [pc, #748]	; (8007da4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ab6:	430b      	orrs	r3, r1
 8007ab8:	6553      	str	r3, [r2, #84]	; 0x54
 8007aba:	e003      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007abc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ac0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007acc:	f002 0302 	and.w	r3, r2, #2
 8007ad0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007ada:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8007ade:	460b      	mov	r3, r1
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	d041      	beq.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ae8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007aea:	2b05      	cmp	r3, #5
 8007aec:	d824      	bhi.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007aee:	a201      	add	r2, pc, #4	; (adr r2, 8007af4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af4:	08007b41 	.word	0x08007b41
 8007af8:	08007b0d 	.word	0x08007b0d
 8007afc:	08007b23 	.word	0x08007b23
 8007b00:	08007b41 	.word	0x08007b41
 8007b04:	08007b41 	.word	0x08007b41
 8007b08:	08007b41 	.word	0x08007b41
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b10:	3308      	adds	r3, #8
 8007b12:	2101      	movs	r1, #1
 8007b14:	4618      	mov	r0, r3
 8007b16:	f001 fe43 	bl	80097a0 <RCCEx_PLL2_Config>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007b20:	e00f      	b.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b26:	3328      	adds	r3, #40	; 0x28
 8007b28:	2101      	movs	r1, #1
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f001 feea 	bl	8009904 <RCCEx_PLL3_Config>
 8007b30:	4603      	mov	r3, r0
 8007b32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007b36:	e004      	b.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007b3e:	e000      	b.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007b40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d10a      	bne.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007b4a:	4b96      	ldr	r3, [pc, #600]	; (8007da4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b4e:	f023 0107 	bic.w	r1, r3, #7
 8007b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b58:	4a92      	ldr	r2, [pc, #584]	; (8007da4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b5a:	430b      	orrs	r3, r1
 8007b5c:	6553      	str	r3, [r2, #84]	; 0x54
 8007b5e:	e003      	b.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b64:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b70:	f002 0304 	and.w	r3, r2, #4
 8007b74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b78:	2300      	movs	r3, #0
 8007b7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b7e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8007b82:	460b      	mov	r3, r1
 8007b84:	4313      	orrs	r3, r2
 8007b86:	d044      	beq.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b90:	2b05      	cmp	r3, #5
 8007b92:	d825      	bhi.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007b94:	a201      	add	r2, pc, #4	; (adr r2, 8007b9c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b9a:	bf00      	nop
 8007b9c:	08007be9 	.word	0x08007be9
 8007ba0:	08007bb5 	.word	0x08007bb5
 8007ba4:	08007bcb 	.word	0x08007bcb
 8007ba8:	08007be9 	.word	0x08007be9
 8007bac:	08007be9 	.word	0x08007be9
 8007bb0:	08007be9 	.word	0x08007be9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bb8:	3308      	adds	r3, #8
 8007bba:	2101      	movs	r1, #1
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f001 fdef 	bl	80097a0 <RCCEx_PLL2_Config>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007bc8:	e00f      	b.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bce:	3328      	adds	r3, #40	; 0x28
 8007bd0:	2101      	movs	r1, #1
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f001 fe96 	bl	8009904 <RCCEx_PLL3_Config>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007bde:	e004      	b.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007be6:	e000      	b.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007be8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d10b      	bne.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007bf2:	4b6c      	ldr	r3, [pc, #432]	; (8007da4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bf6:	f023 0107 	bic.w	r1, r3, #7
 8007bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c02:	4a68      	ldr	r2, [pc, #416]	; (8007da4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007c04:	430b      	orrs	r3, r1
 8007c06:	6593      	str	r3, [r2, #88]	; 0x58
 8007c08:	e003      	b.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1a:	f002 0320 	and.w	r3, r2, #32
 8007c1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007c22:	2300      	movs	r3, #0
 8007c24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007c28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007c2c:	460b      	mov	r3, r1
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	d055      	beq.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c3e:	d033      	beq.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007c40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c44:	d82c      	bhi.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c4a:	d02f      	beq.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c50:	d826      	bhi.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007c52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007c56:	d02b      	beq.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007c58:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007c5c:	d820      	bhi.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007c5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c62:	d012      	beq.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007c64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c68:	d81a      	bhi.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d022      	beq.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007c6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c72:	d115      	bne.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c78:	3308      	adds	r3, #8
 8007c7a:	2100      	movs	r1, #0
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f001 fd8f 	bl	80097a0 <RCCEx_PLL2_Config>
 8007c82:	4603      	mov	r3, r0
 8007c84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007c88:	e015      	b.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c8e:	3328      	adds	r3, #40	; 0x28
 8007c90:	2102      	movs	r1, #2
 8007c92:	4618      	mov	r0, r3
 8007c94:	f001 fe36 	bl	8009904 <RCCEx_PLL3_Config>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007c9e:	e00a      	b.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007ca6:	e006      	b.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007ca8:	bf00      	nop
 8007caa:	e004      	b.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007cac:	bf00      	nop
 8007cae:	e002      	b.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007cb0:	bf00      	nop
 8007cb2:	e000      	b.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007cb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d10b      	bne.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007cbe:	4b39      	ldr	r3, [pc, #228]	; (8007da4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cc2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cce:	4a35      	ldr	r2, [pc, #212]	; (8007da4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007cd0:	430b      	orrs	r3, r1
 8007cd2:	6553      	str	r3, [r2, #84]	; 0x54
 8007cd4:	e003      	b.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007cda:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8007cea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007cee:	2300      	movs	r3, #0
 8007cf0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007cf4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	d058      	beq.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007d06:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007d0a:	d033      	beq.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007d0c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007d10:	d82c      	bhi.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d16:	d02f      	beq.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007d18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d1c:	d826      	bhi.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007d1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d22:	d02b      	beq.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007d24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d28:	d820      	bhi.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007d2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d2e:	d012      	beq.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007d30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d34:	d81a      	bhi.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d022      	beq.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007d3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d3e:	d115      	bne.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d44:	3308      	adds	r3, #8
 8007d46:	2100      	movs	r1, #0
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f001 fd29 	bl	80097a0 <RCCEx_PLL2_Config>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007d54:	e015      	b.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d5a:	3328      	adds	r3, #40	; 0x28
 8007d5c:	2102      	movs	r1, #2
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f001 fdd0 	bl	8009904 <RCCEx_PLL3_Config>
 8007d64:	4603      	mov	r3, r0
 8007d66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007d6a:	e00a      	b.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007d72:	e006      	b.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007d74:	bf00      	nop
 8007d76:	e004      	b.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007d78:	bf00      	nop
 8007d7a:	e002      	b.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007d7c:	bf00      	nop
 8007d7e:	e000      	b.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007d80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d10e      	bne.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007d8a:	4b06      	ldr	r3, [pc, #24]	; (8007da4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d8e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8007d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007d9a:	4a02      	ldr	r2, [pc, #8]	; (8007da4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d9c:	430b      	orrs	r3, r1
 8007d9e:	6593      	str	r3, [r2, #88]	; 0x58
 8007da0:	e006      	b.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007da2:	bf00      	nop
 8007da4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007da8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007dac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8007dbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007dc6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8007dca:	460b      	mov	r3, r1
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	d055      	beq.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dd4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007dd8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007ddc:	d033      	beq.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007dde:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007de2:	d82c      	bhi.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007de4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007de8:	d02f      	beq.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007dea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dee:	d826      	bhi.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007df0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007df4:	d02b      	beq.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007df6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007dfa:	d820      	bhi.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007dfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e00:	d012      	beq.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007e02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e06:	d81a      	bhi.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d022      	beq.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007e0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e10:	d115      	bne.n	8007e3e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e16:	3308      	adds	r3, #8
 8007e18:	2100      	movs	r1, #0
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f001 fcc0 	bl	80097a0 <RCCEx_PLL2_Config>
 8007e20:	4603      	mov	r3, r0
 8007e22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007e26:	e015      	b.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e2c:	3328      	adds	r3, #40	; 0x28
 8007e2e:	2102      	movs	r1, #2
 8007e30:	4618      	mov	r0, r3
 8007e32:	f001 fd67 	bl	8009904 <RCCEx_PLL3_Config>
 8007e36:	4603      	mov	r3, r0
 8007e38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007e3c:	e00a      	b.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007e44:	e006      	b.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007e46:	bf00      	nop
 8007e48:	e004      	b.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007e4a:	bf00      	nop
 8007e4c:	e002      	b.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007e4e:	bf00      	nop
 8007e50:	e000      	b.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007e52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d10b      	bne.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007e5c:	4ba1      	ldr	r3, [pc, #644]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e60:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8007e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007e6c:	4a9d      	ldr	r2, [pc, #628]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e6e:	430b      	orrs	r3, r1
 8007e70:	6593      	str	r3, [r2, #88]	; 0x58
 8007e72:	e003      	b.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e78:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e84:	f002 0308 	and.w	r3, r2, #8
 8007e88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007e92:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8007e96:	460b      	mov	r3, r1
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	d01e      	beq.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ea0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ea8:	d10c      	bne.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007eae:	3328      	adds	r3, #40	; 0x28
 8007eb0:	2102      	movs	r1, #2
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f001 fd26 	bl	8009904 <RCCEx_PLL3_Config>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d002      	beq.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007ec4:	4b87      	ldr	r3, [pc, #540]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ec8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ed0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ed4:	4a83      	ldr	r2, [pc, #524]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ed6:	430b      	orrs	r3, r1
 8007ed8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee2:	f002 0310 	and.w	r3, r2, #16
 8007ee6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007eea:	2300      	movs	r3, #0
 8007eec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007ef0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	d01e      	beq.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007efe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007f02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f06:	d10c      	bne.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f0c:	3328      	adds	r3, #40	; 0x28
 8007f0e:	2102      	movs	r1, #2
 8007f10:	4618      	mov	r0, r3
 8007f12:	f001 fcf7 	bl	8009904 <RCCEx_PLL3_Config>
 8007f16:	4603      	mov	r3, r0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d002      	beq.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007f22:	4b70      	ldr	r3, [pc, #448]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f26:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007f32:	4a6c      	ldr	r2, [pc, #432]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f34:	430b      	orrs	r3, r1
 8007f36:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f40:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007f44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007f48:	2300      	movs	r3, #0
 8007f4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007f4e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8007f52:	460b      	mov	r3, r1
 8007f54:	4313      	orrs	r3, r2
 8007f56:	d03e      	beq.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f5c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007f60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f64:	d022      	beq.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007f66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f6a:	d81b      	bhi.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d003      	beq.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f74:	d00b      	beq.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007f76:	e015      	b.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f7c:	3308      	adds	r3, #8
 8007f7e:	2100      	movs	r1, #0
 8007f80:	4618      	mov	r0, r3
 8007f82:	f001 fc0d 	bl	80097a0 <RCCEx_PLL2_Config>
 8007f86:	4603      	mov	r3, r0
 8007f88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007f8c:	e00f      	b.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f92:	3328      	adds	r3, #40	; 0x28
 8007f94:	2102      	movs	r1, #2
 8007f96:	4618      	mov	r0, r3
 8007f98:	f001 fcb4 	bl	8009904 <RCCEx_PLL3_Config>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007fa2:	e004      	b.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007faa:	e000      	b.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007fac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d10b      	bne.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007fb6:	4b4b      	ldr	r3, [pc, #300]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fba:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fc2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007fc6:	4a47      	ldr	r2, [pc, #284]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007fc8:	430b      	orrs	r3, r1
 8007fca:	6593      	str	r3, [r2, #88]	; 0x58
 8007fcc:	e003      	b.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fd2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fde:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8007fe2:	67bb      	str	r3, [r7, #120]	; 0x78
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007fe8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007fec:	460b      	mov	r3, r1
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	d03b      	beq.n	800806a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ffa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007ffe:	d01f      	beq.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008000:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008004:	d818      	bhi.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008006:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800800a:	d003      	beq.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800800c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008010:	d007      	beq.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008012:	e011      	b.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008014:	4b33      	ldr	r3, [pc, #204]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008018:	4a32      	ldr	r2, [pc, #200]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800801a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800801e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008020:	e00f      	b.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008022:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008026:	3328      	adds	r3, #40	; 0x28
 8008028:	2101      	movs	r1, #1
 800802a:	4618      	mov	r0, r3
 800802c:	f001 fc6a 	bl	8009904 <RCCEx_PLL3_Config>
 8008030:	4603      	mov	r3, r0
 8008032:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008036:	e004      	b.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008038:	2301      	movs	r3, #1
 800803a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800803e:	e000      	b.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008040:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008042:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008046:	2b00      	cmp	r3, #0
 8008048:	d10b      	bne.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800804a:	4b26      	ldr	r3, [pc, #152]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800804c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800804e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008052:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800805a:	4a22      	ldr	r2, [pc, #136]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800805c:	430b      	orrs	r3, r1
 800805e:	6553      	str	r3, [r2, #84]	; 0x54
 8008060:	e003      	b.n	800806a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008062:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008066:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800806a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800806e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008072:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8008076:	673b      	str	r3, [r7, #112]	; 0x70
 8008078:	2300      	movs	r3, #0
 800807a:	677b      	str	r3, [r7, #116]	; 0x74
 800807c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8008080:	460b      	mov	r3, r1
 8008082:	4313      	orrs	r3, r2
 8008084:	d034      	beq.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008086:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800808a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800808c:	2b00      	cmp	r3, #0
 800808e:	d003      	beq.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008094:	d007      	beq.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008096:	e011      	b.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008098:	4b12      	ldr	r3, [pc, #72]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800809a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800809c:	4a11      	ldr	r2, [pc, #68]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800809e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80080a4:	e00e      	b.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80080a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080aa:	3308      	adds	r3, #8
 80080ac:	2102      	movs	r1, #2
 80080ae:	4618      	mov	r0, r3
 80080b0:	f001 fb76 	bl	80097a0 <RCCEx_PLL2_Config>
 80080b4:	4603      	mov	r3, r0
 80080b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80080ba:	e003      	b.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80080bc:	2301      	movs	r3, #1
 80080be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80080c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d10d      	bne.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80080cc:	4b05      	ldr	r3, [pc, #20]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80080d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080da:	4a02      	ldr	r2, [pc, #8]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080dc:	430b      	orrs	r3, r1
 80080de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80080e0:	e006      	b.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80080e2:	bf00      	nop
 80080e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80080f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80080fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80080fe:	2300      	movs	r3, #0
 8008100:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008102:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8008106:	460b      	mov	r3, r1
 8008108:	4313      	orrs	r3, r2
 800810a:	d00c      	beq.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800810c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008110:	3328      	adds	r3, #40	; 0x28
 8008112:	2102      	movs	r1, #2
 8008114:	4618      	mov	r0, r3
 8008116:	f001 fbf5 	bl	8009904 <RCCEx_PLL3_Config>
 800811a:	4603      	mov	r3, r0
 800811c:	2b00      	cmp	r3, #0
 800811e:	d002      	beq.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008120:	2301      	movs	r3, #1
 8008122:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008126:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800812a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8008132:	663b      	str	r3, [r7, #96]	; 0x60
 8008134:	2300      	movs	r3, #0
 8008136:	667b      	str	r3, [r7, #100]	; 0x64
 8008138:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800813c:	460b      	mov	r3, r1
 800813e:	4313      	orrs	r3, r2
 8008140:	d038      	beq.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008142:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008146:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800814a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800814e:	d018      	beq.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008150:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008154:	d811      	bhi.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008156:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800815a:	d014      	beq.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800815c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008160:	d80b      	bhi.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008162:	2b00      	cmp	r3, #0
 8008164:	d011      	beq.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008166:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800816a:	d106      	bne.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800816c:	4bc3      	ldr	r3, [pc, #780]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800816e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008170:	4ac2      	ldr	r2, [pc, #776]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008172:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008176:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008178:	e008      	b.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800817a:	2301      	movs	r3, #1
 800817c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008180:	e004      	b.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008182:	bf00      	nop
 8008184:	e002      	b.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008186:	bf00      	nop
 8008188:	e000      	b.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800818a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800818c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008190:	2b00      	cmp	r3, #0
 8008192:	d10b      	bne.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008194:	4bb9      	ldr	r3, [pc, #740]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008198:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800819c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081a4:	4ab5      	ldr	r2, [pc, #724]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80081a6:	430b      	orrs	r3, r1
 80081a8:	6553      	str	r3, [r2, #84]	; 0x54
 80081aa:	e003      	b.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80081b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80081b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081bc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80081c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80081c2:	2300      	movs	r3, #0
 80081c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081c6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80081ca:	460b      	mov	r3, r1
 80081cc:	4313      	orrs	r3, r2
 80081ce:	d009      	beq.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80081d0:	4baa      	ldr	r3, [pc, #680]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80081d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081d4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80081d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081de:	4aa7      	ldr	r2, [pc, #668]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80081e0:	430b      	orrs	r3, r1
 80081e2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80081e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ec:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80081f0:	653b      	str	r3, [r7, #80]	; 0x50
 80081f2:	2300      	movs	r3, #0
 80081f4:	657b      	str	r3, [r7, #84]	; 0x54
 80081f6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80081fa:	460b      	mov	r3, r1
 80081fc:	4313      	orrs	r3, r2
 80081fe:	d00a      	beq.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008200:	4b9e      	ldr	r3, [pc, #632]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008202:	691b      	ldr	r3, [r3, #16]
 8008204:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8008208:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800820c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008210:	4a9a      	ldr	r2, [pc, #616]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008212:	430b      	orrs	r3, r1
 8008214:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008216:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800821a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8008222:	64bb      	str	r3, [r7, #72]	; 0x48
 8008224:	2300      	movs	r3, #0
 8008226:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008228:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800822c:	460b      	mov	r3, r1
 800822e:	4313      	orrs	r3, r2
 8008230:	d009      	beq.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008232:	4b92      	ldr	r3, [pc, #584]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008236:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800823a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800823e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008240:	4a8e      	ldr	r2, [pc, #568]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008242:	430b      	orrs	r3, r1
 8008244:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008246:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800824a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8008252:	643b      	str	r3, [r7, #64]	; 0x40
 8008254:	2300      	movs	r3, #0
 8008256:	647b      	str	r3, [r7, #68]	; 0x44
 8008258:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800825c:	460b      	mov	r3, r1
 800825e:	4313      	orrs	r3, r2
 8008260:	d00e      	beq.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008262:	4b86      	ldr	r3, [pc, #536]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008264:	691b      	ldr	r3, [r3, #16]
 8008266:	4a85      	ldr	r2, [pc, #532]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008268:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800826c:	6113      	str	r3, [r2, #16]
 800826e:	4b83      	ldr	r3, [pc, #524]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008270:	6919      	ldr	r1, [r3, #16]
 8008272:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008276:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800827a:	4a80      	ldr	r2, [pc, #512]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800827c:	430b      	orrs	r3, r1
 800827e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008280:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008288:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800828c:	63bb      	str	r3, [r7, #56]	; 0x38
 800828e:	2300      	movs	r3, #0
 8008290:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008292:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8008296:	460b      	mov	r3, r1
 8008298:	4313      	orrs	r3, r2
 800829a:	d009      	beq.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800829c:	4b77      	ldr	r3, [pc, #476]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800829e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082a0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80082a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082aa:	4a74      	ldr	r2, [pc, #464]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082ac:	430b      	orrs	r3, r1
 80082ae:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80082b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80082bc:	633b      	str	r3, [r7, #48]	; 0x30
 80082be:	2300      	movs	r3, #0
 80082c0:	637b      	str	r3, [r7, #52]	; 0x34
 80082c2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80082c6:	460b      	mov	r3, r1
 80082c8:	4313      	orrs	r3, r2
 80082ca:	d00a      	beq.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80082cc:	4b6b      	ldr	r3, [pc, #428]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082d0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80082d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082dc:	4a67      	ldr	r2, [pc, #412]	; (800847c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082de:	430b      	orrs	r3, r1
 80082e0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80082e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ea:	2100      	movs	r1, #0
 80082ec:	62b9      	str	r1, [r7, #40]	; 0x28
 80082ee:	f003 0301 	and.w	r3, r3, #1
 80082f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082f4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80082f8:	460b      	mov	r3, r1
 80082fa:	4313      	orrs	r3, r2
 80082fc:	d011      	beq.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80082fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008302:	3308      	adds	r3, #8
 8008304:	2100      	movs	r1, #0
 8008306:	4618      	mov	r0, r3
 8008308:	f001 fa4a 	bl	80097a0 <RCCEx_PLL2_Config>
 800830c:	4603      	mov	r3, r0
 800830e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008312:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008316:	2b00      	cmp	r3, #0
 8008318:	d003      	beq.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800831a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800831e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008322:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832a:	2100      	movs	r1, #0
 800832c:	6239      	str	r1, [r7, #32]
 800832e:	f003 0302 	and.w	r3, r3, #2
 8008332:	627b      	str	r3, [r7, #36]	; 0x24
 8008334:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008338:	460b      	mov	r3, r1
 800833a:	4313      	orrs	r3, r2
 800833c:	d011      	beq.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800833e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008342:	3308      	adds	r3, #8
 8008344:	2101      	movs	r1, #1
 8008346:	4618      	mov	r0, r3
 8008348:	f001 fa2a 	bl	80097a0 <RCCEx_PLL2_Config>
 800834c:	4603      	mov	r3, r0
 800834e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008352:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008356:	2b00      	cmp	r3, #0
 8008358:	d003      	beq.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800835a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800835e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008362:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800836a:	2100      	movs	r1, #0
 800836c:	61b9      	str	r1, [r7, #24]
 800836e:	f003 0304 	and.w	r3, r3, #4
 8008372:	61fb      	str	r3, [r7, #28]
 8008374:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008378:	460b      	mov	r3, r1
 800837a:	4313      	orrs	r3, r2
 800837c:	d011      	beq.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800837e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008382:	3308      	adds	r3, #8
 8008384:	2102      	movs	r1, #2
 8008386:	4618      	mov	r0, r3
 8008388:	f001 fa0a 	bl	80097a0 <RCCEx_PLL2_Config>
 800838c:	4603      	mov	r3, r0
 800838e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008392:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008396:	2b00      	cmp	r3, #0
 8008398:	d003      	beq.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800839a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800839e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80083a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083aa:	2100      	movs	r1, #0
 80083ac:	6139      	str	r1, [r7, #16]
 80083ae:	f003 0308 	and.w	r3, r3, #8
 80083b2:	617b      	str	r3, [r7, #20]
 80083b4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80083b8:	460b      	mov	r3, r1
 80083ba:	4313      	orrs	r3, r2
 80083bc:	d011      	beq.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80083be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083c2:	3328      	adds	r3, #40	; 0x28
 80083c4:	2100      	movs	r1, #0
 80083c6:	4618      	mov	r0, r3
 80083c8:	f001 fa9c 	bl	8009904 <RCCEx_PLL3_Config>
 80083cc:	4603      	mov	r3, r0
 80083ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80083d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d003      	beq.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80083e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ea:	2100      	movs	r1, #0
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	f003 0310 	and.w	r3, r3, #16
 80083f2:	60fb      	str	r3, [r7, #12]
 80083f4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80083f8:	460b      	mov	r3, r1
 80083fa:	4313      	orrs	r3, r2
 80083fc:	d011      	beq.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80083fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008402:	3328      	adds	r3, #40	; 0x28
 8008404:	2101      	movs	r1, #1
 8008406:	4618      	mov	r0, r3
 8008408:	f001 fa7c 	bl	8009904 <RCCEx_PLL3_Config>
 800840c:	4603      	mov	r3, r0
 800840e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008412:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008416:	2b00      	cmp	r3, #0
 8008418:	d003      	beq.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800841a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800841e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008422:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842a:	2100      	movs	r1, #0
 800842c:	6039      	str	r1, [r7, #0]
 800842e:	f003 0320 	and.w	r3, r3, #32
 8008432:	607b      	str	r3, [r7, #4]
 8008434:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008438:	460b      	mov	r3, r1
 800843a:	4313      	orrs	r3, r2
 800843c:	d011      	beq.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800843e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008442:	3328      	adds	r3, #40	; 0x28
 8008444:	2102      	movs	r1, #2
 8008446:	4618      	mov	r0, r3
 8008448:	f001 fa5c 	bl	8009904 <RCCEx_PLL3_Config>
 800844c:	4603      	mov	r3, r0
 800844e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008452:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008456:	2b00      	cmp	r3, #0
 8008458:	d003      	beq.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800845a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800845e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8008462:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8008466:	2b00      	cmp	r3, #0
 8008468:	d101      	bne.n	800846e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800846a:	2300      	movs	r3, #0
 800846c:	e000      	b.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800846e:	2301      	movs	r3, #1
}
 8008470:	4618      	mov	r0, r3
 8008472:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8008476:	46bd      	mov	sp, r7
 8008478:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800847c:	58024400 	.word	0x58024400

08008480 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b090      	sub	sp, #64	; 0x40
 8008484:	af00      	add	r7, sp, #0
 8008486:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800848a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800848e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8008492:	430b      	orrs	r3, r1
 8008494:	f040 8094 	bne.w	80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008498:	4b9e      	ldr	r3, [pc, #632]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800849a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800849c:	f003 0307 	and.w	r3, r3, #7
 80084a0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80084a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a4:	2b04      	cmp	r3, #4
 80084a6:	f200 8087 	bhi.w	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80084aa:	a201      	add	r2, pc, #4	; (adr r2, 80084b0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80084ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b0:	080084c5 	.word	0x080084c5
 80084b4:	080084ed 	.word	0x080084ed
 80084b8:	08008515 	.word	0x08008515
 80084bc:	080085b1 	.word	0x080085b1
 80084c0:	0800853d 	.word	0x0800853d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80084c4:	4b93      	ldr	r3, [pc, #588]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80084d0:	d108      	bne.n	80084e4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80084d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084d6:	4618      	mov	r0, r3
 80084d8:	f001 f810 	bl	80094fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80084dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084e0:	f000 bd45 	b.w	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80084e4:	2300      	movs	r3, #0
 80084e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084e8:	f000 bd41 	b.w	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80084ec:	4b89      	ldr	r3, [pc, #548]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084f8:	d108      	bne.n	800850c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084fa:	f107 0318 	add.w	r3, r7, #24
 80084fe:	4618      	mov	r0, r3
 8008500:	f000 fd54 	bl	8008fac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008504:	69bb      	ldr	r3, [r7, #24]
 8008506:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008508:	f000 bd31 	b.w	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800850c:	2300      	movs	r3, #0
 800850e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008510:	f000 bd2d 	b.w	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008514:	4b7f      	ldr	r3, [pc, #508]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800851c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008520:	d108      	bne.n	8008534 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008522:	f107 030c 	add.w	r3, r7, #12
 8008526:	4618      	mov	r0, r3
 8008528:	f000 fe94 	bl	8009254 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008530:	f000 bd1d 	b.w	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008534:	2300      	movs	r3, #0
 8008536:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008538:	f000 bd19 	b.w	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800853c:	4b75      	ldr	r3, [pc, #468]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800853e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008540:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008544:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008546:	4b73      	ldr	r3, [pc, #460]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f003 0304 	and.w	r3, r3, #4
 800854e:	2b04      	cmp	r3, #4
 8008550:	d10c      	bne.n	800856c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008554:	2b00      	cmp	r3, #0
 8008556:	d109      	bne.n	800856c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008558:	4b6e      	ldr	r3, [pc, #440]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	08db      	lsrs	r3, r3, #3
 800855e:	f003 0303 	and.w	r3, r3, #3
 8008562:	4a6d      	ldr	r2, [pc, #436]	; (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008564:	fa22 f303 	lsr.w	r3, r2, r3
 8008568:	63fb      	str	r3, [r7, #60]	; 0x3c
 800856a:	e01f      	b.n	80085ac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800856c:	4b69      	ldr	r3, [pc, #420]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008574:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008578:	d106      	bne.n	8008588 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800857a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800857c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008580:	d102      	bne.n	8008588 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008582:	4b66      	ldr	r3, [pc, #408]	; (800871c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008584:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008586:	e011      	b.n	80085ac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008588:	4b62      	ldr	r3, [pc, #392]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008590:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008594:	d106      	bne.n	80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008598:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800859c:	d102      	bne.n	80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800859e:	4b60      	ldr	r3, [pc, #384]	; (8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80085a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085a2:	e003      	b.n	80085ac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80085a4:	2300      	movs	r3, #0
 80085a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80085a8:	f000 bce1 	b.w	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80085ac:	f000 bcdf 	b.w	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80085b0:	4b5c      	ldr	r3, [pc, #368]	; (8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80085b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085b4:	f000 bcdb 	b.w	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80085b8:	2300      	movs	r3, #0
 80085ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085bc:	f000 bcd7 	b.w	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80085c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085c4:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80085c8:	430b      	orrs	r3, r1
 80085ca:	f040 80ad 	bne.w	8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80085ce:	4b51      	ldr	r3, [pc, #324]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80085d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085d2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80085d6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80085d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085de:	d056      	beq.n	800868e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80085e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085e6:	f200 8090 	bhi.w	800870a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80085ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ec:	2bc0      	cmp	r3, #192	; 0xc0
 80085ee:	f000 8088 	beq.w	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80085f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f4:	2bc0      	cmp	r3, #192	; 0xc0
 80085f6:	f200 8088 	bhi.w	800870a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80085fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085fc:	2b80      	cmp	r3, #128	; 0x80
 80085fe:	d032      	beq.n	8008666 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008602:	2b80      	cmp	r3, #128	; 0x80
 8008604:	f200 8081 	bhi.w	800870a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860a:	2b00      	cmp	r3, #0
 800860c:	d003      	beq.n	8008616 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800860e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008610:	2b40      	cmp	r3, #64	; 0x40
 8008612:	d014      	beq.n	800863e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8008614:	e079      	b.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008616:	4b3f      	ldr	r3, [pc, #252]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800861e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008622:	d108      	bne.n	8008636 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008624:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008628:	4618      	mov	r0, r3
 800862a:	f000 ff67 	bl	80094fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800862e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008630:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008632:	f000 bc9c 	b.w	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008636:	2300      	movs	r3, #0
 8008638:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800863a:	f000 bc98 	b.w	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800863e:	4b35      	ldr	r3, [pc, #212]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008646:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800864a:	d108      	bne.n	800865e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800864c:	f107 0318 	add.w	r3, r7, #24
 8008650:	4618      	mov	r0, r3
 8008652:	f000 fcab 	bl	8008fac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008656:	69bb      	ldr	r3, [r7, #24]
 8008658:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800865a:	f000 bc88 	b.w	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800865e:	2300      	movs	r3, #0
 8008660:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008662:	f000 bc84 	b.w	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008666:	4b2b      	ldr	r3, [pc, #172]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800866e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008672:	d108      	bne.n	8008686 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008674:	f107 030c 	add.w	r3, r7, #12
 8008678:	4618      	mov	r0, r3
 800867a:	f000 fdeb 	bl	8009254 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008682:	f000 bc74 	b.w	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008686:	2300      	movs	r3, #0
 8008688:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800868a:	f000 bc70 	b.w	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800868e:	4b21      	ldr	r3, [pc, #132]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008692:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008696:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008698:	4b1e      	ldr	r3, [pc, #120]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f003 0304 	and.w	r3, r3, #4
 80086a0:	2b04      	cmp	r3, #4
 80086a2:	d10c      	bne.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80086a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d109      	bne.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086aa:	4b1a      	ldr	r3, [pc, #104]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	08db      	lsrs	r3, r3, #3
 80086b0:	f003 0303 	and.w	r3, r3, #3
 80086b4:	4a18      	ldr	r2, [pc, #96]	; (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80086b6:	fa22 f303 	lsr.w	r3, r2, r3
 80086ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086bc:	e01f      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80086be:	4b15      	ldr	r3, [pc, #84]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086ca:	d106      	bne.n	80086da <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80086cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086d2:	d102      	bne.n	80086da <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80086d4:	4b11      	ldr	r3, [pc, #68]	; (800871c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80086d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086d8:	e011      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80086da:	4b0e      	ldr	r3, [pc, #56]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086e6:	d106      	bne.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80086e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086ee:	d102      	bne.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80086f0:	4b0b      	ldr	r3, [pc, #44]	; (8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80086f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086f4:	e003      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80086f6:	2300      	movs	r3, #0
 80086f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80086fa:	f000 bc38 	b.w	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80086fe:	f000 bc36 	b.w	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008702:	4b08      	ldr	r3, [pc, #32]	; (8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008704:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008706:	f000 bc32 	b.w	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800870a:	2300      	movs	r3, #0
 800870c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800870e:	f000 bc2e 	b.w	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008712:	bf00      	nop
 8008714:	58024400 	.word	0x58024400
 8008718:	03d09000 	.word	0x03d09000
 800871c:	003d0900 	.word	0x003d0900
 8008720:	007a1200 	.word	0x007a1200
 8008724:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008728:	e9d7 2300 	ldrd	r2, r3, [r7]
 800872c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8008730:	430b      	orrs	r3, r1
 8008732:	f040 809c 	bne.w	800886e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008736:	4b9e      	ldr	r3, [pc, #632]	; (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800873a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800873e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008742:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008746:	d054      	beq.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800874a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800874e:	f200 808b 	bhi.w	8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008754:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008758:	f000 8083 	beq.w	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800875c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800875e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008762:	f200 8081 	bhi.w	8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008768:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800876c:	d02f      	beq.n	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800876e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008770:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008774:	d878      	bhi.n	8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008778:	2b00      	cmp	r3, #0
 800877a:	d004      	beq.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800877c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800877e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008782:	d012      	beq.n	80087aa <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008784:	e070      	b.n	8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008786:	4b8a      	ldr	r3, [pc, #552]	; (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800878e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008792:	d107      	bne.n	80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008794:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008798:	4618      	mov	r0, r3
 800879a:	f000 feaf 	bl	80094fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800879e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087a2:	e3e4      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087a4:	2300      	movs	r3, #0
 80087a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087a8:	e3e1      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80087aa:	4b81      	ldr	r3, [pc, #516]	; (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80087b6:	d107      	bne.n	80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087b8:	f107 0318 	add.w	r3, r7, #24
 80087bc:	4618      	mov	r0, r3
 80087be:	f000 fbf5 	bl	8008fac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80087c2:	69bb      	ldr	r3, [r7, #24]
 80087c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087c6:	e3d2      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087c8:	2300      	movs	r3, #0
 80087ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087cc:	e3cf      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80087ce:	4b78      	ldr	r3, [pc, #480]	; (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087da:	d107      	bne.n	80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087dc:	f107 030c 	add.w	r3, r7, #12
 80087e0:	4618      	mov	r0, r3
 80087e2:	f000 fd37 	bl	8009254 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087ea:	e3c0      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087ec:	2300      	movs	r3, #0
 80087ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087f0:	e3bd      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80087f2:	4b6f      	ldr	r3, [pc, #444]	; (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80087f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80087fa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80087fc:	4b6c      	ldr	r3, [pc, #432]	; (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f003 0304 	and.w	r3, r3, #4
 8008804:	2b04      	cmp	r3, #4
 8008806:	d10c      	bne.n	8008822 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800880a:	2b00      	cmp	r3, #0
 800880c:	d109      	bne.n	8008822 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800880e:	4b68      	ldr	r3, [pc, #416]	; (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	08db      	lsrs	r3, r3, #3
 8008814:	f003 0303 	and.w	r3, r3, #3
 8008818:	4a66      	ldr	r2, [pc, #408]	; (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800881a:	fa22 f303 	lsr.w	r3, r2, r3
 800881e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008820:	e01e      	b.n	8008860 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008822:	4b63      	ldr	r3, [pc, #396]	; (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800882a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800882e:	d106      	bne.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008832:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008836:	d102      	bne.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008838:	4b5f      	ldr	r3, [pc, #380]	; (80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800883a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800883c:	e010      	b.n	8008860 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800883e:	4b5c      	ldr	r3, [pc, #368]	; (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008846:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800884a:	d106      	bne.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800884c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800884e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008852:	d102      	bne.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008854:	4b59      	ldr	r3, [pc, #356]	; (80089bc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008856:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008858:	e002      	b.n	8008860 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800885a:	2300      	movs	r3, #0
 800885c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800885e:	e386      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008860:	e385      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008862:	4b57      	ldr	r3, [pc, #348]	; (80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008864:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008866:	e382      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008868:	2300      	movs	r3, #0
 800886a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800886c:	e37f      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800886e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008872:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8008876:	430b      	orrs	r3, r1
 8008878:	f040 80a7 	bne.w	80089ca <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800887c:	4b4c      	ldr	r3, [pc, #304]	; (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800887e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008880:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008884:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008888:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800888c:	d055      	beq.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800888e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008890:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008894:	f200 8096 	bhi.w	80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800889a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800889e:	f000 8084 	beq.w	80089aa <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80088a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80088a8:	f200 808c 	bhi.w	80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80088ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088b2:	d030      	beq.n	8008916 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80088b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088ba:	f200 8083 	bhi.w	80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80088be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d004      	beq.n	80088ce <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80088c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80088ca:	d012      	beq.n	80088f2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80088cc:	e07a      	b.n	80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80088ce:	4b38      	ldr	r3, [pc, #224]	; (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088da:	d107      	bne.n	80088ec <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80088dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088e0:	4618      	mov	r0, r3
 80088e2:	f000 fe0b 	bl	80094fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80088e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088ea:	e340      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088ec:	2300      	movs	r3, #0
 80088ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088f0:	e33d      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80088f2:	4b2f      	ldr	r3, [pc, #188]	; (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088fe:	d107      	bne.n	8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008900:	f107 0318 	add.w	r3, r7, #24
 8008904:	4618      	mov	r0, r3
 8008906:	f000 fb51 	bl	8008fac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800890a:	69bb      	ldr	r3, [r7, #24]
 800890c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800890e:	e32e      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008910:	2300      	movs	r3, #0
 8008912:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008914:	e32b      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008916:	4b26      	ldr	r3, [pc, #152]	; (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800891e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008922:	d107      	bne.n	8008934 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008924:	f107 030c 	add.w	r3, r7, #12
 8008928:	4618      	mov	r0, r3
 800892a:	f000 fc93 	bl	8009254 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008932:	e31c      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008934:	2300      	movs	r3, #0
 8008936:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008938:	e319      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800893a:	4b1d      	ldr	r3, [pc, #116]	; (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800893c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800893e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008942:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008944:	4b1a      	ldr	r3, [pc, #104]	; (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f003 0304 	and.w	r3, r3, #4
 800894c:	2b04      	cmp	r3, #4
 800894e:	d10c      	bne.n	800896a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008952:	2b00      	cmp	r3, #0
 8008954:	d109      	bne.n	800896a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008956:	4b16      	ldr	r3, [pc, #88]	; (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	08db      	lsrs	r3, r3, #3
 800895c:	f003 0303 	and.w	r3, r3, #3
 8008960:	4a14      	ldr	r2, [pc, #80]	; (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008962:	fa22 f303 	lsr.w	r3, r2, r3
 8008966:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008968:	e01e      	b.n	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800896a:	4b11      	ldr	r3, [pc, #68]	; (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008976:	d106      	bne.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800897a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800897e:	d102      	bne.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008980:	4b0d      	ldr	r3, [pc, #52]	; (80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008982:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008984:	e010      	b.n	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008986:	4b0a      	ldr	r3, [pc, #40]	; (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800898e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008992:	d106      	bne.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008996:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800899a:	d102      	bne.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800899c:	4b07      	ldr	r3, [pc, #28]	; (80089bc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800899e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089a0:	e002      	b.n	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80089a2:	2300      	movs	r3, #0
 80089a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80089a6:	e2e2      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80089a8:	e2e1      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80089aa:	4b05      	ldr	r3, [pc, #20]	; (80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80089ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089ae:	e2de      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80089b0:	58024400 	.word	0x58024400
 80089b4:	03d09000 	.word	0x03d09000
 80089b8:	003d0900 	.word	0x003d0900
 80089bc:	007a1200 	.word	0x007a1200
 80089c0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80089c4:	2300      	movs	r3, #0
 80089c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089c8:	e2d1      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80089ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089ce:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80089d2:	430b      	orrs	r3, r1
 80089d4:	f040 809c 	bne.w	8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80089d8:	4b93      	ldr	r3, [pc, #588]	; (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80089da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089dc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80089e0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80089e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089e8:	d054      	beq.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80089ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089f0:	f200 808b 	bhi.w	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80089f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80089fa:	f000 8083 	beq.w	8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80089fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008a04:	f200 8081 	bhi.w	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a0e:	d02f      	beq.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a16:	d878      	bhi.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d004      	beq.n	8008a28 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a24:	d012      	beq.n	8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8008a26:	e070      	b.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a28:	4b7f      	ldr	r3, [pc, #508]	; (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a34:	d107      	bne.n	8008a46 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f000 fd5e 	bl	80094fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a44:	e293      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a46:	2300      	movs	r3, #0
 8008a48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a4a:	e290      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a4c:	4b76      	ldr	r3, [pc, #472]	; (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a58:	d107      	bne.n	8008a6a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a5a:	f107 0318 	add.w	r3, r7, #24
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f000 faa4 	bl	8008fac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a64:	69bb      	ldr	r3, [r7, #24]
 8008a66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a68:	e281      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a6e:	e27e      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a70:	4b6d      	ldr	r3, [pc, #436]	; (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a7c:	d107      	bne.n	8008a8e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a7e:	f107 030c 	add.w	r3, r7, #12
 8008a82:	4618      	mov	r0, r3
 8008a84:	f000 fbe6 	bl	8009254 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a8c:	e26f      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a92:	e26c      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008a94:	4b64      	ldr	r3, [pc, #400]	; (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008a9c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a9e:	4b62      	ldr	r3, [pc, #392]	; (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f003 0304 	and.w	r3, r3, #4
 8008aa6:	2b04      	cmp	r3, #4
 8008aa8:	d10c      	bne.n	8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8008aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d109      	bne.n	8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ab0:	4b5d      	ldr	r3, [pc, #372]	; (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	08db      	lsrs	r3, r3, #3
 8008ab6:	f003 0303 	and.w	r3, r3, #3
 8008aba:	4a5c      	ldr	r2, [pc, #368]	; (8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008abc:	fa22 f303 	lsr.w	r3, r2, r3
 8008ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ac2:	e01e      	b.n	8008b02 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ac4:	4b58      	ldr	r3, [pc, #352]	; (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008acc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ad0:	d106      	bne.n	8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ad4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ad8:	d102      	bne.n	8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008ada:	4b55      	ldr	r3, [pc, #340]	; (8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008adc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ade:	e010      	b.n	8008b02 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008ae0:	4b51      	ldr	r3, [pc, #324]	; (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ae8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008aec:	d106      	bne.n	8008afc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008af0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008af4:	d102      	bne.n	8008afc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008af6:	4b4f      	ldr	r3, [pc, #316]	; (8008c34 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008af8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008afa:	e002      	b.n	8008b02 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008afc:	2300      	movs	r3, #0
 8008afe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008b00:	e235      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008b02:	e234      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008b04:	4b4c      	ldr	r3, [pc, #304]	; (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008b06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b08:	e231      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b0e:	e22e      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008b10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b14:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8008b18:	430b      	orrs	r3, r1
 8008b1a:	f040 808f 	bne.w	8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008b1e:	4b42      	ldr	r3, [pc, #264]	; (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b22:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8008b26:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8008b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b2a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008b2e:	d06b      	beq.n	8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008b36:	d874      	bhi.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b3a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008b3e:	d056      	beq.n	8008bee <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b42:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008b46:	d86c      	bhi.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b4a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008b4e:	d03b      	beq.n	8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b52:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008b56:	d864      	bhi.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b5e:	d021      	beq.n	8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b66:	d85c      	bhi.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d004      	beq.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8008b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b74:	d004      	beq.n	8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8008b76:	e054      	b.n	8008c22 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008b78:	f7fe fa4c 	bl	8007014 <HAL_RCC_GetPCLK1Freq>
 8008b7c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008b7e:	e1f6      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b80:	4b29      	ldr	r3, [pc, #164]	; (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b8c:	d107      	bne.n	8008b9e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b8e:	f107 0318 	add.w	r3, r7, #24
 8008b92:	4618      	mov	r0, r3
 8008b94:	f000 fa0a 	bl	8008fac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008b98:	69fb      	ldr	r3, [r7, #28]
 8008b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b9c:	e1e7      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ba2:	e1e4      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008ba4:	4b20      	ldr	r3, [pc, #128]	; (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008bac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bb0:	d107      	bne.n	8008bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bb2:	f107 030c 	add.w	r3, r7, #12
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f000 fb4c 	bl	8009254 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bc0:	e1d5      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bc6:	e1d2      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008bc8:	4b17      	ldr	r3, [pc, #92]	; (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f003 0304 	and.w	r3, r3, #4
 8008bd0:	2b04      	cmp	r3, #4
 8008bd2:	d109      	bne.n	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008bd4:	4b14      	ldr	r3, [pc, #80]	; (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	08db      	lsrs	r3, r3, #3
 8008bda:	f003 0303 	and.w	r3, r3, #3
 8008bde:	4a13      	ldr	r2, [pc, #76]	; (8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008be0:	fa22 f303 	lsr.w	r3, r2, r3
 8008be4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008be6:	e1c2      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008be8:	2300      	movs	r3, #0
 8008bea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bec:	e1bf      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008bee:	4b0e      	ldr	r3, [pc, #56]	; (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bfa:	d102      	bne.n	8008c02 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8008bfc:	4b0c      	ldr	r3, [pc, #48]	; (8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c00:	e1b5      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c02:	2300      	movs	r3, #0
 8008c04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c06:	e1b2      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008c08:	4b07      	ldr	r3, [pc, #28]	; (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c14:	d102      	bne.n	8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8008c16:	4b07      	ldr	r3, [pc, #28]	; (8008c34 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008c18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c1a:	e1a8      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c20:	e1a5      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008c22:	2300      	movs	r3, #0
 8008c24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c26:	e1a2      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008c28:	58024400 	.word	0x58024400
 8008c2c:	03d09000 	.word	0x03d09000
 8008c30:	003d0900 	.word	0x003d0900
 8008c34:	007a1200 	.word	0x007a1200
 8008c38:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008c3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c40:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8008c44:	430b      	orrs	r3, r1
 8008c46:	d173      	bne.n	8008d30 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008c48:	4b9c      	ldr	r3, [pc, #624]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008c50:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c58:	d02f      	beq.n	8008cba <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c60:	d863      	bhi.n	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8008c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d004      	beq.n	8008c72 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c6e:	d012      	beq.n	8008c96 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008c70:	e05b      	b.n	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c72:	4b92      	ldr	r3, [pc, #584]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c7e:	d107      	bne.n	8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c80:	f107 0318 	add.w	r3, r7, #24
 8008c84:	4618      	mov	r0, r3
 8008c86:	f000 f991 	bl	8008fac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008c8a:	69bb      	ldr	r3, [r7, #24]
 8008c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c8e:	e16e      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c90:	2300      	movs	r3, #0
 8008c92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c94:	e16b      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c96:	4b89      	ldr	r3, [pc, #548]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ca2:	d107      	bne.n	8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ca4:	f107 030c 	add.w	r3, r7, #12
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f000 fad3 	bl	8009254 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cb2:	e15c      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cb8:	e159      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008cba:	4b80      	ldr	r3, [pc, #512]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cbe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008cc2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008cc4:	4b7d      	ldr	r3, [pc, #500]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f003 0304 	and.w	r3, r3, #4
 8008ccc:	2b04      	cmp	r3, #4
 8008cce:	d10c      	bne.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d109      	bne.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008cd6:	4b79      	ldr	r3, [pc, #484]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	08db      	lsrs	r3, r3, #3
 8008cdc:	f003 0303 	and.w	r3, r3, #3
 8008ce0:	4a77      	ldr	r2, [pc, #476]	; (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ce8:	e01e      	b.n	8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008cea:	4b74      	ldr	r3, [pc, #464]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cf6:	d106      	bne.n	8008d06 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cfa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008cfe:	d102      	bne.n	8008d06 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008d00:	4b70      	ldr	r3, [pc, #448]	; (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008d02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d04:	e010      	b.n	8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d06:	4b6d      	ldr	r3, [pc, #436]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d12:	d106      	bne.n	8008d22 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d1a:	d102      	bne.n	8008d22 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008d1c:	4b6a      	ldr	r3, [pc, #424]	; (8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d20:	e002      	b.n	8008d28 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008d22:	2300      	movs	r3, #0
 8008d24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008d26:	e122      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008d28:	e121      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d2e:	e11e      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008d30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d34:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8008d38:	430b      	orrs	r3, r1
 8008d3a:	d133      	bne.n	8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008d3c:	4b5f      	ldr	r3, [pc, #380]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d44:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d004      	beq.n	8008d56 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d52:	d012      	beq.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008d54:	e023      	b.n	8008d9e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008d56:	4b59      	ldr	r3, [pc, #356]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d62:	d107      	bne.n	8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f000 fbc7 	bl	80094fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d72:	e0fc      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d74:	2300      	movs	r3, #0
 8008d76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d78:	e0f9      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d7a:	4b50      	ldr	r3, [pc, #320]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d86:	d107      	bne.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d88:	f107 0318 	add.w	r3, r7, #24
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f000 f90d 	bl	8008fac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008d92:	6a3b      	ldr	r3, [r7, #32]
 8008d94:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d96:	e0ea      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d9c:	e0e7      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008da2:	e0e4      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008da4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008da8:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8008dac:	430b      	orrs	r3, r1
 8008dae:	f040 808d 	bne.w	8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008db2:	4b42      	ldr	r3, [pc, #264]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008db6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008dba:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008dc2:	d06b      	beq.n	8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008dca:	d874      	bhi.n	8008eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dd2:	d056      	beq.n	8008e82 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dda:	d86c      	bhi.n	8008eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dde:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008de2:	d03b      	beq.n	8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8008de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008dea:	d864      	bhi.n	8008eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008df2:	d021      	beq.n	8008e38 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008dfa:	d85c      	bhi.n	8008eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d004      	beq.n	8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8008e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e08:	d004      	beq.n	8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8008e0a:	e054      	b.n	8008eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008e0c:	f000 f8b8 	bl	8008f80 <HAL_RCCEx_GetD3PCLK1Freq>
 8008e10:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008e12:	e0ac      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e14:	4b29      	ldr	r3, [pc, #164]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e20:	d107      	bne.n	8008e32 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e22:	f107 0318 	add.w	r3, r7, #24
 8008e26:	4618      	mov	r0, r3
 8008e28:	f000 f8c0 	bl	8008fac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008e2c:	69fb      	ldr	r3, [r7, #28]
 8008e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e30:	e09d      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e32:	2300      	movs	r3, #0
 8008e34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e36:	e09a      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e38:	4b20      	ldr	r3, [pc, #128]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e44:	d107      	bne.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e46:	f107 030c 	add.w	r3, r7, #12
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f000 fa02 	bl	8009254 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e54:	e08b      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e56:	2300      	movs	r3, #0
 8008e58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e5a:	e088      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008e5c:	4b17      	ldr	r3, [pc, #92]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f003 0304 	and.w	r3, r3, #4
 8008e64:	2b04      	cmp	r3, #4
 8008e66:	d109      	bne.n	8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e68:	4b14      	ldr	r3, [pc, #80]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	08db      	lsrs	r3, r3, #3
 8008e6e:	f003 0303 	and.w	r3, r3, #3
 8008e72:	4a13      	ldr	r2, [pc, #76]	; (8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008e74:	fa22 f303 	lsr.w	r3, r2, r3
 8008e78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e7a:	e078      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e80:	e075      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008e82:	4b0e      	ldr	r3, [pc, #56]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e8e:	d102      	bne.n	8008e96 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8008e90:	4b0c      	ldr	r3, [pc, #48]	; (8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008e92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e94:	e06b      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e96:	2300      	movs	r3, #0
 8008e98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e9a:	e068      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008e9c:	4b07      	ldr	r3, [pc, #28]	; (8008ebc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ea4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ea8:	d102      	bne.n	8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8008eaa:	4b07      	ldr	r3, [pc, #28]	; (8008ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008eac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008eae:	e05e      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008eb4:	e05b      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008eba:	e058      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008ebc:	58024400 	.word	0x58024400
 8008ec0:	03d09000 	.word	0x03d09000
 8008ec4:	003d0900 	.word	0x003d0900
 8008ec8:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008ecc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ed0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8008ed4:	430b      	orrs	r3, r1
 8008ed6:	d148      	bne.n	8008f6a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008ed8:	4b27      	ldr	r3, [pc, #156]	; (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008eda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008edc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008ee0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ee4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ee8:	d02a      	beq.n	8008f40 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8008eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ef0:	d838      	bhi.n	8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8008ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d004      	beq.n	8008f02 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008efa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008efe:	d00d      	beq.n	8008f1c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8008f00:	e030      	b.n	8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008f02:	4b1d      	ldr	r3, [pc, #116]	; (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f0e:	d102      	bne.n	8008f16 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8008f10:	4b1a      	ldr	r3, [pc, #104]	; (8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8008f12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f14:	e02b      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f16:	2300      	movs	r3, #0
 8008f18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f1a:	e028      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f1c:	4b16      	ldr	r3, [pc, #88]	; (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f28:	d107      	bne.n	8008f3a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f000 fae4 	bl	80094fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f38:	e019      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f3e:	e016      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f40:	4b0d      	ldr	r3, [pc, #52]	; (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f4c:	d107      	bne.n	8008f5e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f4e:	f107 0318 	add.w	r3, r7, #24
 8008f52:	4618      	mov	r0, r3
 8008f54:	f000 f82a 	bl	8008fac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008f58:	69fb      	ldr	r3, [r7, #28]
 8008f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f5c:	e007      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f62:	e004      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008f64:	2300      	movs	r3, #0
 8008f66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f68:	e001      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8008f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3740      	adds	r7, #64	; 0x40
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}
 8008f78:	58024400 	.word	0x58024400
 8008f7c:	007a1200 	.word	0x007a1200

08008f80 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008f84:	f7fe f816 	bl	8006fb4 <HAL_RCC_GetHCLKFreq>
 8008f88:	4602      	mov	r2, r0
 8008f8a:	4b06      	ldr	r3, [pc, #24]	; (8008fa4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008f8c:	6a1b      	ldr	r3, [r3, #32]
 8008f8e:	091b      	lsrs	r3, r3, #4
 8008f90:	f003 0307 	and.w	r3, r3, #7
 8008f94:	4904      	ldr	r1, [pc, #16]	; (8008fa8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008f96:	5ccb      	ldrb	r3, [r1, r3]
 8008f98:	f003 031f 	and.w	r3, r3, #31
 8008f9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	58024400 	.word	0x58024400
 8008fa8:	0800bb28 	.word	0x0800bb28

08008fac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b089      	sub	sp, #36	; 0x24
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008fb4:	4ba1      	ldr	r3, [pc, #644]	; (800923c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb8:	f003 0303 	and.w	r3, r3, #3
 8008fbc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008fbe:	4b9f      	ldr	r3, [pc, #636]	; (800923c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fc2:	0b1b      	lsrs	r3, r3, #12
 8008fc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008fc8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008fca:	4b9c      	ldr	r3, [pc, #624]	; (800923c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fce:	091b      	lsrs	r3, r3, #4
 8008fd0:	f003 0301 	and.w	r3, r3, #1
 8008fd4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008fd6:	4b99      	ldr	r3, [pc, #612]	; (800923c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fda:	08db      	lsrs	r3, r3, #3
 8008fdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008fe0:	693a      	ldr	r2, [r7, #16]
 8008fe2:	fb02 f303 	mul.w	r3, r2, r3
 8008fe6:	ee07 3a90 	vmov	s15, r3
 8008fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	f000 8111 	beq.w	800921c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008ffa:	69bb      	ldr	r3, [r7, #24]
 8008ffc:	2b02      	cmp	r3, #2
 8008ffe:	f000 8083 	beq.w	8009108 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009002:	69bb      	ldr	r3, [r7, #24]
 8009004:	2b02      	cmp	r3, #2
 8009006:	f200 80a1 	bhi.w	800914c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800900a:	69bb      	ldr	r3, [r7, #24]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d003      	beq.n	8009018 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009010:	69bb      	ldr	r3, [r7, #24]
 8009012:	2b01      	cmp	r3, #1
 8009014:	d056      	beq.n	80090c4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009016:	e099      	b.n	800914c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009018:	4b88      	ldr	r3, [pc, #544]	; (800923c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f003 0320 	and.w	r3, r3, #32
 8009020:	2b00      	cmp	r3, #0
 8009022:	d02d      	beq.n	8009080 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009024:	4b85      	ldr	r3, [pc, #532]	; (800923c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	08db      	lsrs	r3, r3, #3
 800902a:	f003 0303 	and.w	r3, r3, #3
 800902e:	4a84      	ldr	r2, [pc, #528]	; (8009240 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009030:	fa22 f303 	lsr.w	r3, r2, r3
 8009034:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	ee07 3a90 	vmov	s15, r3
 800903c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	ee07 3a90 	vmov	s15, r3
 8009046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800904a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800904e:	4b7b      	ldr	r3, [pc, #492]	; (800923c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009056:	ee07 3a90 	vmov	s15, r3
 800905a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800905e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009062:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009244 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800906a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800906e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800907a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800907e:	e087      	b.n	8009190 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	ee07 3a90 	vmov	s15, r3
 8009086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800908a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009248 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800908e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009092:	4b6a      	ldr	r3, [pc, #424]	; (800923c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800909a:	ee07 3a90 	vmov	s15, r3
 800909e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80090a6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009244 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80090aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090c2:	e065      	b.n	8009190 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	ee07 3a90 	vmov	s15, r3
 80090ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800924c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80090d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090d6:	4b59      	ldr	r3, [pc, #356]	; (800923c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090de:	ee07 3a90 	vmov	s15, r3
 80090e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80090ea:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009244 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80090ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009102:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009106:	e043      	b.n	8009190 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	ee07 3a90 	vmov	s15, r3
 800910e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009112:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009250 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800911a:	4b48      	ldr	r3, [pc, #288]	; (800923c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800911c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800911e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009122:	ee07 3a90 	vmov	s15, r3
 8009126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800912a:	ed97 6a03 	vldr	s12, [r7, #12]
 800912e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009244 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800913a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800913e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009146:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800914a:	e021      	b.n	8009190 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	ee07 3a90 	vmov	s15, r3
 8009152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009156:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800924c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800915a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800915e:	4b37      	ldr	r3, [pc, #220]	; (800923c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009166:	ee07 3a90 	vmov	s15, r3
 800916a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800916e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009172:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009244 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800917a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800917e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800918a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800918e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009190:	4b2a      	ldr	r3, [pc, #168]	; (800923c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009194:	0a5b      	lsrs	r3, r3, #9
 8009196:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800919a:	ee07 3a90 	vmov	s15, r3
 800919e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80091a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80091ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091b6:	ee17 2a90 	vmov	r2, s15
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80091be:	4b1f      	ldr	r3, [pc, #124]	; (800923c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091c2:	0c1b      	lsrs	r3, r3, #16
 80091c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091c8:	ee07 3a90 	vmov	s15, r3
 80091cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80091d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80091dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091e4:	ee17 2a90 	vmov	r2, s15
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80091ec:	4b13      	ldr	r3, [pc, #76]	; (800923c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f0:	0e1b      	lsrs	r3, r3, #24
 80091f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091f6:	ee07 3a90 	vmov	s15, r3
 80091fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009202:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009206:	edd7 6a07 	vldr	s13, [r7, #28]
 800920a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800920e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009212:	ee17 2a90 	vmov	r2, s15
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800921a:	e008      	b.n	800922e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2200      	movs	r2, #0
 8009220:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2200      	movs	r2, #0
 8009226:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2200      	movs	r2, #0
 800922c:	609a      	str	r2, [r3, #8]
}
 800922e:	bf00      	nop
 8009230:	3724      	adds	r7, #36	; 0x24
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr
 800923a:	bf00      	nop
 800923c:	58024400 	.word	0x58024400
 8009240:	03d09000 	.word	0x03d09000
 8009244:	46000000 	.word	0x46000000
 8009248:	4c742400 	.word	0x4c742400
 800924c:	4a742400 	.word	0x4a742400
 8009250:	4af42400 	.word	0x4af42400

08009254 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009254:	b480      	push	{r7}
 8009256:	b089      	sub	sp, #36	; 0x24
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800925c:	4ba1      	ldr	r3, [pc, #644]	; (80094e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800925e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009260:	f003 0303 	and.w	r3, r3, #3
 8009264:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009266:	4b9f      	ldr	r3, [pc, #636]	; (80094e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800926a:	0d1b      	lsrs	r3, r3, #20
 800926c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009270:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009272:	4b9c      	ldr	r3, [pc, #624]	; (80094e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009276:	0a1b      	lsrs	r3, r3, #8
 8009278:	f003 0301 	and.w	r3, r3, #1
 800927c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800927e:	4b99      	ldr	r3, [pc, #612]	; (80094e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009282:	08db      	lsrs	r3, r3, #3
 8009284:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009288:	693a      	ldr	r2, [r7, #16]
 800928a:	fb02 f303 	mul.w	r3, r2, r3
 800928e:	ee07 3a90 	vmov	s15, r3
 8009292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009296:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	2b00      	cmp	r3, #0
 800929e:	f000 8111 	beq.w	80094c4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80092a2:	69bb      	ldr	r3, [r7, #24]
 80092a4:	2b02      	cmp	r3, #2
 80092a6:	f000 8083 	beq.w	80093b0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80092aa:	69bb      	ldr	r3, [r7, #24]
 80092ac:	2b02      	cmp	r3, #2
 80092ae:	f200 80a1 	bhi.w	80093f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80092b2:	69bb      	ldr	r3, [r7, #24]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d003      	beq.n	80092c0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80092b8:	69bb      	ldr	r3, [r7, #24]
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d056      	beq.n	800936c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80092be:	e099      	b.n	80093f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092c0:	4b88      	ldr	r3, [pc, #544]	; (80094e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f003 0320 	and.w	r3, r3, #32
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d02d      	beq.n	8009328 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092cc:	4b85      	ldr	r3, [pc, #532]	; (80094e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	08db      	lsrs	r3, r3, #3
 80092d2:	f003 0303 	and.w	r3, r3, #3
 80092d6:	4a84      	ldr	r2, [pc, #528]	; (80094e8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80092d8:	fa22 f303 	lsr.w	r3, r2, r3
 80092dc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	ee07 3a90 	vmov	s15, r3
 80092e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	ee07 3a90 	vmov	s15, r3
 80092ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092f6:	4b7b      	ldr	r3, [pc, #492]	; (80094e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092fe:	ee07 3a90 	vmov	s15, r3
 8009302:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009306:	ed97 6a03 	vldr	s12, [r7, #12]
 800930a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80094ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800930e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009312:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009316:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800931a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800931e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009322:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009326:	e087      	b.n	8009438 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	ee07 3a90 	vmov	s15, r3
 800932e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009332:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80094f0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800933a:	4b6a      	ldr	r3, [pc, #424]	; (80094e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800933c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800933e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009342:	ee07 3a90 	vmov	s15, r3
 8009346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800934a:	ed97 6a03 	vldr	s12, [r7, #12]
 800934e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80094ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800935a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800935e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009366:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800936a:	e065      	b.n	8009438 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	ee07 3a90 	vmov	s15, r3
 8009372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009376:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80094f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800937a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800937e:	4b59      	ldr	r3, [pc, #356]	; (80094e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009386:	ee07 3a90 	vmov	s15, r3
 800938a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800938e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009392:	eddf 5a56 	vldr	s11, [pc, #344]	; 80094ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800939a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800939e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093ae:	e043      	b.n	8009438 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	ee07 3a90 	vmov	s15, r3
 80093b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80094f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80093be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093c2:	4b48      	ldr	r3, [pc, #288]	; (80094e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093ca:	ee07 3a90 	vmov	s15, r3
 80093ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80093d6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80094ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80093da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093f2:	e021      	b.n	8009438 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	ee07 3a90 	vmov	s15, r3
 80093fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093fe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80094f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009406:	4b37      	ldr	r3, [pc, #220]	; (80094e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800940a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800940e:	ee07 3a90 	vmov	s15, r3
 8009412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009416:	ed97 6a03 	vldr	s12, [r7, #12]
 800941a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80094ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800941e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009426:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800942a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800942e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009432:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009436:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009438:	4b2a      	ldr	r3, [pc, #168]	; (80094e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800943a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800943c:	0a5b      	lsrs	r3, r3, #9
 800943e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009442:	ee07 3a90 	vmov	s15, r3
 8009446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800944a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800944e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009452:	edd7 6a07 	vldr	s13, [r7, #28]
 8009456:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800945a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800945e:	ee17 2a90 	vmov	r2, s15
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009466:	4b1f      	ldr	r3, [pc, #124]	; (80094e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800946a:	0c1b      	lsrs	r3, r3, #16
 800946c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009470:	ee07 3a90 	vmov	s15, r3
 8009474:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009478:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800947c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009480:	edd7 6a07 	vldr	s13, [r7, #28]
 8009484:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009488:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800948c:	ee17 2a90 	vmov	r2, s15
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009494:	4b13      	ldr	r3, [pc, #76]	; (80094e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009498:	0e1b      	lsrs	r3, r3, #24
 800949a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800949e:	ee07 3a90 	vmov	s15, r3
 80094a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80094aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80094b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094ba:	ee17 2a90 	vmov	r2, s15
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80094c2:	e008      	b.n	80094d6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2200      	movs	r2, #0
 80094ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2200      	movs	r2, #0
 80094d4:	609a      	str	r2, [r3, #8]
}
 80094d6:	bf00      	nop
 80094d8:	3724      	adds	r7, #36	; 0x24
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr
 80094e2:	bf00      	nop
 80094e4:	58024400 	.word	0x58024400
 80094e8:	03d09000 	.word	0x03d09000
 80094ec:	46000000 	.word	0x46000000
 80094f0:	4c742400 	.word	0x4c742400
 80094f4:	4a742400 	.word	0x4a742400
 80094f8:	4af42400 	.word	0x4af42400

080094fc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b089      	sub	sp, #36	; 0x24
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009504:	4ba0      	ldr	r3, [pc, #640]	; (8009788 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009508:	f003 0303 	and.w	r3, r3, #3
 800950c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800950e:	4b9e      	ldr	r3, [pc, #632]	; (8009788 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009512:	091b      	lsrs	r3, r3, #4
 8009514:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009518:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800951a:	4b9b      	ldr	r3, [pc, #620]	; (8009788 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800951c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800951e:	f003 0301 	and.w	r3, r3, #1
 8009522:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009524:	4b98      	ldr	r3, [pc, #608]	; (8009788 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009528:	08db      	lsrs	r3, r3, #3
 800952a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800952e:	693a      	ldr	r2, [r7, #16]
 8009530:	fb02 f303 	mul.w	r3, r2, r3
 8009534:	ee07 3a90 	vmov	s15, r3
 8009538:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800953c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	2b00      	cmp	r3, #0
 8009544:	f000 8111 	beq.w	800976a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009548:	69bb      	ldr	r3, [r7, #24]
 800954a:	2b02      	cmp	r3, #2
 800954c:	f000 8083 	beq.w	8009656 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009550:	69bb      	ldr	r3, [r7, #24]
 8009552:	2b02      	cmp	r3, #2
 8009554:	f200 80a1 	bhi.w	800969a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009558:	69bb      	ldr	r3, [r7, #24]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d003      	beq.n	8009566 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800955e:	69bb      	ldr	r3, [r7, #24]
 8009560:	2b01      	cmp	r3, #1
 8009562:	d056      	beq.n	8009612 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009564:	e099      	b.n	800969a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009566:	4b88      	ldr	r3, [pc, #544]	; (8009788 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f003 0320 	and.w	r3, r3, #32
 800956e:	2b00      	cmp	r3, #0
 8009570:	d02d      	beq.n	80095ce <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009572:	4b85      	ldr	r3, [pc, #532]	; (8009788 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	08db      	lsrs	r3, r3, #3
 8009578:	f003 0303 	and.w	r3, r3, #3
 800957c:	4a83      	ldr	r2, [pc, #524]	; (800978c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800957e:	fa22 f303 	lsr.w	r3, r2, r3
 8009582:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	ee07 3a90 	vmov	s15, r3
 800958a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	ee07 3a90 	vmov	s15, r3
 8009594:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009598:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800959c:	4b7a      	ldr	r3, [pc, #488]	; (8009788 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800959e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095a4:	ee07 3a90 	vmov	s15, r3
 80095a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80095b0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009790 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80095b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095c8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80095cc:	e087      	b.n	80096de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	ee07 3a90 	vmov	s15, r3
 80095d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095d8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009794 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80095dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095e0:	4b69      	ldr	r3, [pc, #420]	; (8009788 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095e8:	ee07 3a90 	vmov	s15, r3
 80095ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80095f4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009790 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80095f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009600:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009604:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009608:	ee67 7a27 	vmul.f32	s15, s14, s15
 800960c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009610:	e065      	b.n	80096de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	ee07 3a90 	vmov	s15, r3
 8009618:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800961c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009798 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009620:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009624:	4b58      	ldr	r3, [pc, #352]	; (8009788 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800962c:	ee07 3a90 	vmov	s15, r3
 8009630:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009634:	ed97 6a03 	vldr	s12, [r7, #12]
 8009638:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009790 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800963c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009640:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009644:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009648:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800964c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009650:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009654:	e043      	b.n	80096de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	ee07 3a90 	vmov	s15, r3
 800965c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009660:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800979c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009664:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009668:	4b47      	ldr	r3, [pc, #284]	; (8009788 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800966a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800966c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009670:	ee07 3a90 	vmov	s15, r3
 8009674:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009678:	ed97 6a03 	vldr	s12, [r7, #12]
 800967c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009790 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009680:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009684:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009688:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800968c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009690:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009694:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009698:	e021      	b.n	80096de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	ee07 3a90 	vmov	s15, r3
 80096a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096a4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009794 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80096a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096ac:	4b36      	ldr	r3, [pc, #216]	; (8009788 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096b4:	ee07 3a90 	vmov	s15, r3
 80096b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80096c0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009790 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80096c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096dc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80096de:	4b2a      	ldr	r3, [pc, #168]	; (8009788 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096e2:	0a5b      	lsrs	r3, r3, #9
 80096e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096e8:	ee07 3a90 	vmov	s15, r3
 80096ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80096f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80096f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80096fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009700:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009704:	ee17 2a90 	vmov	r2, s15
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800970c:	4b1e      	ldr	r3, [pc, #120]	; (8009788 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800970e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009710:	0c1b      	lsrs	r3, r3, #16
 8009712:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009716:	ee07 3a90 	vmov	s15, r3
 800971a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800971e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009722:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009726:	edd7 6a07 	vldr	s13, [r7, #28]
 800972a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800972e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009732:	ee17 2a90 	vmov	r2, s15
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800973a:	4b13      	ldr	r3, [pc, #76]	; (8009788 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800973c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800973e:	0e1b      	lsrs	r3, r3, #24
 8009740:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009744:	ee07 3a90 	vmov	s15, r3
 8009748:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800974c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009750:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009754:	edd7 6a07 	vldr	s13, [r7, #28]
 8009758:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800975c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009760:	ee17 2a90 	vmov	r2, s15
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009768:	e008      	b.n	800977c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2200      	movs	r2, #0
 8009774:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2200      	movs	r2, #0
 800977a:	609a      	str	r2, [r3, #8]
}
 800977c:	bf00      	nop
 800977e:	3724      	adds	r7, #36	; 0x24
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr
 8009788:	58024400 	.word	0x58024400
 800978c:	03d09000 	.word	0x03d09000
 8009790:	46000000 	.word	0x46000000
 8009794:	4c742400 	.word	0x4c742400
 8009798:	4a742400 	.word	0x4a742400
 800979c:	4af42400 	.word	0x4af42400

080097a0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b084      	sub	sp, #16
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80097aa:	2300      	movs	r3, #0
 80097ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80097ae:	4b53      	ldr	r3, [pc, #332]	; (80098fc <RCCEx_PLL2_Config+0x15c>)
 80097b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097b2:	f003 0303 	and.w	r3, r3, #3
 80097b6:	2b03      	cmp	r3, #3
 80097b8:	d101      	bne.n	80097be <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80097ba:	2301      	movs	r3, #1
 80097bc:	e099      	b.n	80098f2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80097be:	4b4f      	ldr	r3, [pc, #316]	; (80098fc <RCCEx_PLL2_Config+0x15c>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	4a4e      	ldr	r2, [pc, #312]	; (80098fc <RCCEx_PLL2_Config+0x15c>)
 80097c4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80097c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097ca:	f7f7 fe83 	bl	80014d4 <HAL_GetTick>
 80097ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80097d0:	e008      	b.n	80097e4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80097d2:	f7f7 fe7f 	bl	80014d4 <HAL_GetTick>
 80097d6:	4602      	mov	r2, r0
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	1ad3      	subs	r3, r2, r3
 80097dc:	2b02      	cmp	r3, #2
 80097de:	d901      	bls.n	80097e4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80097e0:	2303      	movs	r3, #3
 80097e2:	e086      	b.n	80098f2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80097e4:	4b45      	ldr	r3, [pc, #276]	; (80098fc <RCCEx_PLL2_Config+0x15c>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d1f0      	bne.n	80097d2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80097f0:	4b42      	ldr	r3, [pc, #264]	; (80098fc <RCCEx_PLL2_Config+0x15c>)
 80097f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097f4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	031b      	lsls	r3, r3, #12
 80097fe:	493f      	ldr	r1, [pc, #252]	; (80098fc <RCCEx_PLL2_Config+0x15c>)
 8009800:	4313      	orrs	r3, r2
 8009802:	628b      	str	r3, [r1, #40]	; 0x28
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	685b      	ldr	r3, [r3, #4]
 8009808:	3b01      	subs	r3, #1
 800980a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	689b      	ldr	r3, [r3, #8]
 8009812:	3b01      	subs	r3, #1
 8009814:	025b      	lsls	r3, r3, #9
 8009816:	b29b      	uxth	r3, r3
 8009818:	431a      	orrs	r2, r3
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	68db      	ldr	r3, [r3, #12]
 800981e:	3b01      	subs	r3, #1
 8009820:	041b      	lsls	r3, r3, #16
 8009822:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009826:	431a      	orrs	r2, r3
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	691b      	ldr	r3, [r3, #16]
 800982c:	3b01      	subs	r3, #1
 800982e:	061b      	lsls	r3, r3, #24
 8009830:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009834:	4931      	ldr	r1, [pc, #196]	; (80098fc <RCCEx_PLL2_Config+0x15c>)
 8009836:	4313      	orrs	r3, r2
 8009838:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800983a:	4b30      	ldr	r3, [pc, #192]	; (80098fc <RCCEx_PLL2_Config+0x15c>)
 800983c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800983e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	695b      	ldr	r3, [r3, #20]
 8009846:	492d      	ldr	r1, [pc, #180]	; (80098fc <RCCEx_PLL2_Config+0x15c>)
 8009848:	4313      	orrs	r3, r2
 800984a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800984c:	4b2b      	ldr	r3, [pc, #172]	; (80098fc <RCCEx_PLL2_Config+0x15c>)
 800984e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009850:	f023 0220 	bic.w	r2, r3, #32
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	699b      	ldr	r3, [r3, #24]
 8009858:	4928      	ldr	r1, [pc, #160]	; (80098fc <RCCEx_PLL2_Config+0x15c>)
 800985a:	4313      	orrs	r3, r2
 800985c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800985e:	4b27      	ldr	r3, [pc, #156]	; (80098fc <RCCEx_PLL2_Config+0x15c>)
 8009860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009862:	4a26      	ldr	r2, [pc, #152]	; (80098fc <RCCEx_PLL2_Config+0x15c>)
 8009864:	f023 0310 	bic.w	r3, r3, #16
 8009868:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800986a:	4b24      	ldr	r3, [pc, #144]	; (80098fc <RCCEx_PLL2_Config+0x15c>)
 800986c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800986e:	4b24      	ldr	r3, [pc, #144]	; (8009900 <RCCEx_PLL2_Config+0x160>)
 8009870:	4013      	ands	r3, r2
 8009872:	687a      	ldr	r2, [r7, #4]
 8009874:	69d2      	ldr	r2, [r2, #28]
 8009876:	00d2      	lsls	r2, r2, #3
 8009878:	4920      	ldr	r1, [pc, #128]	; (80098fc <RCCEx_PLL2_Config+0x15c>)
 800987a:	4313      	orrs	r3, r2
 800987c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800987e:	4b1f      	ldr	r3, [pc, #124]	; (80098fc <RCCEx_PLL2_Config+0x15c>)
 8009880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009882:	4a1e      	ldr	r2, [pc, #120]	; (80098fc <RCCEx_PLL2_Config+0x15c>)
 8009884:	f043 0310 	orr.w	r3, r3, #16
 8009888:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d106      	bne.n	800989e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009890:	4b1a      	ldr	r3, [pc, #104]	; (80098fc <RCCEx_PLL2_Config+0x15c>)
 8009892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009894:	4a19      	ldr	r2, [pc, #100]	; (80098fc <RCCEx_PLL2_Config+0x15c>)
 8009896:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800989a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800989c:	e00f      	b.n	80098be <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d106      	bne.n	80098b2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80098a4:	4b15      	ldr	r3, [pc, #84]	; (80098fc <RCCEx_PLL2_Config+0x15c>)
 80098a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098a8:	4a14      	ldr	r2, [pc, #80]	; (80098fc <RCCEx_PLL2_Config+0x15c>)
 80098aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80098ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80098b0:	e005      	b.n	80098be <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80098b2:	4b12      	ldr	r3, [pc, #72]	; (80098fc <RCCEx_PLL2_Config+0x15c>)
 80098b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098b6:	4a11      	ldr	r2, [pc, #68]	; (80098fc <RCCEx_PLL2_Config+0x15c>)
 80098b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80098bc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80098be:	4b0f      	ldr	r3, [pc, #60]	; (80098fc <RCCEx_PLL2_Config+0x15c>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4a0e      	ldr	r2, [pc, #56]	; (80098fc <RCCEx_PLL2_Config+0x15c>)
 80098c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80098c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80098ca:	f7f7 fe03 	bl	80014d4 <HAL_GetTick>
 80098ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80098d0:	e008      	b.n	80098e4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80098d2:	f7f7 fdff 	bl	80014d4 <HAL_GetTick>
 80098d6:	4602      	mov	r2, r0
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	1ad3      	subs	r3, r2, r3
 80098dc:	2b02      	cmp	r3, #2
 80098de:	d901      	bls.n	80098e4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80098e0:	2303      	movs	r3, #3
 80098e2:	e006      	b.n	80098f2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80098e4:	4b05      	ldr	r3, [pc, #20]	; (80098fc <RCCEx_PLL2_Config+0x15c>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d0f0      	beq.n	80098d2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80098f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3710      	adds	r7, #16
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}
 80098fa:	bf00      	nop
 80098fc:	58024400 	.word	0x58024400
 8009900:	ffff0007 	.word	0xffff0007

08009904 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b084      	sub	sp, #16
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800990e:	2300      	movs	r3, #0
 8009910:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009912:	4b53      	ldr	r3, [pc, #332]	; (8009a60 <RCCEx_PLL3_Config+0x15c>)
 8009914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009916:	f003 0303 	and.w	r3, r3, #3
 800991a:	2b03      	cmp	r3, #3
 800991c:	d101      	bne.n	8009922 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800991e:	2301      	movs	r3, #1
 8009920:	e099      	b.n	8009a56 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009922:	4b4f      	ldr	r3, [pc, #316]	; (8009a60 <RCCEx_PLL3_Config+0x15c>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	4a4e      	ldr	r2, [pc, #312]	; (8009a60 <RCCEx_PLL3_Config+0x15c>)
 8009928:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800992c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800992e:	f7f7 fdd1 	bl	80014d4 <HAL_GetTick>
 8009932:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009934:	e008      	b.n	8009948 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009936:	f7f7 fdcd 	bl	80014d4 <HAL_GetTick>
 800993a:	4602      	mov	r2, r0
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	1ad3      	subs	r3, r2, r3
 8009940:	2b02      	cmp	r3, #2
 8009942:	d901      	bls.n	8009948 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009944:	2303      	movs	r3, #3
 8009946:	e086      	b.n	8009a56 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009948:	4b45      	ldr	r3, [pc, #276]	; (8009a60 <RCCEx_PLL3_Config+0x15c>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009950:	2b00      	cmp	r3, #0
 8009952:	d1f0      	bne.n	8009936 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009954:	4b42      	ldr	r3, [pc, #264]	; (8009a60 <RCCEx_PLL3_Config+0x15c>)
 8009956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009958:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	051b      	lsls	r3, r3, #20
 8009962:	493f      	ldr	r1, [pc, #252]	; (8009a60 <RCCEx_PLL3_Config+0x15c>)
 8009964:	4313      	orrs	r3, r2
 8009966:	628b      	str	r3, [r1, #40]	; 0x28
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	3b01      	subs	r3, #1
 800996e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	689b      	ldr	r3, [r3, #8]
 8009976:	3b01      	subs	r3, #1
 8009978:	025b      	lsls	r3, r3, #9
 800997a:	b29b      	uxth	r3, r3
 800997c:	431a      	orrs	r2, r3
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	68db      	ldr	r3, [r3, #12]
 8009982:	3b01      	subs	r3, #1
 8009984:	041b      	lsls	r3, r3, #16
 8009986:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800998a:	431a      	orrs	r2, r3
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	691b      	ldr	r3, [r3, #16]
 8009990:	3b01      	subs	r3, #1
 8009992:	061b      	lsls	r3, r3, #24
 8009994:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009998:	4931      	ldr	r1, [pc, #196]	; (8009a60 <RCCEx_PLL3_Config+0x15c>)
 800999a:	4313      	orrs	r3, r2
 800999c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800999e:	4b30      	ldr	r3, [pc, #192]	; (8009a60 <RCCEx_PLL3_Config+0x15c>)
 80099a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	695b      	ldr	r3, [r3, #20]
 80099aa:	492d      	ldr	r1, [pc, #180]	; (8009a60 <RCCEx_PLL3_Config+0x15c>)
 80099ac:	4313      	orrs	r3, r2
 80099ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80099b0:	4b2b      	ldr	r3, [pc, #172]	; (8009a60 <RCCEx_PLL3_Config+0x15c>)
 80099b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099b4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	699b      	ldr	r3, [r3, #24]
 80099bc:	4928      	ldr	r1, [pc, #160]	; (8009a60 <RCCEx_PLL3_Config+0x15c>)
 80099be:	4313      	orrs	r3, r2
 80099c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80099c2:	4b27      	ldr	r3, [pc, #156]	; (8009a60 <RCCEx_PLL3_Config+0x15c>)
 80099c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099c6:	4a26      	ldr	r2, [pc, #152]	; (8009a60 <RCCEx_PLL3_Config+0x15c>)
 80099c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80099ce:	4b24      	ldr	r3, [pc, #144]	; (8009a60 <RCCEx_PLL3_Config+0x15c>)
 80099d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80099d2:	4b24      	ldr	r3, [pc, #144]	; (8009a64 <RCCEx_PLL3_Config+0x160>)
 80099d4:	4013      	ands	r3, r2
 80099d6:	687a      	ldr	r2, [r7, #4]
 80099d8:	69d2      	ldr	r2, [r2, #28]
 80099da:	00d2      	lsls	r2, r2, #3
 80099dc:	4920      	ldr	r1, [pc, #128]	; (8009a60 <RCCEx_PLL3_Config+0x15c>)
 80099de:	4313      	orrs	r3, r2
 80099e0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80099e2:	4b1f      	ldr	r3, [pc, #124]	; (8009a60 <RCCEx_PLL3_Config+0x15c>)
 80099e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099e6:	4a1e      	ldr	r2, [pc, #120]	; (8009a60 <RCCEx_PLL3_Config+0x15c>)
 80099e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d106      	bne.n	8009a02 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80099f4:	4b1a      	ldr	r3, [pc, #104]	; (8009a60 <RCCEx_PLL3_Config+0x15c>)
 80099f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099f8:	4a19      	ldr	r2, [pc, #100]	; (8009a60 <RCCEx_PLL3_Config+0x15c>)
 80099fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80099fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009a00:	e00f      	b.n	8009a22 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d106      	bne.n	8009a16 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009a08:	4b15      	ldr	r3, [pc, #84]	; (8009a60 <RCCEx_PLL3_Config+0x15c>)
 8009a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a0c:	4a14      	ldr	r2, [pc, #80]	; (8009a60 <RCCEx_PLL3_Config+0x15c>)
 8009a0e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009a12:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009a14:	e005      	b.n	8009a22 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009a16:	4b12      	ldr	r3, [pc, #72]	; (8009a60 <RCCEx_PLL3_Config+0x15c>)
 8009a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a1a:	4a11      	ldr	r2, [pc, #68]	; (8009a60 <RCCEx_PLL3_Config+0x15c>)
 8009a1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009a20:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009a22:	4b0f      	ldr	r3, [pc, #60]	; (8009a60 <RCCEx_PLL3_Config+0x15c>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	4a0e      	ldr	r2, [pc, #56]	; (8009a60 <RCCEx_PLL3_Config+0x15c>)
 8009a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a2e:	f7f7 fd51 	bl	80014d4 <HAL_GetTick>
 8009a32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009a34:	e008      	b.n	8009a48 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009a36:	f7f7 fd4d 	bl	80014d4 <HAL_GetTick>
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	1ad3      	subs	r3, r2, r3
 8009a40:	2b02      	cmp	r3, #2
 8009a42:	d901      	bls.n	8009a48 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009a44:	2303      	movs	r3, #3
 8009a46:	e006      	b.n	8009a56 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009a48:	4b05      	ldr	r3, [pc, #20]	; (8009a60 <RCCEx_PLL3_Config+0x15c>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d0f0      	beq.n	8009a36 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3710      	adds	r7, #16
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	58024400 	.word	0x58024400
 8009a64:	ffff0007 	.word	0xffff0007

08009a68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b082      	sub	sp, #8
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d101      	bne.n	8009a7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009a76:	2301      	movs	r3, #1
 8009a78:	e049      	b.n	8009b0e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a80:	b2db      	uxtb	r3, r3
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d106      	bne.n	8009a94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f7f7 fb24 	bl	80010dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2202      	movs	r2, #2
 8009a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	3304      	adds	r3, #4
 8009aa4:	4619      	mov	r1, r3
 8009aa6:	4610      	mov	r0, r2
 8009aa8:	f000 f92e 	bl	8009d08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2201      	movs	r2, #1
 8009ab0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2201      	movs	r2, #1
 8009ac0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2201      	movs	r2, #1
 8009ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2201      	movs	r2, #1
 8009ae0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2201      	movs	r2, #1
 8009af0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2201      	movs	r2, #1
 8009af8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2201      	movs	r2, #1
 8009b00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2201      	movs	r2, #1
 8009b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b0c:	2300      	movs	r3, #0
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3708      	adds	r7, #8
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}
	...

08009b18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b084      	sub	sp, #16
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009b22:	2300      	movs	r3, #0
 8009b24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b2c:	2b01      	cmp	r3, #1
 8009b2e:	d101      	bne.n	8009b34 <HAL_TIM_ConfigClockSource+0x1c>
 8009b30:	2302      	movs	r3, #2
 8009b32:	e0dc      	b.n	8009cee <HAL_TIM_ConfigClockSource+0x1d6>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2201      	movs	r2, #1
 8009b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2202      	movs	r2, #2
 8009b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	689b      	ldr	r3, [r3, #8]
 8009b4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009b4c:	68ba      	ldr	r2, [r7, #8]
 8009b4e:	4b6a      	ldr	r3, [pc, #424]	; (8009cf8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009b50:	4013      	ands	r3, r2
 8009b52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009b5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	68ba      	ldr	r2, [r7, #8]
 8009b62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	4a64      	ldr	r2, [pc, #400]	; (8009cfc <HAL_TIM_ConfigClockSource+0x1e4>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	f000 80a9 	beq.w	8009cc2 <HAL_TIM_ConfigClockSource+0x1aa>
 8009b70:	4a62      	ldr	r2, [pc, #392]	; (8009cfc <HAL_TIM_ConfigClockSource+0x1e4>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	f200 80ae 	bhi.w	8009cd4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009b78:	4a61      	ldr	r2, [pc, #388]	; (8009d00 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	f000 80a1 	beq.w	8009cc2 <HAL_TIM_ConfigClockSource+0x1aa>
 8009b80:	4a5f      	ldr	r2, [pc, #380]	; (8009d00 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	f200 80a6 	bhi.w	8009cd4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009b88:	4a5e      	ldr	r2, [pc, #376]	; (8009d04 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	f000 8099 	beq.w	8009cc2 <HAL_TIM_ConfigClockSource+0x1aa>
 8009b90:	4a5c      	ldr	r2, [pc, #368]	; (8009d04 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	f200 809e 	bhi.w	8009cd4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009b98:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009b9c:	f000 8091 	beq.w	8009cc2 <HAL_TIM_ConfigClockSource+0x1aa>
 8009ba0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009ba4:	f200 8096 	bhi.w	8009cd4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009ba8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009bac:	f000 8089 	beq.w	8009cc2 <HAL_TIM_ConfigClockSource+0x1aa>
 8009bb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009bb4:	f200 808e 	bhi.w	8009cd4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009bb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bbc:	d03e      	beq.n	8009c3c <HAL_TIM_ConfigClockSource+0x124>
 8009bbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bc2:	f200 8087 	bhi.w	8009cd4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009bc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bca:	f000 8086 	beq.w	8009cda <HAL_TIM_ConfigClockSource+0x1c2>
 8009bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bd2:	d87f      	bhi.n	8009cd4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009bd4:	2b70      	cmp	r3, #112	; 0x70
 8009bd6:	d01a      	beq.n	8009c0e <HAL_TIM_ConfigClockSource+0xf6>
 8009bd8:	2b70      	cmp	r3, #112	; 0x70
 8009bda:	d87b      	bhi.n	8009cd4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009bdc:	2b60      	cmp	r3, #96	; 0x60
 8009bde:	d050      	beq.n	8009c82 <HAL_TIM_ConfigClockSource+0x16a>
 8009be0:	2b60      	cmp	r3, #96	; 0x60
 8009be2:	d877      	bhi.n	8009cd4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009be4:	2b50      	cmp	r3, #80	; 0x50
 8009be6:	d03c      	beq.n	8009c62 <HAL_TIM_ConfigClockSource+0x14a>
 8009be8:	2b50      	cmp	r3, #80	; 0x50
 8009bea:	d873      	bhi.n	8009cd4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009bec:	2b40      	cmp	r3, #64	; 0x40
 8009bee:	d058      	beq.n	8009ca2 <HAL_TIM_ConfigClockSource+0x18a>
 8009bf0:	2b40      	cmp	r3, #64	; 0x40
 8009bf2:	d86f      	bhi.n	8009cd4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009bf4:	2b30      	cmp	r3, #48	; 0x30
 8009bf6:	d064      	beq.n	8009cc2 <HAL_TIM_ConfigClockSource+0x1aa>
 8009bf8:	2b30      	cmp	r3, #48	; 0x30
 8009bfa:	d86b      	bhi.n	8009cd4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009bfc:	2b20      	cmp	r3, #32
 8009bfe:	d060      	beq.n	8009cc2 <HAL_TIM_ConfigClockSource+0x1aa>
 8009c00:	2b20      	cmp	r3, #32
 8009c02:	d867      	bhi.n	8009cd4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d05c      	beq.n	8009cc2 <HAL_TIM_ConfigClockSource+0x1aa>
 8009c08:	2b10      	cmp	r3, #16
 8009c0a:	d05a      	beq.n	8009cc2 <HAL_TIM_ConfigClockSource+0x1aa>
 8009c0c:	e062      	b.n	8009cd4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009c1e:	f000 f98b 	bl	8009f38 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	689b      	ldr	r3, [r3, #8]
 8009c28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009c30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	68ba      	ldr	r2, [r7, #8]
 8009c38:	609a      	str	r2, [r3, #8]
      break;
 8009c3a:	e04f      	b.n	8009cdc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009c4c:	f000 f974 	bl	8009f38 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	689a      	ldr	r2, [r3, #8]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009c5e:	609a      	str	r2, [r3, #8]
      break;
 8009c60:	e03c      	b.n	8009cdc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c6e:	461a      	mov	r2, r3
 8009c70:	f000 f8e4 	bl	8009e3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	2150      	movs	r1, #80	; 0x50
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f000 f93e 	bl	8009efc <TIM_ITRx_SetConfig>
      break;
 8009c80:	e02c      	b.n	8009cdc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c8e:	461a      	mov	r2, r3
 8009c90:	f000 f903 	bl	8009e9a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	2160      	movs	r1, #96	; 0x60
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f000 f92e 	bl	8009efc <TIM_ITRx_SetConfig>
      break;
 8009ca0:	e01c      	b.n	8009cdc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009cae:	461a      	mov	r2, r3
 8009cb0:	f000 f8c4 	bl	8009e3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	2140      	movs	r1, #64	; 0x40
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f000 f91e 	bl	8009efc <TIM_ITRx_SetConfig>
      break;
 8009cc0:	e00c      	b.n	8009cdc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681a      	ldr	r2, [r3, #0]
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	4619      	mov	r1, r3
 8009ccc:	4610      	mov	r0, r2
 8009cce:	f000 f915 	bl	8009efc <TIM_ITRx_SetConfig>
      break;
 8009cd2:	e003      	b.n	8009cdc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	73fb      	strb	r3, [r7, #15]
      break;
 8009cd8:	e000      	b.n	8009cdc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009cda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2201      	movs	r2, #1
 8009ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3710      	adds	r7, #16
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
 8009cf6:	bf00      	nop
 8009cf8:	ffceff88 	.word	0xffceff88
 8009cfc:	00100040 	.word	0x00100040
 8009d00:	00100030 	.word	0x00100030
 8009d04:	00100020 	.word	0x00100020

08009d08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b085      	sub	sp, #20
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	4a40      	ldr	r2, [pc, #256]	; (8009e1c <TIM_Base_SetConfig+0x114>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d013      	beq.n	8009d48 <TIM_Base_SetConfig+0x40>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d26:	d00f      	beq.n	8009d48 <TIM_Base_SetConfig+0x40>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	4a3d      	ldr	r2, [pc, #244]	; (8009e20 <TIM_Base_SetConfig+0x118>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d00b      	beq.n	8009d48 <TIM_Base_SetConfig+0x40>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	4a3c      	ldr	r2, [pc, #240]	; (8009e24 <TIM_Base_SetConfig+0x11c>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d007      	beq.n	8009d48 <TIM_Base_SetConfig+0x40>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	4a3b      	ldr	r2, [pc, #236]	; (8009e28 <TIM_Base_SetConfig+0x120>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d003      	beq.n	8009d48 <TIM_Base_SetConfig+0x40>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	4a3a      	ldr	r2, [pc, #232]	; (8009e2c <TIM_Base_SetConfig+0x124>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d108      	bne.n	8009d5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	68fa      	ldr	r2, [r7, #12]
 8009d56:	4313      	orrs	r3, r2
 8009d58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	4a2f      	ldr	r2, [pc, #188]	; (8009e1c <TIM_Base_SetConfig+0x114>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d01f      	beq.n	8009da2 <TIM_Base_SetConfig+0x9a>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d68:	d01b      	beq.n	8009da2 <TIM_Base_SetConfig+0x9a>
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	4a2c      	ldr	r2, [pc, #176]	; (8009e20 <TIM_Base_SetConfig+0x118>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d017      	beq.n	8009da2 <TIM_Base_SetConfig+0x9a>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	4a2b      	ldr	r2, [pc, #172]	; (8009e24 <TIM_Base_SetConfig+0x11c>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d013      	beq.n	8009da2 <TIM_Base_SetConfig+0x9a>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	4a2a      	ldr	r2, [pc, #168]	; (8009e28 <TIM_Base_SetConfig+0x120>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d00f      	beq.n	8009da2 <TIM_Base_SetConfig+0x9a>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	4a29      	ldr	r2, [pc, #164]	; (8009e2c <TIM_Base_SetConfig+0x124>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d00b      	beq.n	8009da2 <TIM_Base_SetConfig+0x9a>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	4a28      	ldr	r2, [pc, #160]	; (8009e30 <TIM_Base_SetConfig+0x128>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d007      	beq.n	8009da2 <TIM_Base_SetConfig+0x9a>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	4a27      	ldr	r2, [pc, #156]	; (8009e34 <TIM_Base_SetConfig+0x12c>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d003      	beq.n	8009da2 <TIM_Base_SetConfig+0x9a>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	4a26      	ldr	r2, [pc, #152]	; (8009e38 <TIM_Base_SetConfig+0x130>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d108      	bne.n	8009db4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009da8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	68db      	ldr	r3, [r3, #12]
 8009dae:	68fa      	ldr	r2, [r7, #12]
 8009db0:	4313      	orrs	r3, r2
 8009db2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	695b      	ldr	r3, [r3, #20]
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	68fa      	ldr	r2, [r7, #12]
 8009dc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	689a      	ldr	r2, [r3, #8]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	4a10      	ldr	r2, [pc, #64]	; (8009e1c <TIM_Base_SetConfig+0x114>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d00f      	beq.n	8009e00 <TIM_Base_SetConfig+0xf8>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	4a12      	ldr	r2, [pc, #72]	; (8009e2c <TIM_Base_SetConfig+0x124>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d00b      	beq.n	8009e00 <TIM_Base_SetConfig+0xf8>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	4a11      	ldr	r2, [pc, #68]	; (8009e30 <TIM_Base_SetConfig+0x128>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d007      	beq.n	8009e00 <TIM_Base_SetConfig+0xf8>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	4a10      	ldr	r2, [pc, #64]	; (8009e34 <TIM_Base_SetConfig+0x12c>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d003      	beq.n	8009e00 <TIM_Base_SetConfig+0xf8>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	4a0f      	ldr	r2, [pc, #60]	; (8009e38 <TIM_Base_SetConfig+0x130>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d103      	bne.n	8009e08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	691a      	ldr	r2, [r3, #16]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	615a      	str	r2, [r3, #20]
}
 8009e0e:	bf00      	nop
 8009e10:	3714      	adds	r7, #20
 8009e12:	46bd      	mov	sp, r7
 8009e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e18:	4770      	bx	lr
 8009e1a:	bf00      	nop
 8009e1c:	40010000 	.word	0x40010000
 8009e20:	40000400 	.word	0x40000400
 8009e24:	40000800 	.word	0x40000800
 8009e28:	40000c00 	.word	0x40000c00
 8009e2c:	40010400 	.word	0x40010400
 8009e30:	40014000 	.word	0x40014000
 8009e34:	40014400 	.word	0x40014400
 8009e38:	40014800 	.word	0x40014800

08009e3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b087      	sub	sp, #28
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	60b9      	str	r1, [r7, #8]
 8009e46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	6a1b      	ldr	r3, [r3, #32]
 8009e4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	6a1b      	ldr	r3, [r3, #32]
 8009e52:	f023 0201 	bic.w	r2, r3, #1
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	699b      	ldr	r3, [r3, #24]
 8009e5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009e66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	011b      	lsls	r3, r3, #4
 8009e6c:	693a      	ldr	r2, [r7, #16]
 8009e6e:	4313      	orrs	r3, r2
 8009e70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	f023 030a 	bic.w	r3, r3, #10
 8009e78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009e7a:	697a      	ldr	r2, [r7, #20]
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	4313      	orrs	r3, r2
 8009e80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	693a      	ldr	r2, [r7, #16]
 8009e86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	697a      	ldr	r2, [r7, #20]
 8009e8c:	621a      	str	r2, [r3, #32]
}
 8009e8e:	bf00      	nop
 8009e90:	371c      	adds	r7, #28
 8009e92:	46bd      	mov	sp, r7
 8009e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e98:	4770      	bx	lr

08009e9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e9a:	b480      	push	{r7}
 8009e9c:	b087      	sub	sp, #28
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	60f8      	str	r0, [r7, #12]
 8009ea2:	60b9      	str	r1, [r7, #8]
 8009ea4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	6a1b      	ldr	r3, [r3, #32]
 8009eaa:	f023 0210 	bic.w	r2, r3, #16
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	699b      	ldr	r3, [r3, #24]
 8009eb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	6a1b      	ldr	r3, [r3, #32]
 8009ebc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009ec4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	031b      	lsls	r3, r3, #12
 8009eca:	697a      	ldr	r2, [r7, #20]
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009ed6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	011b      	lsls	r3, r3, #4
 8009edc:	693a      	ldr	r2, [r7, #16]
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	697a      	ldr	r2, [r7, #20]
 8009ee6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	693a      	ldr	r2, [r7, #16]
 8009eec:	621a      	str	r2, [r3, #32]
}
 8009eee:	bf00      	nop
 8009ef0:	371c      	adds	r7, #28
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr
	...

08009efc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b085      	sub	sp, #20
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	689b      	ldr	r3, [r3, #8]
 8009f0a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009f0c:	68fa      	ldr	r2, [r7, #12]
 8009f0e:	4b09      	ldr	r3, [pc, #36]	; (8009f34 <TIM_ITRx_SetConfig+0x38>)
 8009f10:	4013      	ands	r3, r2
 8009f12:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009f14:	683a      	ldr	r2, [r7, #0]
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	f043 0307 	orr.w	r3, r3, #7
 8009f1e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	68fa      	ldr	r2, [r7, #12]
 8009f24:	609a      	str	r2, [r3, #8]
}
 8009f26:	bf00      	nop
 8009f28:	3714      	adds	r7, #20
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f30:	4770      	bx	lr
 8009f32:	bf00      	nop
 8009f34:	ffcfff8f 	.word	0xffcfff8f

08009f38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b087      	sub	sp, #28
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	60b9      	str	r1, [r7, #8]
 8009f42:	607a      	str	r2, [r7, #4]
 8009f44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	689b      	ldr	r3, [r3, #8]
 8009f4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	021a      	lsls	r2, r3, #8
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	431a      	orrs	r2, r3
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	4313      	orrs	r3, r2
 8009f60:	697a      	ldr	r2, [r7, #20]
 8009f62:	4313      	orrs	r3, r2
 8009f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	697a      	ldr	r2, [r7, #20]
 8009f6a:	609a      	str	r2, [r3, #8]
}
 8009f6c:	bf00      	nop
 8009f6e:	371c      	adds	r7, #28
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr

08009f78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b085      	sub	sp, #20
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
 8009f80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f88:	2b01      	cmp	r3, #1
 8009f8a:	d101      	bne.n	8009f90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009f8c:	2302      	movs	r3, #2
 8009f8e:	e06d      	b.n	800a06c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2201      	movs	r2, #1
 8009f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2202      	movs	r2, #2
 8009f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	689b      	ldr	r3, [r3, #8]
 8009fae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4a30      	ldr	r2, [pc, #192]	; (800a078 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d004      	beq.n	8009fc4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	4a2f      	ldr	r2, [pc, #188]	; (800a07c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d108      	bne.n	8009fd6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009fca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	68fa      	ldr	r2, [r7, #12]
 8009fd2:	4313      	orrs	r3, r2
 8009fd4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fdc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	68fa      	ldr	r2, [r7, #12]
 8009fe4:	4313      	orrs	r3, r2
 8009fe6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	68fa      	ldr	r2, [r7, #12]
 8009fee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4a20      	ldr	r2, [pc, #128]	; (800a078 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d022      	beq.n	800a040 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a002:	d01d      	beq.n	800a040 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4a1d      	ldr	r2, [pc, #116]	; (800a080 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d018      	beq.n	800a040 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	4a1c      	ldr	r2, [pc, #112]	; (800a084 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a014:	4293      	cmp	r3, r2
 800a016:	d013      	beq.n	800a040 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	4a1a      	ldr	r2, [pc, #104]	; (800a088 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	d00e      	beq.n	800a040 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	4a15      	ldr	r2, [pc, #84]	; (800a07c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a028:	4293      	cmp	r3, r2
 800a02a:	d009      	beq.n	800a040 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4a16      	ldr	r2, [pc, #88]	; (800a08c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d004      	beq.n	800a040 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4a15      	ldr	r2, [pc, #84]	; (800a090 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d10c      	bne.n	800a05a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a046:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	689b      	ldr	r3, [r3, #8]
 800a04c:	68ba      	ldr	r2, [r7, #8]
 800a04e:	4313      	orrs	r3, r2
 800a050:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	68ba      	ldr	r2, [r7, #8]
 800a058:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2201      	movs	r2, #1
 800a05e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2200      	movs	r2, #0
 800a066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a06a:	2300      	movs	r3, #0
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3714      	adds	r7, #20
 800a070:	46bd      	mov	sp, r7
 800a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a076:	4770      	bx	lr
 800a078:	40010000 	.word	0x40010000
 800a07c:	40010400 	.word	0x40010400
 800a080:	40000400 	.word	0x40000400
 800a084:	40000800 	.word	0x40000800
 800a088:	40000c00 	.word	0x40000c00
 800a08c:	40001800 	.word	0x40001800
 800a090:	40014000 	.word	0x40014000

0800a094 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b082      	sub	sp, #8
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d101      	bne.n	800a0a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	e042      	b.n	800a12c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d106      	bne.n	800a0be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f7f7 f831 	bl	8001120 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2224      	movs	r2, #36	; 0x24
 800a0c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	681a      	ldr	r2, [r3, #0]
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f022 0201 	bic.w	r2, r2, #1
 800a0d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f000 f82c 	bl	800a134 <UART_SetConfig>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	d101      	bne.n	800a0e6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	e022      	b.n	800a12c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d002      	beq.n	800a0f4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f000 fd88 	bl	800ac04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	685a      	ldr	r2, [r3, #4]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a102:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	689a      	ldr	r2, [r3, #8]
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a112:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	681a      	ldr	r2, [r3, #0]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f042 0201 	orr.w	r2, r2, #1
 800a122:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f000 fe0f 	bl	800ad48 <UART_CheckIdleState>
 800a12a:	4603      	mov	r3, r0
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3708      	adds	r7, #8
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}

0800a134 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a134:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a138:	b092      	sub	sp, #72	; 0x48
 800a13a:	af00      	add	r7, sp, #0
 800a13c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a13e:	2300      	movs	r3, #0
 800a140:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	689a      	ldr	r2, [r3, #8]
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	691b      	ldr	r3, [r3, #16]
 800a14c:	431a      	orrs	r2, r3
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	695b      	ldr	r3, [r3, #20]
 800a152:	431a      	orrs	r2, r3
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	69db      	ldr	r3, [r3, #28]
 800a158:	4313      	orrs	r3, r2
 800a15a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	681a      	ldr	r2, [r3, #0]
 800a162:	4bbe      	ldr	r3, [pc, #760]	; (800a45c <UART_SetConfig+0x328>)
 800a164:	4013      	ands	r3, r2
 800a166:	697a      	ldr	r2, [r7, #20]
 800a168:	6812      	ldr	r2, [r2, #0]
 800a16a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a16c:	430b      	orrs	r3, r1
 800a16e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	685b      	ldr	r3, [r3, #4]
 800a176:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	68da      	ldr	r2, [r3, #12]
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	430a      	orrs	r2, r1
 800a184:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	699b      	ldr	r3, [r3, #24]
 800a18a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4ab3      	ldr	r2, [pc, #716]	; (800a460 <UART_SetConfig+0x32c>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d004      	beq.n	800a1a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	6a1b      	ldr	r3, [r3, #32]
 800a19a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a19c:	4313      	orrs	r3, r2
 800a19e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	689a      	ldr	r2, [r3, #8]
 800a1a6:	4baf      	ldr	r3, [pc, #700]	; (800a464 <UART_SetConfig+0x330>)
 800a1a8:	4013      	ands	r3, r2
 800a1aa:	697a      	ldr	r2, [r7, #20]
 800a1ac:	6812      	ldr	r2, [r2, #0]
 800a1ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a1b0:	430b      	orrs	r3, r1
 800a1b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ba:	f023 010f 	bic.w	r1, r3, #15
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	430a      	orrs	r2, r1
 800a1c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	4aa6      	ldr	r2, [pc, #664]	; (800a468 <UART_SetConfig+0x334>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d177      	bne.n	800a2c4 <UART_SetConfig+0x190>
 800a1d4:	4ba5      	ldr	r3, [pc, #660]	; (800a46c <UART_SetConfig+0x338>)
 800a1d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a1dc:	2b28      	cmp	r3, #40	; 0x28
 800a1de:	d86d      	bhi.n	800a2bc <UART_SetConfig+0x188>
 800a1e0:	a201      	add	r2, pc, #4	; (adr r2, 800a1e8 <UART_SetConfig+0xb4>)
 800a1e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1e6:	bf00      	nop
 800a1e8:	0800a28d 	.word	0x0800a28d
 800a1ec:	0800a2bd 	.word	0x0800a2bd
 800a1f0:	0800a2bd 	.word	0x0800a2bd
 800a1f4:	0800a2bd 	.word	0x0800a2bd
 800a1f8:	0800a2bd 	.word	0x0800a2bd
 800a1fc:	0800a2bd 	.word	0x0800a2bd
 800a200:	0800a2bd 	.word	0x0800a2bd
 800a204:	0800a2bd 	.word	0x0800a2bd
 800a208:	0800a295 	.word	0x0800a295
 800a20c:	0800a2bd 	.word	0x0800a2bd
 800a210:	0800a2bd 	.word	0x0800a2bd
 800a214:	0800a2bd 	.word	0x0800a2bd
 800a218:	0800a2bd 	.word	0x0800a2bd
 800a21c:	0800a2bd 	.word	0x0800a2bd
 800a220:	0800a2bd 	.word	0x0800a2bd
 800a224:	0800a2bd 	.word	0x0800a2bd
 800a228:	0800a29d 	.word	0x0800a29d
 800a22c:	0800a2bd 	.word	0x0800a2bd
 800a230:	0800a2bd 	.word	0x0800a2bd
 800a234:	0800a2bd 	.word	0x0800a2bd
 800a238:	0800a2bd 	.word	0x0800a2bd
 800a23c:	0800a2bd 	.word	0x0800a2bd
 800a240:	0800a2bd 	.word	0x0800a2bd
 800a244:	0800a2bd 	.word	0x0800a2bd
 800a248:	0800a2a5 	.word	0x0800a2a5
 800a24c:	0800a2bd 	.word	0x0800a2bd
 800a250:	0800a2bd 	.word	0x0800a2bd
 800a254:	0800a2bd 	.word	0x0800a2bd
 800a258:	0800a2bd 	.word	0x0800a2bd
 800a25c:	0800a2bd 	.word	0x0800a2bd
 800a260:	0800a2bd 	.word	0x0800a2bd
 800a264:	0800a2bd 	.word	0x0800a2bd
 800a268:	0800a2ad 	.word	0x0800a2ad
 800a26c:	0800a2bd 	.word	0x0800a2bd
 800a270:	0800a2bd 	.word	0x0800a2bd
 800a274:	0800a2bd 	.word	0x0800a2bd
 800a278:	0800a2bd 	.word	0x0800a2bd
 800a27c:	0800a2bd 	.word	0x0800a2bd
 800a280:	0800a2bd 	.word	0x0800a2bd
 800a284:	0800a2bd 	.word	0x0800a2bd
 800a288:	0800a2b5 	.word	0x0800a2b5
 800a28c:	2301      	movs	r3, #1
 800a28e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a292:	e222      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a294:	2304      	movs	r3, #4
 800a296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a29a:	e21e      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a29c:	2308      	movs	r3, #8
 800a29e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2a2:	e21a      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a2a4:	2310      	movs	r3, #16
 800a2a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2aa:	e216      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a2ac:	2320      	movs	r3, #32
 800a2ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2b2:	e212      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a2b4:	2340      	movs	r3, #64	; 0x40
 800a2b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2ba:	e20e      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a2bc:	2380      	movs	r3, #128	; 0x80
 800a2be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2c2:	e20a      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	4a69      	ldr	r2, [pc, #420]	; (800a470 <UART_SetConfig+0x33c>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d130      	bne.n	800a330 <UART_SetConfig+0x1fc>
 800a2ce:	4b67      	ldr	r3, [pc, #412]	; (800a46c <UART_SetConfig+0x338>)
 800a2d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2d2:	f003 0307 	and.w	r3, r3, #7
 800a2d6:	2b05      	cmp	r3, #5
 800a2d8:	d826      	bhi.n	800a328 <UART_SetConfig+0x1f4>
 800a2da:	a201      	add	r2, pc, #4	; (adr r2, 800a2e0 <UART_SetConfig+0x1ac>)
 800a2dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2e0:	0800a2f9 	.word	0x0800a2f9
 800a2e4:	0800a301 	.word	0x0800a301
 800a2e8:	0800a309 	.word	0x0800a309
 800a2ec:	0800a311 	.word	0x0800a311
 800a2f0:	0800a319 	.word	0x0800a319
 800a2f4:	0800a321 	.word	0x0800a321
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2fe:	e1ec      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a300:	2304      	movs	r3, #4
 800a302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a306:	e1e8      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a308:	2308      	movs	r3, #8
 800a30a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a30e:	e1e4      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a310:	2310      	movs	r3, #16
 800a312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a316:	e1e0      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a318:	2320      	movs	r3, #32
 800a31a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a31e:	e1dc      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a320:	2340      	movs	r3, #64	; 0x40
 800a322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a326:	e1d8      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a328:	2380      	movs	r3, #128	; 0x80
 800a32a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a32e:	e1d4      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	4a4f      	ldr	r2, [pc, #316]	; (800a474 <UART_SetConfig+0x340>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d130      	bne.n	800a39c <UART_SetConfig+0x268>
 800a33a:	4b4c      	ldr	r3, [pc, #304]	; (800a46c <UART_SetConfig+0x338>)
 800a33c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a33e:	f003 0307 	and.w	r3, r3, #7
 800a342:	2b05      	cmp	r3, #5
 800a344:	d826      	bhi.n	800a394 <UART_SetConfig+0x260>
 800a346:	a201      	add	r2, pc, #4	; (adr r2, 800a34c <UART_SetConfig+0x218>)
 800a348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a34c:	0800a365 	.word	0x0800a365
 800a350:	0800a36d 	.word	0x0800a36d
 800a354:	0800a375 	.word	0x0800a375
 800a358:	0800a37d 	.word	0x0800a37d
 800a35c:	0800a385 	.word	0x0800a385
 800a360:	0800a38d 	.word	0x0800a38d
 800a364:	2300      	movs	r3, #0
 800a366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a36a:	e1b6      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a36c:	2304      	movs	r3, #4
 800a36e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a372:	e1b2      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a374:	2308      	movs	r3, #8
 800a376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a37a:	e1ae      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a37c:	2310      	movs	r3, #16
 800a37e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a382:	e1aa      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a384:	2320      	movs	r3, #32
 800a386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a38a:	e1a6      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a38c:	2340      	movs	r3, #64	; 0x40
 800a38e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a392:	e1a2      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a394:	2380      	movs	r3, #128	; 0x80
 800a396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a39a:	e19e      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a39c:	697b      	ldr	r3, [r7, #20]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4a35      	ldr	r2, [pc, #212]	; (800a478 <UART_SetConfig+0x344>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d130      	bne.n	800a408 <UART_SetConfig+0x2d4>
 800a3a6:	4b31      	ldr	r3, [pc, #196]	; (800a46c <UART_SetConfig+0x338>)
 800a3a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3aa:	f003 0307 	and.w	r3, r3, #7
 800a3ae:	2b05      	cmp	r3, #5
 800a3b0:	d826      	bhi.n	800a400 <UART_SetConfig+0x2cc>
 800a3b2:	a201      	add	r2, pc, #4	; (adr r2, 800a3b8 <UART_SetConfig+0x284>)
 800a3b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3b8:	0800a3d1 	.word	0x0800a3d1
 800a3bc:	0800a3d9 	.word	0x0800a3d9
 800a3c0:	0800a3e1 	.word	0x0800a3e1
 800a3c4:	0800a3e9 	.word	0x0800a3e9
 800a3c8:	0800a3f1 	.word	0x0800a3f1
 800a3cc:	0800a3f9 	.word	0x0800a3f9
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3d6:	e180      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a3d8:	2304      	movs	r3, #4
 800a3da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3de:	e17c      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a3e0:	2308      	movs	r3, #8
 800a3e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3e6:	e178      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a3e8:	2310      	movs	r3, #16
 800a3ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3ee:	e174      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a3f0:	2320      	movs	r3, #32
 800a3f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3f6:	e170      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a3f8:	2340      	movs	r3, #64	; 0x40
 800a3fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3fe:	e16c      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a400:	2380      	movs	r3, #128	; 0x80
 800a402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a406:	e168      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	4a1b      	ldr	r2, [pc, #108]	; (800a47c <UART_SetConfig+0x348>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	d142      	bne.n	800a498 <UART_SetConfig+0x364>
 800a412:	4b16      	ldr	r3, [pc, #88]	; (800a46c <UART_SetConfig+0x338>)
 800a414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a416:	f003 0307 	and.w	r3, r3, #7
 800a41a:	2b05      	cmp	r3, #5
 800a41c:	d838      	bhi.n	800a490 <UART_SetConfig+0x35c>
 800a41e:	a201      	add	r2, pc, #4	; (adr r2, 800a424 <UART_SetConfig+0x2f0>)
 800a420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a424:	0800a43d 	.word	0x0800a43d
 800a428:	0800a445 	.word	0x0800a445
 800a42c:	0800a44d 	.word	0x0800a44d
 800a430:	0800a455 	.word	0x0800a455
 800a434:	0800a481 	.word	0x0800a481
 800a438:	0800a489 	.word	0x0800a489
 800a43c:	2300      	movs	r3, #0
 800a43e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a442:	e14a      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a444:	2304      	movs	r3, #4
 800a446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a44a:	e146      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a44c:	2308      	movs	r3, #8
 800a44e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a452:	e142      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a454:	2310      	movs	r3, #16
 800a456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a45a:	e13e      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a45c:	cfff69f3 	.word	0xcfff69f3
 800a460:	58000c00 	.word	0x58000c00
 800a464:	11fff4ff 	.word	0x11fff4ff
 800a468:	40011000 	.word	0x40011000
 800a46c:	58024400 	.word	0x58024400
 800a470:	40004400 	.word	0x40004400
 800a474:	40004800 	.word	0x40004800
 800a478:	40004c00 	.word	0x40004c00
 800a47c:	40005000 	.word	0x40005000
 800a480:	2320      	movs	r3, #32
 800a482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a486:	e128      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a488:	2340      	movs	r3, #64	; 0x40
 800a48a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a48e:	e124      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a490:	2380      	movs	r3, #128	; 0x80
 800a492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a496:	e120      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	4acb      	ldr	r2, [pc, #812]	; (800a7cc <UART_SetConfig+0x698>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d176      	bne.n	800a590 <UART_SetConfig+0x45c>
 800a4a2:	4bcb      	ldr	r3, [pc, #812]	; (800a7d0 <UART_SetConfig+0x69c>)
 800a4a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a4aa:	2b28      	cmp	r3, #40	; 0x28
 800a4ac:	d86c      	bhi.n	800a588 <UART_SetConfig+0x454>
 800a4ae:	a201      	add	r2, pc, #4	; (adr r2, 800a4b4 <UART_SetConfig+0x380>)
 800a4b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4b4:	0800a559 	.word	0x0800a559
 800a4b8:	0800a589 	.word	0x0800a589
 800a4bc:	0800a589 	.word	0x0800a589
 800a4c0:	0800a589 	.word	0x0800a589
 800a4c4:	0800a589 	.word	0x0800a589
 800a4c8:	0800a589 	.word	0x0800a589
 800a4cc:	0800a589 	.word	0x0800a589
 800a4d0:	0800a589 	.word	0x0800a589
 800a4d4:	0800a561 	.word	0x0800a561
 800a4d8:	0800a589 	.word	0x0800a589
 800a4dc:	0800a589 	.word	0x0800a589
 800a4e0:	0800a589 	.word	0x0800a589
 800a4e4:	0800a589 	.word	0x0800a589
 800a4e8:	0800a589 	.word	0x0800a589
 800a4ec:	0800a589 	.word	0x0800a589
 800a4f0:	0800a589 	.word	0x0800a589
 800a4f4:	0800a569 	.word	0x0800a569
 800a4f8:	0800a589 	.word	0x0800a589
 800a4fc:	0800a589 	.word	0x0800a589
 800a500:	0800a589 	.word	0x0800a589
 800a504:	0800a589 	.word	0x0800a589
 800a508:	0800a589 	.word	0x0800a589
 800a50c:	0800a589 	.word	0x0800a589
 800a510:	0800a589 	.word	0x0800a589
 800a514:	0800a571 	.word	0x0800a571
 800a518:	0800a589 	.word	0x0800a589
 800a51c:	0800a589 	.word	0x0800a589
 800a520:	0800a589 	.word	0x0800a589
 800a524:	0800a589 	.word	0x0800a589
 800a528:	0800a589 	.word	0x0800a589
 800a52c:	0800a589 	.word	0x0800a589
 800a530:	0800a589 	.word	0x0800a589
 800a534:	0800a579 	.word	0x0800a579
 800a538:	0800a589 	.word	0x0800a589
 800a53c:	0800a589 	.word	0x0800a589
 800a540:	0800a589 	.word	0x0800a589
 800a544:	0800a589 	.word	0x0800a589
 800a548:	0800a589 	.word	0x0800a589
 800a54c:	0800a589 	.word	0x0800a589
 800a550:	0800a589 	.word	0x0800a589
 800a554:	0800a581 	.word	0x0800a581
 800a558:	2301      	movs	r3, #1
 800a55a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a55e:	e0bc      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a560:	2304      	movs	r3, #4
 800a562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a566:	e0b8      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a568:	2308      	movs	r3, #8
 800a56a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a56e:	e0b4      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a570:	2310      	movs	r3, #16
 800a572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a576:	e0b0      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a578:	2320      	movs	r3, #32
 800a57a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a57e:	e0ac      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a580:	2340      	movs	r3, #64	; 0x40
 800a582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a586:	e0a8      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a588:	2380      	movs	r3, #128	; 0x80
 800a58a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a58e:	e0a4      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	4a8f      	ldr	r2, [pc, #572]	; (800a7d4 <UART_SetConfig+0x6a0>)
 800a596:	4293      	cmp	r3, r2
 800a598:	d130      	bne.n	800a5fc <UART_SetConfig+0x4c8>
 800a59a:	4b8d      	ldr	r3, [pc, #564]	; (800a7d0 <UART_SetConfig+0x69c>)
 800a59c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a59e:	f003 0307 	and.w	r3, r3, #7
 800a5a2:	2b05      	cmp	r3, #5
 800a5a4:	d826      	bhi.n	800a5f4 <UART_SetConfig+0x4c0>
 800a5a6:	a201      	add	r2, pc, #4	; (adr r2, 800a5ac <UART_SetConfig+0x478>)
 800a5a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5ac:	0800a5c5 	.word	0x0800a5c5
 800a5b0:	0800a5cd 	.word	0x0800a5cd
 800a5b4:	0800a5d5 	.word	0x0800a5d5
 800a5b8:	0800a5dd 	.word	0x0800a5dd
 800a5bc:	0800a5e5 	.word	0x0800a5e5
 800a5c0:	0800a5ed 	.word	0x0800a5ed
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5ca:	e086      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a5cc:	2304      	movs	r3, #4
 800a5ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5d2:	e082      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a5d4:	2308      	movs	r3, #8
 800a5d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5da:	e07e      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a5dc:	2310      	movs	r3, #16
 800a5de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5e2:	e07a      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a5e4:	2320      	movs	r3, #32
 800a5e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5ea:	e076      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a5ec:	2340      	movs	r3, #64	; 0x40
 800a5ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5f2:	e072      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a5f4:	2380      	movs	r3, #128	; 0x80
 800a5f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5fa:	e06e      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4a75      	ldr	r2, [pc, #468]	; (800a7d8 <UART_SetConfig+0x6a4>)
 800a602:	4293      	cmp	r3, r2
 800a604:	d130      	bne.n	800a668 <UART_SetConfig+0x534>
 800a606:	4b72      	ldr	r3, [pc, #456]	; (800a7d0 <UART_SetConfig+0x69c>)
 800a608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a60a:	f003 0307 	and.w	r3, r3, #7
 800a60e:	2b05      	cmp	r3, #5
 800a610:	d826      	bhi.n	800a660 <UART_SetConfig+0x52c>
 800a612:	a201      	add	r2, pc, #4	; (adr r2, 800a618 <UART_SetConfig+0x4e4>)
 800a614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a618:	0800a631 	.word	0x0800a631
 800a61c:	0800a639 	.word	0x0800a639
 800a620:	0800a641 	.word	0x0800a641
 800a624:	0800a649 	.word	0x0800a649
 800a628:	0800a651 	.word	0x0800a651
 800a62c:	0800a659 	.word	0x0800a659
 800a630:	2300      	movs	r3, #0
 800a632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a636:	e050      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a638:	2304      	movs	r3, #4
 800a63a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a63e:	e04c      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a640:	2308      	movs	r3, #8
 800a642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a646:	e048      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a648:	2310      	movs	r3, #16
 800a64a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a64e:	e044      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a650:	2320      	movs	r3, #32
 800a652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a656:	e040      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a658:	2340      	movs	r3, #64	; 0x40
 800a65a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a65e:	e03c      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a660:	2380      	movs	r3, #128	; 0x80
 800a662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a666:	e038      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	4a5b      	ldr	r2, [pc, #364]	; (800a7dc <UART_SetConfig+0x6a8>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	d130      	bne.n	800a6d4 <UART_SetConfig+0x5a0>
 800a672:	4b57      	ldr	r3, [pc, #348]	; (800a7d0 <UART_SetConfig+0x69c>)
 800a674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a676:	f003 0307 	and.w	r3, r3, #7
 800a67a:	2b05      	cmp	r3, #5
 800a67c:	d826      	bhi.n	800a6cc <UART_SetConfig+0x598>
 800a67e:	a201      	add	r2, pc, #4	; (adr r2, 800a684 <UART_SetConfig+0x550>)
 800a680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a684:	0800a69d 	.word	0x0800a69d
 800a688:	0800a6a5 	.word	0x0800a6a5
 800a68c:	0800a6ad 	.word	0x0800a6ad
 800a690:	0800a6b5 	.word	0x0800a6b5
 800a694:	0800a6bd 	.word	0x0800a6bd
 800a698:	0800a6c5 	.word	0x0800a6c5
 800a69c:	2302      	movs	r3, #2
 800a69e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6a2:	e01a      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a6a4:	2304      	movs	r3, #4
 800a6a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6aa:	e016      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a6ac:	2308      	movs	r3, #8
 800a6ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6b2:	e012      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a6b4:	2310      	movs	r3, #16
 800a6b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6ba:	e00e      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a6bc:	2320      	movs	r3, #32
 800a6be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6c2:	e00a      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a6c4:	2340      	movs	r3, #64	; 0x40
 800a6c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6ca:	e006      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a6cc:	2380      	movs	r3, #128	; 0x80
 800a6ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6d2:	e002      	b.n	800a6da <UART_SetConfig+0x5a6>
 800a6d4:	2380      	movs	r3, #128	; 0x80
 800a6d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a6da:	697b      	ldr	r3, [r7, #20]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	4a3f      	ldr	r2, [pc, #252]	; (800a7dc <UART_SetConfig+0x6a8>)
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	f040 80f8 	bne.w	800a8d6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a6e6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a6ea:	2b20      	cmp	r3, #32
 800a6ec:	dc46      	bgt.n	800a77c <UART_SetConfig+0x648>
 800a6ee:	2b02      	cmp	r3, #2
 800a6f0:	f2c0 8082 	blt.w	800a7f8 <UART_SetConfig+0x6c4>
 800a6f4:	3b02      	subs	r3, #2
 800a6f6:	2b1e      	cmp	r3, #30
 800a6f8:	d87e      	bhi.n	800a7f8 <UART_SetConfig+0x6c4>
 800a6fa:	a201      	add	r2, pc, #4	; (adr r2, 800a700 <UART_SetConfig+0x5cc>)
 800a6fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a700:	0800a783 	.word	0x0800a783
 800a704:	0800a7f9 	.word	0x0800a7f9
 800a708:	0800a78b 	.word	0x0800a78b
 800a70c:	0800a7f9 	.word	0x0800a7f9
 800a710:	0800a7f9 	.word	0x0800a7f9
 800a714:	0800a7f9 	.word	0x0800a7f9
 800a718:	0800a79b 	.word	0x0800a79b
 800a71c:	0800a7f9 	.word	0x0800a7f9
 800a720:	0800a7f9 	.word	0x0800a7f9
 800a724:	0800a7f9 	.word	0x0800a7f9
 800a728:	0800a7f9 	.word	0x0800a7f9
 800a72c:	0800a7f9 	.word	0x0800a7f9
 800a730:	0800a7f9 	.word	0x0800a7f9
 800a734:	0800a7f9 	.word	0x0800a7f9
 800a738:	0800a7ab 	.word	0x0800a7ab
 800a73c:	0800a7f9 	.word	0x0800a7f9
 800a740:	0800a7f9 	.word	0x0800a7f9
 800a744:	0800a7f9 	.word	0x0800a7f9
 800a748:	0800a7f9 	.word	0x0800a7f9
 800a74c:	0800a7f9 	.word	0x0800a7f9
 800a750:	0800a7f9 	.word	0x0800a7f9
 800a754:	0800a7f9 	.word	0x0800a7f9
 800a758:	0800a7f9 	.word	0x0800a7f9
 800a75c:	0800a7f9 	.word	0x0800a7f9
 800a760:	0800a7f9 	.word	0x0800a7f9
 800a764:	0800a7f9 	.word	0x0800a7f9
 800a768:	0800a7f9 	.word	0x0800a7f9
 800a76c:	0800a7f9 	.word	0x0800a7f9
 800a770:	0800a7f9 	.word	0x0800a7f9
 800a774:	0800a7f9 	.word	0x0800a7f9
 800a778:	0800a7eb 	.word	0x0800a7eb
 800a77c:	2b40      	cmp	r3, #64	; 0x40
 800a77e:	d037      	beq.n	800a7f0 <UART_SetConfig+0x6bc>
 800a780:	e03a      	b.n	800a7f8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a782:	f7fe fbfd 	bl	8008f80 <HAL_RCCEx_GetD3PCLK1Freq>
 800a786:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a788:	e03c      	b.n	800a804 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a78a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a78e:	4618      	mov	r0, r3
 800a790:	f7fe fc0c 	bl	8008fac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a796:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a798:	e034      	b.n	800a804 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a79a:	f107 0318 	add.w	r3, r7, #24
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f7fe fd58 	bl	8009254 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a7a4:	69fb      	ldr	r3, [r7, #28]
 800a7a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7a8:	e02c      	b.n	800a804 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a7aa:	4b09      	ldr	r3, [pc, #36]	; (800a7d0 <UART_SetConfig+0x69c>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f003 0320 	and.w	r3, r3, #32
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d016      	beq.n	800a7e4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a7b6:	4b06      	ldr	r3, [pc, #24]	; (800a7d0 <UART_SetConfig+0x69c>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	08db      	lsrs	r3, r3, #3
 800a7bc:	f003 0303 	and.w	r3, r3, #3
 800a7c0:	4a07      	ldr	r2, [pc, #28]	; (800a7e0 <UART_SetConfig+0x6ac>)
 800a7c2:	fa22 f303 	lsr.w	r3, r2, r3
 800a7c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a7c8:	e01c      	b.n	800a804 <UART_SetConfig+0x6d0>
 800a7ca:	bf00      	nop
 800a7cc:	40011400 	.word	0x40011400
 800a7d0:	58024400 	.word	0x58024400
 800a7d4:	40007800 	.word	0x40007800
 800a7d8:	40007c00 	.word	0x40007c00
 800a7dc:	58000c00 	.word	0x58000c00
 800a7e0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a7e4:	4b9d      	ldr	r3, [pc, #628]	; (800aa5c <UART_SetConfig+0x928>)
 800a7e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7e8:	e00c      	b.n	800a804 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a7ea:	4b9d      	ldr	r3, [pc, #628]	; (800aa60 <UART_SetConfig+0x92c>)
 800a7ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7ee:	e009      	b.n	800a804 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a7f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7f6:	e005      	b.n	800a804 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a802:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a806:	2b00      	cmp	r3, #0
 800a808:	f000 81de 	beq.w	800abc8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a810:	4a94      	ldr	r2, [pc, #592]	; (800aa64 <UART_SetConfig+0x930>)
 800a812:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a816:	461a      	mov	r2, r3
 800a818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a81a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a81e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	685a      	ldr	r2, [r3, #4]
 800a824:	4613      	mov	r3, r2
 800a826:	005b      	lsls	r3, r3, #1
 800a828:	4413      	add	r3, r2
 800a82a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a82c:	429a      	cmp	r2, r3
 800a82e:	d305      	bcc.n	800a83c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a836:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a838:	429a      	cmp	r2, r3
 800a83a:	d903      	bls.n	800a844 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a83c:	2301      	movs	r3, #1
 800a83e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a842:	e1c1      	b.n	800abc8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a846:	2200      	movs	r2, #0
 800a848:	60bb      	str	r3, [r7, #8]
 800a84a:	60fa      	str	r2, [r7, #12]
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a850:	4a84      	ldr	r2, [pc, #528]	; (800aa64 <UART_SetConfig+0x930>)
 800a852:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a856:	b29b      	uxth	r3, r3
 800a858:	2200      	movs	r2, #0
 800a85a:	603b      	str	r3, [r7, #0]
 800a85c:	607a      	str	r2, [r7, #4]
 800a85e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a862:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a866:	f7f5 fd37 	bl	80002d8 <__aeabi_uldivmod>
 800a86a:	4602      	mov	r2, r0
 800a86c:	460b      	mov	r3, r1
 800a86e:	4610      	mov	r0, r2
 800a870:	4619      	mov	r1, r3
 800a872:	f04f 0200 	mov.w	r2, #0
 800a876:	f04f 0300 	mov.w	r3, #0
 800a87a:	020b      	lsls	r3, r1, #8
 800a87c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a880:	0202      	lsls	r2, r0, #8
 800a882:	6979      	ldr	r1, [r7, #20]
 800a884:	6849      	ldr	r1, [r1, #4]
 800a886:	0849      	lsrs	r1, r1, #1
 800a888:	2000      	movs	r0, #0
 800a88a:	460c      	mov	r4, r1
 800a88c:	4605      	mov	r5, r0
 800a88e:	eb12 0804 	adds.w	r8, r2, r4
 800a892:	eb43 0905 	adc.w	r9, r3, r5
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	685b      	ldr	r3, [r3, #4]
 800a89a:	2200      	movs	r2, #0
 800a89c:	469a      	mov	sl, r3
 800a89e:	4693      	mov	fp, r2
 800a8a0:	4652      	mov	r2, sl
 800a8a2:	465b      	mov	r3, fp
 800a8a4:	4640      	mov	r0, r8
 800a8a6:	4649      	mov	r1, r9
 800a8a8:	f7f5 fd16 	bl	80002d8 <__aeabi_uldivmod>
 800a8ac:	4602      	mov	r2, r0
 800a8ae:	460b      	mov	r3, r1
 800a8b0:	4613      	mov	r3, r2
 800a8b2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a8ba:	d308      	bcc.n	800a8ce <UART_SetConfig+0x79a>
 800a8bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a8c2:	d204      	bcs.n	800a8ce <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8ca:	60da      	str	r2, [r3, #12]
 800a8cc:	e17c      	b.n	800abc8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a8d4:	e178      	b.n	800abc8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	69db      	ldr	r3, [r3, #28]
 800a8da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a8de:	f040 80c5 	bne.w	800aa6c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a8e2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a8e6:	2b20      	cmp	r3, #32
 800a8e8:	dc48      	bgt.n	800a97c <UART_SetConfig+0x848>
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	db7b      	blt.n	800a9e6 <UART_SetConfig+0x8b2>
 800a8ee:	2b20      	cmp	r3, #32
 800a8f0:	d879      	bhi.n	800a9e6 <UART_SetConfig+0x8b2>
 800a8f2:	a201      	add	r2, pc, #4	; (adr r2, 800a8f8 <UART_SetConfig+0x7c4>)
 800a8f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8f8:	0800a983 	.word	0x0800a983
 800a8fc:	0800a98b 	.word	0x0800a98b
 800a900:	0800a9e7 	.word	0x0800a9e7
 800a904:	0800a9e7 	.word	0x0800a9e7
 800a908:	0800a993 	.word	0x0800a993
 800a90c:	0800a9e7 	.word	0x0800a9e7
 800a910:	0800a9e7 	.word	0x0800a9e7
 800a914:	0800a9e7 	.word	0x0800a9e7
 800a918:	0800a9a3 	.word	0x0800a9a3
 800a91c:	0800a9e7 	.word	0x0800a9e7
 800a920:	0800a9e7 	.word	0x0800a9e7
 800a924:	0800a9e7 	.word	0x0800a9e7
 800a928:	0800a9e7 	.word	0x0800a9e7
 800a92c:	0800a9e7 	.word	0x0800a9e7
 800a930:	0800a9e7 	.word	0x0800a9e7
 800a934:	0800a9e7 	.word	0x0800a9e7
 800a938:	0800a9b3 	.word	0x0800a9b3
 800a93c:	0800a9e7 	.word	0x0800a9e7
 800a940:	0800a9e7 	.word	0x0800a9e7
 800a944:	0800a9e7 	.word	0x0800a9e7
 800a948:	0800a9e7 	.word	0x0800a9e7
 800a94c:	0800a9e7 	.word	0x0800a9e7
 800a950:	0800a9e7 	.word	0x0800a9e7
 800a954:	0800a9e7 	.word	0x0800a9e7
 800a958:	0800a9e7 	.word	0x0800a9e7
 800a95c:	0800a9e7 	.word	0x0800a9e7
 800a960:	0800a9e7 	.word	0x0800a9e7
 800a964:	0800a9e7 	.word	0x0800a9e7
 800a968:	0800a9e7 	.word	0x0800a9e7
 800a96c:	0800a9e7 	.word	0x0800a9e7
 800a970:	0800a9e7 	.word	0x0800a9e7
 800a974:	0800a9e7 	.word	0x0800a9e7
 800a978:	0800a9d9 	.word	0x0800a9d9
 800a97c:	2b40      	cmp	r3, #64	; 0x40
 800a97e:	d02e      	beq.n	800a9de <UART_SetConfig+0x8aa>
 800a980:	e031      	b.n	800a9e6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a982:	f7fc fb47 	bl	8007014 <HAL_RCC_GetPCLK1Freq>
 800a986:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a988:	e033      	b.n	800a9f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a98a:	f7fc fb59 	bl	8007040 <HAL_RCC_GetPCLK2Freq>
 800a98e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a990:	e02f      	b.n	800a9f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a996:	4618      	mov	r0, r3
 800a998:	f7fe fb08 	bl	8008fac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a99e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9a0:	e027      	b.n	800a9f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9a2:	f107 0318 	add.w	r3, r7, #24
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f7fe fc54 	bl	8009254 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a9ac:	69fb      	ldr	r3, [r7, #28]
 800a9ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9b0:	e01f      	b.n	800a9f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9b2:	4b2d      	ldr	r3, [pc, #180]	; (800aa68 <UART_SetConfig+0x934>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f003 0320 	and.w	r3, r3, #32
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d009      	beq.n	800a9d2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a9be:	4b2a      	ldr	r3, [pc, #168]	; (800aa68 <UART_SetConfig+0x934>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	08db      	lsrs	r3, r3, #3
 800a9c4:	f003 0303 	and.w	r3, r3, #3
 800a9c8:	4a24      	ldr	r2, [pc, #144]	; (800aa5c <UART_SetConfig+0x928>)
 800a9ca:	fa22 f303 	lsr.w	r3, r2, r3
 800a9ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a9d0:	e00f      	b.n	800a9f2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a9d2:	4b22      	ldr	r3, [pc, #136]	; (800aa5c <UART_SetConfig+0x928>)
 800a9d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9d6:	e00c      	b.n	800a9f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a9d8:	4b21      	ldr	r3, [pc, #132]	; (800aa60 <UART_SetConfig+0x92c>)
 800a9da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9dc:	e009      	b.n	800a9f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a9de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a9e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9e4:	e005      	b.n	800a9f2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a9f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a9f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	f000 80e7 	beq.w	800abc8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9fe:	4a19      	ldr	r2, [pc, #100]	; (800aa64 <UART_SetConfig+0x930>)
 800aa00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa04:	461a      	mov	r2, r3
 800aa06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa08:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa0c:	005a      	lsls	r2, r3, #1
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	685b      	ldr	r3, [r3, #4]
 800aa12:	085b      	lsrs	r3, r3, #1
 800aa14:	441a      	add	r2, r3
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	685b      	ldr	r3, [r3, #4]
 800aa1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa1e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa22:	2b0f      	cmp	r3, #15
 800aa24:	d916      	bls.n	800aa54 <UART_SetConfig+0x920>
 800aa26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa2c:	d212      	bcs.n	800aa54 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aa2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa30:	b29b      	uxth	r3, r3
 800aa32:	f023 030f 	bic.w	r3, r3, #15
 800aa36:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aa38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa3a:	085b      	lsrs	r3, r3, #1
 800aa3c:	b29b      	uxth	r3, r3
 800aa3e:	f003 0307 	and.w	r3, r3, #7
 800aa42:	b29a      	uxth	r2, r3
 800aa44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800aa46:	4313      	orrs	r3, r2
 800aa48:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800aa50:	60da      	str	r2, [r3, #12]
 800aa52:	e0b9      	b.n	800abc8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800aa54:	2301      	movs	r3, #1
 800aa56:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800aa5a:	e0b5      	b.n	800abc8 <UART_SetConfig+0xa94>
 800aa5c:	03d09000 	.word	0x03d09000
 800aa60:	003d0900 	.word	0x003d0900
 800aa64:	0800bb40 	.word	0x0800bb40
 800aa68:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800aa6c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800aa70:	2b20      	cmp	r3, #32
 800aa72:	dc49      	bgt.n	800ab08 <UART_SetConfig+0x9d4>
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	db7c      	blt.n	800ab72 <UART_SetConfig+0xa3e>
 800aa78:	2b20      	cmp	r3, #32
 800aa7a:	d87a      	bhi.n	800ab72 <UART_SetConfig+0xa3e>
 800aa7c:	a201      	add	r2, pc, #4	; (adr r2, 800aa84 <UART_SetConfig+0x950>)
 800aa7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa82:	bf00      	nop
 800aa84:	0800ab0f 	.word	0x0800ab0f
 800aa88:	0800ab17 	.word	0x0800ab17
 800aa8c:	0800ab73 	.word	0x0800ab73
 800aa90:	0800ab73 	.word	0x0800ab73
 800aa94:	0800ab1f 	.word	0x0800ab1f
 800aa98:	0800ab73 	.word	0x0800ab73
 800aa9c:	0800ab73 	.word	0x0800ab73
 800aaa0:	0800ab73 	.word	0x0800ab73
 800aaa4:	0800ab2f 	.word	0x0800ab2f
 800aaa8:	0800ab73 	.word	0x0800ab73
 800aaac:	0800ab73 	.word	0x0800ab73
 800aab0:	0800ab73 	.word	0x0800ab73
 800aab4:	0800ab73 	.word	0x0800ab73
 800aab8:	0800ab73 	.word	0x0800ab73
 800aabc:	0800ab73 	.word	0x0800ab73
 800aac0:	0800ab73 	.word	0x0800ab73
 800aac4:	0800ab3f 	.word	0x0800ab3f
 800aac8:	0800ab73 	.word	0x0800ab73
 800aacc:	0800ab73 	.word	0x0800ab73
 800aad0:	0800ab73 	.word	0x0800ab73
 800aad4:	0800ab73 	.word	0x0800ab73
 800aad8:	0800ab73 	.word	0x0800ab73
 800aadc:	0800ab73 	.word	0x0800ab73
 800aae0:	0800ab73 	.word	0x0800ab73
 800aae4:	0800ab73 	.word	0x0800ab73
 800aae8:	0800ab73 	.word	0x0800ab73
 800aaec:	0800ab73 	.word	0x0800ab73
 800aaf0:	0800ab73 	.word	0x0800ab73
 800aaf4:	0800ab73 	.word	0x0800ab73
 800aaf8:	0800ab73 	.word	0x0800ab73
 800aafc:	0800ab73 	.word	0x0800ab73
 800ab00:	0800ab73 	.word	0x0800ab73
 800ab04:	0800ab65 	.word	0x0800ab65
 800ab08:	2b40      	cmp	r3, #64	; 0x40
 800ab0a:	d02e      	beq.n	800ab6a <UART_SetConfig+0xa36>
 800ab0c:	e031      	b.n	800ab72 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab0e:	f7fc fa81 	bl	8007014 <HAL_RCC_GetPCLK1Freq>
 800ab12:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ab14:	e033      	b.n	800ab7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab16:	f7fc fa93 	bl	8007040 <HAL_RCC_GetPCLK2Freq>
 800ab1a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ab1c:	e02f      	b.n	800ab7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab22:	4618      	mov	r0, r3
 800ab24:	f7fe fa42 	bl	8008fac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ab28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab2c:	e027      	b.n	800ab7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab2e:	f107 0318 	add.w	r3, r7, #24
 800ab32:	4618      	mov	r0, r3
 800ab34:	f7fe fb8e 	bl	8009254 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ab38:	69fb      	ldr	r3, [r7, #28]
 800ab3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab3c:	e01f      	b.n	800ab7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab3e:	4b2d      	ldr	r3, [pc, #180]	; (800abf4 <UART_SetConfig+0xac0>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f003 0320 	and.w	r3, r3, #32
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d009      	beq.n	800ab5e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ab4a:	4b2a      	ldr	r3, [pc, #168]	; (800abf4 <UART_SetConfig+0xac0>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	08db      	lsrs	r3, r3, #3
 800ab50:	f003 0303 	and.w	r3, r3, #3
 800ab54:	4a28      	ldr	r2, [pc, #160]	; (800abf8 <UART_SetConfig+0xac4>)
 800ab56:	fa22 f303 	lsr.w	r3, r2, r3
 800ab5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ab5c:	e00f      	b.n	800ab7e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ab5e:	4b26      	ldr	r3, [pc, #152]	; (800abf8 <UART_SetConfig+0xac4>)
 800ab60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab62:	e00c      	b.n	800ab7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ab64:	4b25      	ldr	r3, [pc, #148]	; (800abfc <UART_SetConfig+0xac8>)
 800ab66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab68:	e009      	b.n	800ab7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab70:	e005      	b.n	800ab7e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ab72:	2300      	movs	r3, #0
 800ab74:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ab76:	2301      	movs	r3, #1
 800ab78:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ab7c:	bf00      	nop
    }

    if (pclk != 0U)
 800ab7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d021      	beq.n	800abc8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab88:	4a1d      	ldr	r2, [pc, #116]	; (800ac00 <UART_SetConfig+0xacc>)
 800ab8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab8e:	461a      	mov	r2, r3
 800ab90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab92:	fbb3 f2f2 	udiv	r2, r3, r2
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	685b      	ldr	r3, [r3, #4]
 800ab9a:	085b      	lsrs	r3, r3, #1
 800ab9c:	441a      	add	r2, r3
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	685b      	ldr	r3, [r3, #4]
 800aba2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aba6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abaa:	2b0f      	cmp	r3, #15
 800abac:	d909      	bls.n	800abc2 <UART_SetConfig+0xa8e>
 800abae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abb4:	d205      	bcs.n	800abc2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800abb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abb8:	b29a      	uxth	r2, r3
 800abba:	697b      	ldr	r3, [r7, #20]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	60da      	str	r2, [r3, #12]
 800abc0:	e002      	b.n	800abc8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800abc2:	2301      	movs	r3, #1
 800abc4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	2201      	movs	r2, #1
 800abcc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	2201      	movs	r2, #1
 800abd4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	2200      	movs	r2, #0
 800abdc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	2200      	movs	r2, #0
 800abe2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800abe4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3748      	adds	r7, #72	; 0x48
 800abec:	46bd      	mov	sp, r7
 800abee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800abf2:	bf00      	nop
 800abf4:	58024400 	.word	0x58024400
 800abf8:	03d09000 	.word	0x03d09000
 800abfc:	003d0900 	.word	0x003d0900
 800ac00:	0800bb40 	.word	0x0800bb40

0800ac04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ac04:	b480      	push	{r7}
 800ac06:	b083      	sub	sp, #12
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac10:	f003 0301 	and.w	r3, r3, #1
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d00a      	beq.n	800ac2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	685b      	ldr	r3, [r3, #4]
 800ac1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	430a      	orrs	r2, r1
 800ac2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac32:	f003 0302 	and.w	r3, r3, #2
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d00a      	beq.n	800ac50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	685b      	ldr	r3, [r3, #4]
 800ac40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	430a      	orrs	r2, r1
 800ac4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac54:	f003 0304 	and.w	r3, r3, #4
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d00a      	beq.n	800ac72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	430a      	orrs	r2, r1
 800ac70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac76:	f003 0308 	and.w	r3, r3, #8
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d00a      	beq.n	800ac94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	685b      	ldr	r3, [r3, #4]
 800ac84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	430a      	orrs	r2, r1
 800ac92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac98:	f003 0310 	and.w	r3, r3, #16
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d00a      	beq.n	800acb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	689b      	ldr	r3, [r3, #8]
 800aca6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	430a      	orrs	r2, r1
 800acb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acba:	f003 0320 	and.w	r3, r3, #32
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d00a      	beq.n	800acd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	689b      	ldr	r3, [r3, #8]
 800acc8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	430a      	orrs	r2, r1
 800acd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d01a      	beq.n	800ad1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	685b      	ldr	r3, [r3, #4]
 800acea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	430a      	orrs	r2, r1
 800acf8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad02:	d10a      	bne.n	800ad1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	685b      	ldr	r3, [r3, #4]
 800ad0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	430a      	orrs	r2, r1
 800ad18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d00a      	beq.n	800ad3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	685b      	ldr	r3, [r3, #4]
 800ad2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	430a      	orrs	r2, r1
 800ad3a:	605a      	str	r2, [r3, #4]
  }
}
 800ad3c:	bf00      	nop
 800ad3e:	370c      	adds	r7, #12
 800ad40:	46bd      	mov	sp, r7
 800ad42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad46:	4770      	bx	lr

0800ad48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b098      	sub	sp, #96	; 0x60
 800ad4c:	af02      	add	r7, sp, #8
 800ad4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2200      	movs	r2, #0
 800ad54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ad58:	f7f6 fbbc 	bl	80014d4 <HAL_GetTick>
 800ad5c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f003 0308 	and.w	r3, r3, #8
 800ad68:	2b08      	cmp	r3, #8
 800ad6a:	d12f      	bne.n	800adcc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ad70:	9300      	str	r3, [sp, #0]
 800ad72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad74:	2200      	movs	r2, #0
 800ad76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f000 f88e 	bl	800ae9c <UART_WaitOnFlagUntilTimeout>
 800ad80:	4603      	mov	r3, r0
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d022      	beq.n	800adcc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad8e:	e853 3f00 	ldrex	r3, [r3]
 800ad92:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ad94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad9a:	653b      	str	r3, [r7, #80]	; 0x50
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	461a      	mov	r2, r3
 800ada2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ada4:	647b      	str	r3, [r7, #68]	; 0x44
 800ada6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ada8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800adaa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800adac:	e841 2300 	strex	r3, r2, [r1]
 800adb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800adb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d1e6      	bne.n	800ad86 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2220      	movs	r2, #32
 800adbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2200      	movs	r2, #0
 800adc4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800adc8:	2303      	movs	r3, #3
 800adca:	e063      	b.n	800ae94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f003 0304 	and.w	r3, r3, #4
 800add6:	2b04      	cmp	r3, #4
 800add8:	d149      	bne.n	800ae6e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800adda:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800adde:	9300      	str	r3, [sp, #0]
 800ade0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ade2:	2200      	movs	r2, #0
 800ade4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f000 f857 	bl	800ae9c <UART_WaitOnFlagUntilTimeout>
 800adee:	4603      	mov	r3, r0
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d03c      	beq.n	800ae6e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfc:	e853 3f00 	ldrex	r3, [r3]
 800ae00:	623b      	str	r3, [r7, #32]
   return(result);
 800ae02:	6a3b      	ldr	r3, [r7, #32]
 800ae04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ae08:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	461a      	mov	r2, r3
 800ae10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae12:	633b      	str	r3, [r7, #48]	; 0x30
 800ae14:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae1a:	e841 2300 	strex	r3, r2, [r1]
 800ae1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ae20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d1e6      	bne.n	800adf4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	3308      	adds	r3, #8
 800ae2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	e853 3f00 	ldrex	r3, [r3]
 800ae34:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	f023 0301 	bic.w	r3, r3, #1
 800ae3c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	3308      	adds	r3, #8
 800ae44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae46:	61fa      	str	r2, [r7, #28]
 800ae48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae4a:	69b9      	ldr	r1, [r7, #24]
 800ae4c:	69fa      	ldr	r2, [r7, #28]
 800ae4e:	e841 2300 	strex	r3, r2, [r1]
 800ae52:	617b      	str	r3, [r7, #20]
   return(result);
 800ae54:	697b      	ldr	r3, [r7, #20]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d1e5      	bne.n	800ae26 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2220      	movs	r2, #32
 800ae5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2200      	movs	r2, #0
 800ae66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae6a:	2303      	movs	r3, #3
 800ae6c:	e012      	b.n	800ae94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2220      	movs	r2, #32
 800ae72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2220      	movs	r2, #32
 800ae7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2200      	movs	r2, #0
 800ae82:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2200      	movs	r2, #0
 800ae88:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ae92:	2300      	movs	r3, #0
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3758      	adds	r7, #88	; 0x58
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}

0800ae9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b084      	sub	sp, #16
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	60f8      	str	r0, [r7, #12]
 800aea4:	60b9      	str	r1, [r7, #8]
 800aea6:	603b      	str	r3, [r7, #0]
 800aea8:	4613      	mov	r3, r2
 800aeaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aeac:	e049      	b.n	800af42 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aeae:	69bb      	ldr	r3, [r7, #24]
 800aeb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeb4:	d045      	beq.n	800af42 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aeb6:	f7f6 fb0d 	bl	80014d4 <HAL_GetTick>
 800aeba:	4602      	mov	r2, r0
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	1ad3      	subs	r3, r2, r3
 800aec0:	69ba      	ldr	r2, [r7, #24]
 800aec2:	429a      	cmp	r2, r3
 800aec4:	d302      	bcc.n	800aecc <UART_WaitOnFlagUntilTimeout+0x30>
 800aec6:	69bb      	ldr	r3, [r7, #24]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d101      	bne.n	800aed0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800aecc:	2303      	movs	r3, #3
 800aece:	e048      	b.n	800af62 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f003 0304 	and.w	r3, r3, #4
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d031      	beq.n	800af42 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	69db      	ldr	r3, [r3, #28]
 800aee4:	f003 0308 	and.w	r3, r3, #8
 800aee8:	2b08      	cmp	r3, #8
 800aeea:	d110      	bne.n	800af0e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	2208      	movs	r2, #8
 800aef2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800aef4:	68f8      	ldr	r0, [r7, #12]
 800aef6:	f000 f839 	bl	800af6c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	2208      	movs	r2, #8
 800aefe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	2200      	movs	r2, #0
 800af06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800af0a:	2301      	movs	r3, #1
 800af0c:	e029      	b.n	800af62 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	69db      	ldr	r3, [r3, #28]
 800af14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800af1c:	d111      	bne.n	800af42 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800af26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800af28:	68f8      	ldr	r0, [r7, #12]
 800af2a:	f000 f81f 	bl	800af6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	2220      	movs	r2, #32
 800af32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	2200      	movs	r2, #0
 800af3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800af3e:	2303      	movs	r3, #3
 800af40:	e00f      	b.n	800af62 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	69da      	ldr	r2, [r3, #28]
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	4013      	ands	r3, r2
 800af4c:	68ba      	ldr	r2, [r7, #8]
 800af4e:	429a      	cmp	r2, r3
 800af50:	bf0c      	ite	eq
 800af52:	2301      	moveq	r3, #1
 800af54:	2300      	movne	r3, #0
 800af56:	b2db      	uxtb	r3, r3
 800af58:	461a      	mov	r2, r3
 800af5a:	79fb      	ldrb	r3, [r7, #7]
 800af5c:	429a      	cmp	r2, r3
 800af5e:	d0a6      	beq.n	800aeae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800af60:	2300      	movs	r3, #0
}
 800af62:	4618      	mov	r0, r3
 800af64:	3710      	adds	r7, #16
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}
	...

0800af6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800af6c:	b480      	push	{r7}
 800af6e:	b095      	sub	sp, #84	; 0x54
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af7c:	e853 3f00 	ldrex	r3, [r3]
 800af80:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800af82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800af88:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	461a      	mov	r2, r3
 800af90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af92:	643b      	str	r3, [r7, #64]	; 0x40
 800af94:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800af98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800af9a:	e841 2300 	strex	r3, r2, [r1]
 800af9e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800afa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d1e6      	bne.n	800af74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	3308      	adds	r3, #8
 800afac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afae:	6a3b      	ldr	r3, [r7, #32]
 800afb0:	e853 3f00 	ldrex	r3, [r3]
 800afb4:	61fb      	str	r3, [r7, #28]
   return(result);
 800afb6:	69fa      	ldr	r2, [r7, #28]
 800afb8:	4b1e      	ldr	r3, [pc, #120]	; (800b034 <UART_EndRxTransfer+0xc8>)
 800afba:	4013      	ands	r3, r2
 800afbc:	64bb      	str	r3, [r7, #72]	; 0x48
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	3308      	adds	r3, #8
 800afc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800afc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800afc8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800afcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800afce:	e841 2300 	strex	r3, r2, [r1]
 800afd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800afd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d1e5      	bne.n	800afa6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afde:	2b01      	cmp	r3, #1
 800afe0:	d118      	bne.n	800b014 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	e853 3f00 	ldrex	r3, [r3]
 800afee:	60bb      	str	r3, [r7, #8]
   return(result);
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	f023 0310 	bic.w	r3, r3, #16
 800aff6:	647b      	str	r3, [r7, #68]	; 0x44
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	461a      	mov	r2, r3
 800affe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b000:	61bb      	str	r3, [r7, #24]
 800b002:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b004:	6979      	ldr	r1, [r7, #20]
 800b006:	69ba      	ldr	r2, [r7, #24]
 800b008:	e841 2300 	strex	r3, r2, [r1]
 800b00c:	613b      	str	r3, [r7, #16]
   return(result);
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d1e6      	bne.n	800afe2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2220      	movs	r2, #32
 800b018:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2200      	movs	r2, #0
 800b020:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2200      	movs	r2, #0
 800b026:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b028:	bf00      	nop
 800b02a:	3754      	adds	r7, #84	; 0x54
 800b02c:	46bd      	mov	sp, r7
 800b02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b032:	4770      	bx	lr
 800b034:	effffffe 	.word	0xeffffffe

0800b038 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b038:	b480      	push	{r7}
 800b03a:	b085      	sub	sp, #20
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b046:	2b01      	cmp	r3, #1
 800b048:	d101      	bne.n	800b04e <HAL_UARTEx_DisableFifoMode+0x16>
 800b04a:	2302      	movs	r3, #2
 800b04c:	e027      	b.n	800b09e <HAL_UARTEx_DisableFifoMode+0x66>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2201      	movs	r2, #1
 800b052:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2224      	movs	r2, #36	; 0x24
 800b05a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	681a      	ldr	r2, [r3, #0]
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f022 0201 	bic.w	r2, r2, #1
 800b074:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b07c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2200      	movs	r2, #0
 800b082:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	68fa      	ldr	r2, [r7, #12]
 800b08a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2220      	movs	r2, #32
 800b090:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2200      	movs	r2, #0
 800b098:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b09c:	2300      	movs	r3, #0
}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	3714      	adds	r7, #20
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a8:	4770      	bx	lr

0800b0aa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b0aa:	b580      	push	{r7, lr}
 800b0ac:	b084      	sub	sp, #16
 800b0ae:	af00      	add	r7, sp, #0
 800b0b0:	6078      	str	r0, [r7, #4]
 800b0b2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b0ba:	2b01      	cmp	r3, #1
 800b0bc:	d101      	bne.n	800b0c2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b0be:	2302      	movs	r3, #2
 800b0c0:	e02d      	b.n	800b11e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2201      	movs	r2, #1
 800b0c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2224      	movs	r2, #36	; 0x24
 800b0ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	681a      	ldr	r2, [r3, #0]
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f022 0201 	bic.w	r2, r2, #1
 800b0e8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	689b      	ldr	r3, [r3, #8]
 800b0f0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	683a      	ldr	r2, [r7, #0]
 800b0fa:	430a      	orrs	r2, r1
 800b0fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f000 f850 	bl	800b1a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	68fa      	ldr	r2, [r7, #12]
 800b10a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2220      	movs	r2, #32
 800b110:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2200      	movs	r2, #0
 800b118:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b11c:	2300      	movs	r3, #0
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3710      	adds	r7, #16
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}

0800b126 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b126:	b580      	push	{r7, lr}
 800b128:	b084      	sub	sp, #16
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	6078      	str	r0, [r7, #4]
 800b12e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b136:	2b01      	cmp	r3, #1
 800b138:	d101      	bne.n	800b13e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b13a:	2302      	movs	r3, #2
 800b13c:	e02d      	b.n	800b19a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2201      	movs	r2, #1
 800b142:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2224      	movs	r2, #36	; 0x24
 800b14a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	681a      	ldr	r2, [r3, #0]
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f022 0201 	bic.w	r2, r2, #1
 800b164:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	689b      	ldr	r3, [r3, #8]
 800b16c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	683a      	ldr	r2, [r7, #0]
 800b176:	430a      	orrs	r2, r1
 800b178:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f000 f812 	bl	800b1a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	68fa      	ldr	r2, [r7, #12]
 800b186:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2220      	movs	r2, #32
 800b18c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2200      	movs	r2, #0
 800b194:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b198:	2300      	movs	r3, #0
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3710      	adds	r7, #16
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
	...

0800b1a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b085      	sub	sp, #20
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d108      	bne.n	800b1c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2201      	movs	r2, #1
 800b1b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2201      	movs	r2, #1
 800b1c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b1c4:	e031      	b.n	800b22a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b1c6:	2310      	movs	r3, #16
 800b1c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b1ca:	2310      	movs	r3, #16
 800b1cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	689b      	ldr	r3, [r3, #8]
 800b1d4:	0e5b      	lsrs	r3, r3, #25
 800b1d6:	b2db      	uxtb	r3, r3
 800b1d8:	f003 0307 	and.w	r3, r3, #7
 800b1dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	689b      	ldr	r3, [r3, #8]
 800b1e4:	0f5b      	lsrs	r3, r3, #29
 800b1e6:	b2db      	uxtb	r3, r3
 800b1e8:	f003 0307 	and.w	r3, r3, #7
 800b1ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b1ee:	7bbb      	ldrb	r3, [r7, #14]
 800b1f0:	7b3a      	ldrb	r2, [r7, #12]
 800b1f2:	4911      	ldr	r1, [pc, #68]	; (800b238 <UARTEx_SetNbDataToProcess+0x94>)
 800b1f4:	5c8a      	ldrb	r2, [r1, r2]
 800b1f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b1fa:	7b3a      	ldrb	r2, [r7, #12]
 800b1fc:	490f      	ldr	r1, [pc, #60]	; (800b23c <UARTEx_SetNbDataToProcess+0x98>)
 800b1fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b200:	fb93 f3f2 	sdiv	r3, r3, r2
 800b204:	b29a      	uxth	r2, r3
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b20c:	7bfb      	ldrb	r3, [r7, #15]
 800b20e:	7b7a      	ldrb	r2, [r7, #13]
 800b210:	4909      	ldr	r1, [pc, #36]	; (800b238 <UARTEx_SetNbDataToProcess+0x94>)
 800b212:	5c8a      	ldrb	r2, [r1, r2]
 800b214:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b218:	7b7a      	ldrb	r2, [r7, #13]
 800b21a:	4908      	ldr	r1, [pc, #32]	; (800b23c <UARTEx_SetNbDataToProcess+0x98>)
 800b21c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b21e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b222:	b29a      	uxth	r2, r3
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b22a:	bf00      	nop
 800b22c:	3714      	adds	r7, #20
 800b22e:	46bd      	mov	sp, r7
 800b230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b234:	4770      	bx	lr
 800b236:	bf00      	nop
 800b238:	0800bb58 	.word	0x0800bb58
 800b23c:	0800bb60 	.word	0x0800bb60

0800b240 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b240:	b084      	sub	sp, #16
 800b242:	b580      	push	{r7, lr}
 800b244:	b084      	sub	sp, #16
 800b246:	af00      	add	r7, sp, #0
 800b248:	6078      	str	r0, [r7, #4]
 800b24a:	f107 001c 	add.w	r0, r7, #28
 800b24e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b254:	2b01      	cmp	r3, #1
 800b256:	d120      	bne.n	800b29a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b25c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	68da      	ldr	r2, [r3, #12]
 800b268:	4b2a      	ldr	r3, [pc, #168]	; (800b314 <USB_CoreInit+0xd4>)
 800b26a:	4013      	ands	r3, r2
 800b26c:	687a      	ldr	r2, [r7, #4]
 800b26e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	68db      	ldr	r3, [r3, #12]
 800b274:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b27c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b27e:	2b01      	cmp	r3, #1
 800b280:	d105      	bne.n	800b28e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	68db      	ldr	r3, [r3, #12]
 800b286:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f000 faac 	bl	800b7ec <USB_CoreReset>
 800b294:	4603      	mov	r3, r0
 800b296:	73fb      	strb	r3, [r7, #15]
 800b298:	e01a      	b.n	800b2d0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	68db      	ldr	r3, [r3, #12]
 800b29e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f000 faa0 	bl	800b7ec <USB_CoreReset>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b2b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d106      	bne.n	800b2c4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	639a      	str	r2, [r3, #56]	; 0x38
 800b2c2:	e005      	b.n	800b2d0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d2:	2b01      	cmp	r3, #1
 800b2d4:	d116      	bne.n	800b304 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2da:	b29a      	uxth	r2, r3
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b2e4:	4b0c      	ldr	r3, [pc, #48]	; (800b318 <USB_CoreInit+0xd8>)
 800b2e6:	4313      	orrs	r3, r2
 800b2e8:	687a      	ldr	r2, [r7, #4]
 800b2ea:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	689b      	ldr	r3, [r3, #8]
 800b2f0:	f043 0206 	orr.w	r2, r3, #6
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	689b      	ldr	r3, [r3, #8]
 800b2fc:	f043 0220 	orr.w	r2, r3, #32
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b304:	7bfb      	ldrb	r3, [r7, #15]
}
 800b306:	4618      	mov	r0, r3
 800b308:	3710      	adds	r7, #16
 800b30a:	46bd      	mov	sp, r7
 800b30c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b310:	b004      	add	sp, #16
 800b312:	4770      	bx	lr
 800b314:	ffbdffbf 	.word	0xffbdffbf
 800b318:	03ee0000 	.word	0x03ee0000

0800b31c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b31c:	b480      	push	{r7}
 800b31e:	b083      	sub	sp, #12
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	689b      	ldr	r3, [r3, #8]
 800b328:	f023 0201 	bic.w	r2, r3, #1
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b330:	2300      	movs	r3, #0
}
 800b332:	4618      	mov	r0, r3
 800b334:	370c      	adds	r7, #12
 800b336:	46bd      	mov	sp, r7
 800b338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33c:	4770      	bx	lr

0800b33e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b33e:	b580      	push	{r7, lr}
 800b340:	b084      	sub	sp, #16
 800b342:	af00      	add	r7, sp, #0
 800b344:	6078      	str	r0, [r7, #4]
 800b346:	460b      	mov	r3, r1
 800b348:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b34a:	2300      	movs	r3, #0
 800b34c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	68db      	ldr	r3, [r3, #12]
 800b352:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b35a:	78fb      	ldrb	r3, [r7, #3]
 800b35c:	2b01      	cmp	r3, #1
 800b35e:	d115      	bne.n	800b38c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	68db      	ldr	r3, [r3, #12]
 800b364:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b36c:	2001      	movs	r0, #1
 800b36e:	f7f6 f8bd 	bl	80014ec <HAL_Delay>
      ms++;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	3301      	adds	r3, #1
 800b376:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b378:	6878      	ldr	r0, [r7, #4]
 800b37a:	f000 fa29 	bl	800b7d0 <USB_GetMode>
 800b37e:	4603      	mov	r3, r0
 800b380:	2b01      	cmp	r3, #1
 800b382:	d01e      	beq.n	800b3c2 <USB_SetCurrentMode+0x84>
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	2b31      	cmp	r3, #49	; 0x31
 800b388:	d9f0      	bls.n	800b36c <USB_SetCurrentMode+0x2e>
 800b38a:	e01a      	b.n	800b3c2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b38c:	78fb      	ldrb	r3, [r7, #3]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d115      	bne.n	800b3be <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	68db      	ldr	r3, [r3, #12]
 800b396:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b39e:	2001      	movs	r0, #1
 800b3a0:	f7f6 f8a4 	bl	80014ec <HAL_Delay>
      ms++;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	3301      	adds	r3, #1
 800b3a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f000 fa10 	bl	800b7d0 <USB_GetMode>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d005      	beq.n	800b3c2 <USB_SetCurrentMode+0x84>
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	2b31      	cmp	r3, #49	; 0x31
 800b3ba:	d9f0      	bls.n	800b39e <USB_SetCurrentMode+0x60>
 800b3bc:	e001      	b.n	800b3c2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b3be:	2301      	movs	r3, #1
 800b3c0:	e005      	b.n	800b3ce <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	2b32      	cmp	r3, #50	; 0x32
 800b3c6:	d101      	bne.n	800b3cc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	e000      	b.n	800b3ce <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b3cc:	2300      	movs	r3, #0
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3710      	adds	r7, #16
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}
	...

0800b3d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b3d8:	b084      	sub	sp, #16
 800b3da:	b580      	push	{r7, lr}
 800b3dc:	b086      	sub	sp, #24
 800b3de:	af00      	add	r7, sp, #0
 800b3e0:	6078      	str	r0, [r7, #4]
 800b3e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b3e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	613b      	str	r3, [r7, #16]
 800b3f6:	e009      	b.n	800b40c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b3f8:	687a      	ldr	r2, [r7, #4]
 800b3fa:	693b      	ldr	r3, [r7, #16]
 800b3fc:	3340      	adds	r3, #64	; 0x40
 800b3fe:	009b      	lsls	r3, r3, #2
 800b400:	4413      	add	r3, r2
 800b402:	2200      	movs	r2, #0
 800b404:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b406:	693b      	ldr	r3, [r7, #16]
 800b408:	3301      	adds	r3, #1
 800b40a:	613b      	str	r3, [r7, #16]
 800b40c:	693b      	ldr	r3, [r7, #16]
 800b40e:	2b0e      	cmp	r3, #14
 800b410:	d9f2      	bls.n	800b3f8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b414:	2b00      	cmp	r3, #0
 800b416:	d11c      	bne.n	800b452 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b41e:	685b      	ldr	r3, [r3, #4]
 800b420:	68fa      	ldr	r2, [r7, #12]
 800b422:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b426:	f043 0302 	orr.w	r3, r3, #2
 800b42a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b430:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	601a      	str	r2, [r3, #0]
 800b450:	e005      	b.n	800b45e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b456:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b464:	461a      	mov	r2, r3
 800b466:	2300      	movs	r3, #0
 800b468:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b470:	4619      	mov	r1, r3
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b478:	461a      	mov	r2, r3
 800b47a:	680b      	ldr	r3, [r1, #0]
 800b47c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b480:	2b01      	cmp	r3, #1
 800b482:	d10c      	bne.n	800b49e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b486:	2b00      	cmp	r3, #0
 800b488:	d104      	bne.n	800b494 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b48a:	2100      	movs	r1, #0
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	f000 f965 	bl	800b75c <USB_SetDevSpeed>
 800b492:	e008      	b.n	800b4a6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b494:	2101      	movs	r1, #1
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f000 f960 	bl	800b75c <USB_SetDevSpeed>
 800b49c:	e003      	b.n	800b4a6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b49e:	2103      	movs	r1, #3
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f000 f95b 	bl	800b75c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b4a6:	2110      	movs	r1, #16
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	f000 f8f3 	bl	800b694 <USB_FlushTxFifo>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d001      	beq.n	800b4b8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f000 f91f 	bl	800b6fc <USB_FlushRxFifo>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d001      	beq.n	800b4c8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4ce:	461a      	mov	r2, r3
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4da:	461a      	mov	r2, r3
 800b4dc:	2300      	movs	r3, #0
 800b4de:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4e6:	461a      	mov	r2, r3
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	613b      	str	r3, [r7, #16]
 800b4f0:	e043      	b.n	800b57a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b4f2:	693b      	ldr	r3, [r7, #16]
 800b4f4:	015a      	lsls	r2, r3, #5
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	4413      	add	r3, r2
 800b4fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b504:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b508:	d118      	bne.n	800b53c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b50a:	693b      	ldr	r3, [r7, #16]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d10a      	bne.n	800b526 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b510:	693b      	ldr	r3, [r7, #16]
 800b512:	015a      	lsls	r2, r3, #5
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	4413      	add	r3, r2
 800b518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b51c:	461a      	mov	r2, r3
 800b51e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b522:	6013      	str	r3, [r2, #0]
 800b524:	e013      	b.n	800b54e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b526:	693b      	ldr	r3, [r7, #16]
 800b528:	015a      	lsls	r2, r3, #5
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	4413      	add	r3, r2
 800b52e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b532:	461a      	mov	r2, r3
 800b534:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b538:	6013      	str	r3, [r2, #0]
 800b53a:	e008      	b.n	800b54e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b53c:	693b      	ldr	r3, [r7, #16]
 800b53e:	015a      	lsls	r2, r3, #5
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	4413      	add	r3, r2
 800b544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b548:	461a      	mov	r2, r3
 800b54a:	2300      	movs	r3, #0
 800b54c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	015a      	lsls	r2, r3, #5
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	4413      	add	r3, r2
 800b556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b55a:	461a      	mov	r2, r3
 800b55c:	2300      	movs	r3, #0
 800b55e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	015a      	lsls	r2, r3, #5
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	4413      	add	r3, r2
 800b568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b56c:	461a      	mov	r2, r3
 800b56e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b572:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	3301      	adds	r3, #1
 800b578:	613b      	str	r3, [r7, #16]
 800b57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b57c:	693a      	ldr	r2, [r7, #16]
 800b57e:	429a      	cmp	r2, r3
 800b580:	d3b7      	bcc.n	800b4f2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b582:	2300      	movs	r3, #0
 800b584:	613b      	str	r3, [r7, #16]
 800b586:	e043      	b.n	800b610 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b588:	693b      	ldr	r3, [r7, #16]
 800b58a:	015a      	lsls	r2, r3, #5
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	4413      	add	r3, r2
 800b590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b59a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b59e:	d118      	bne.n	800b5d2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d10a      	bne.n	800b5bc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b5a6:	693b      	ldr	r3, [r7, #16]
 800b5a8:	015a      	lsls	r2, r3, #5
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	4413      	add	r3, r2
 800b5ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5b2:	461a      	mov	r2, r3
 800b5b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b5b8:	6013      	str	r3, [r2, #0]
 800b5ba:	e013      	b.n	800b5e4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	015a      	lsls	r2, r3, #5
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	4413      	add	r3, r2
 800b5c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5c8:	461a      	mov	r2, r3
 800b5ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b5ce:	6013      	str	r3, [r2, #0]
 800b5d0:	e008      	b.n	800b5e4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b5d2:	693b      	ldr	r3, [r7, #16]
 800b5d4:	015a      	lsls	r2, r3, #5
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	4413      	add	r3, r2
 800b5da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5de:	461a      	mov	r2, r3
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	015a      	lsls	r2, r3, #5
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	4413      	add	r3, r2
 800b5ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5f0:	461a      	mov	r2, r3
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b5f6:	693b      	ldr	r3, [r7, #16]
 800b5f8:	015a      	lsls	r2, r3, #5
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	4413      	add	r3, r2
 800b5fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b602:	461a      	mov	r2, r3
 800b604:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b608:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	3301      	adds	r3, #1
 800b60e:	613b      	str	r3, [r7, #16]
 800b610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b612:	693a      	ldr	r2, [r7, #16]
 800b614:	429a      	cmp	r2, r3
 800b616:	d3b7      	bcc.n	800b588 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b61e:	691b      	ldr	r3, [r3, #16]
 800b620:	68fa      	ldr	r2, [r7, #12]
 800b622:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b626:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b62a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2200      	movs	r2, #0
 800b630:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b638:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b63a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d105      	bne.n	800b64c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	699b      	ldr	r3, [r3, #24]
 800b644:	f043 0210 	orr.w	r2, r3, #16
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	699a      	ldr	r2, [r3, #24]
 800b650:	4b0e      	ldr	r3, [pc, #56]	; (800b68c <USB_DevInit+0x2b4>)
 800b652:	4313      	orrs	r3, r2
 800b654:	687a      	ldr	r2, [r7, #4]
 800b656:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d005      	beq.n	800b66a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	699b      	ldr	r3, [r3, #24]
 800b662:	f043 0208 	orr.w	r2, r3, #8
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b66a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b66c:	2b01      	cmp	r3, #1
 800b66e:	d105      	bne.n	800b67c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	699a      	ldr	r2, [r3, #24]
 800b674:	4b06      	ldr	r3, [pc, #24]	; (800b690 <USB_DevInit+0x2b8>)
 800b676:	4313      	orrs	r3, r2
 800b678:	687a      	ldr	r2, [r7, #4]
 800b67a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b67c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b67e:	4618      	mov	r0, r3
 800b680:	3718      	adds	r7, #24
 800b682:	46bd      	mov	sp, r7
 800b684:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b688:	b004      	add	sp, #16
 800b68a:	4770      	bx	lr
 800b68c:	803c3800 	.word	0x803c3800
 800b690:	40000004 	.word	0x40000004

0800b694 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b694:	b480      	push	{r7}
 800b696:	b085      	sub	sp, #20
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
 800b69c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	3301      	adds	r3, #1
 800b6a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	4a13      	ldr	r2, [pc, #76]	; (800b6f8 <USB_FlushTxFifo+0x64>)
 800b6ac:	4293      	cmp	r3, r2
 800b6ae:	d901      	bls.n	800b6b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b6b0:	2303      	movs	r3, #3
 800b6b2:	e01b      	b.n	800b6ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	691b      	ldr	r3, [r3, #16]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	daf2      	bge.n	800b6a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	019b      	lsls	r3, r3, #6
 800b6c4:	f043 0220 	orr.w	r2, r3, #32
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	3301      	adds	r3, #1
 800b6d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	4a08      	ldr	r2, [pc, #32]	; (800b6f8 <USB_FlushTxFifo+0x64>)
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d901      	bls.n	800b6de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b6da:	2303      	movs	r3, #3
 800b6dc:	e006      	b.n	800b6ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	691b      	ldr	r3, [r3, #16]
 800b6e2:	f003 0320 	and.w	r3, r3, #32
 800b6e6:	2b20      	cmp	r3, #32
 800b6e8:	d0f0      	beq.n	800b6cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b6ea:	2300      	movs	r3, #0
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	3714      	adds	r7, #20
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f6:	4770      	bx	lr
 800b6f8:	00030d40 	.word	0x00030d40

0800b6fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b085      	sub	sp, #20
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b704:	2300      	movs	r3, #0
 800b706:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	3301      	adds	r3, #1
 800b70c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	4a11      	ldr	r2, [pc, #68]	; (800b758 <USB_FlushRxFifo+0x5c>)
 800b712:	4293      	cmp	r3, r2
 800b714:	d901      	bls.n	800b71a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b716:	2303      	movs	r3, #3
 800b718:	e018      	b.n	800b74c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	691b      	ldr	r3, [r3, #16]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	daf2      	bge.n	800b708 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b722:	2300      	movs	r3, #0
 800b724:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2210      	movs	r2, #16
 800b72a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	3301      	adds	r3, #1
 800b730:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	4a08      	ldr	r2, [pc, #32]	; (800b758 <USB_FlushRxFifo+0x5c>)
 800b736:	4293      	cmp	r3, r2
 800b738:	d901      	bls.n	800b73e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b73a:	2303      	movs	r3, #3
 800b73c:	e006      	b.n	800b74c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	691b      	ldr	r3, [r3, #16]
 800b742:	f003 0310 	and.w	r3, r3, #16
 800b746:	2b10      	cmp	r3, #16
 800b748:	d0f0      	beq.n	800b72c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b74a:	2300      	movs	r3, #0
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	3714      	adds	r7, #20
 800b750:	46bd      	mov	sp, r7
 800b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b756:	4770      	bx	lr
 800b758:	00030d40 	.word	0x00030d40

0800b75c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b75c:	b480      	push	{r7}
 800b75e:	b085      	sub	sp, #20
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
 800b764:	460b      	mov	r3, r1
 800b766:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b772:	681a      	ldr	r2, [r3, #0]
 800b774:	78fb      	ldrb	r3, [r7, #3]
 800b776:	68f9      	ldr	r1, [r7, #12]
 800b778:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b77c:	4313      	orrs	r3, r2
 800b77e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b780:	2300      	movs	r3, #0
}
 800b782:	4618      	mov	r0, r3
 800b784:	3714      	adds	r7, #20
 800b786:	46bd      	mov	sp, r7
 800b788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78c:	4770      	bx	lr

0800b78e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b78e:	b480      	push	{r7}
 800b790:	b085      	sub	sp, #20
 800b792:	af00      	add	r7, sp, #0
 800b794:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	68fa      	ldr	r2, [r7, #12]
 800b7a4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b7a8:	f023 0303 	bic.w	r3, r3, #3
 800b7ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7b4:	685b      	ldr	r3, [r3, #4]
 800b7b6:	68fa      	ldr	r2, [r7, #12]
 800b7b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b7bc:	f043 0302 	orr.w	r3, r3, #2
 800b7c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b7c2:	2300      	movs	r3, #0
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	3714      	adds	r7, #20
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ce:	4770      	bx	lr

0800b7d0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b083      	sub	sp, #12
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	695b      	ldr	r3, [r3, #20]
 800b7dc:	f003 0301 	and.w	r3, r3, #1
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	370c      	adds	r7, #12
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ea:	4770      	bx	lr

0800b7ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b085      	sub	sp, #20
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	3301      	adds	r3, #1
 800b7fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	4a13      	ldr	r2, [pc, #76]	; (800b850 <USB_CoreReset+0x64>)
 800b802:	4293      	cmp	r3, r2
 800b804:	d901      	bls.n	800b80a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b806:	2303      	movs	r3, #3
 800b808:	e01b      	b.n	800b842 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	691b      	ldr	r3, [r3, #16]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	daf2      	bge.n	800b7f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b812:	2300      	movs	r3, #0
 800b814:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	691b      	ldr	r3, [r3, #16]
 800b81a:	f043 0201 	orr.w	r2, r3, #1
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	3301      	adds	r3, #1
 800b826:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	4a09      	ldr	r2, [pc, #36]	; (800b850 <USB_CoreReset+0x64>)
 800b82c:	4293      	cmp	r3, r2
 800b82e:	d901      	bls.n	800b834 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b830:	2303      	movs	r3, #3
 800b832:	e006      	b.n	800b842 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	691b      	ldr	r3, [r3, #16]
 800b838:	f003 0301 	and.w	r3, r3, #1
 800b83c:	2b01      	cmp	r3, #1
 800b83e:	d0f0      	beq.n	800b822 <USB_CoreReset+0x36>

  return HAL_OK;
 800b840:	2300      	movs	r3, #0
}
 800b842:	4618      	mov	r0, r3
 800b844:	3714      	adds	r7, #20
 800b846:	46bd      	mov	sp, r7
 800b848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84c:	4770      	bx	lr
 800b84e:	bf00      	nop
 800b850:	00030d40 	.word	0x00030d40

0800b854 <memset>:
 800b854:	4402      	add	r2, r0
 800b856:	4603      	mov	r3, r0
 800b858:	4293      	cmp	r3, r2
 800b85a:	d100      	bne.n	800b85e <memset+0xa>
 800b85c:	4770      	bx	lr
 800b85e:	f803 1b01 	strb.w	r1, [r3], #1
 800b862:	e7f9      	b.n	800b858 <memset+0x4>

0800b864 <__errno>:
 800b864:	4b01      	ldr	r3, [pc, #4]	; (800b86c <__errno+0x8>)
 800b866:	6818      	ldr	r0, [r3, #0]
 800b868:	4770      	bx	lr
 800b86a:	bf00      	nop
 800b86c:	2400005c 	.word	0x2400005c

0800b870 <__libc_init_array>:
 800b870:	b570      	push	{r4, r5, r6, lr}
 800b872:	4d0d      	ldr	r5, [pc, #52]	; (800b8a8 <__libc_init_array+0x38>)
 800b874:	4c0d      	ldr	r4, [pc, #52]	; (800b8ac <__libc_init_array+0x3c>)
 800b876:	1b64      	subs	r4, r4, r5
 800b878:	10a4      	asrs	r4, r4, #2
 800b87a:	2600      	movs	r6, #0
 800b87c:	42a6      	cmp	r6, r4
 800b87e:	d109      	bne.n	800b894 <__libc_init_array+0x24>
 800b880:	4d0b      	ldr	r5, [pc, #44]	; (800b8b0 <__libc_init_array+0x40>)
 800b882:	4c0c      	ldr	r4, [pc, #48]	; (800b8b4 <__libc_init_array+0x44>)
 800b884:	f000 f944 	bl	800bb10 <_init>
 800b888:	1b64      	subs	r4, r4, r5
 800b88a:	10a4      	asrs	r4, r4, #2
 800b88c:	2600      	movs	r6, #0
 800b88e:	42a6      	cmp	r6, r4
 800b890:	d105      	bne.n	800b89e <__libc_init_array+0x2e>
 800b892:	bd70      	pop	{r4, r5, r6, pc}
 800b894:	f855 3b04 	ldr.w	r3, [r5], #4
 800b898:	4798      	blx	r3
 800b89a:	3601      	adds	r6, #1
 800b89c:	e7ee      	b.n	800b87c <__libc_init_array+0xc>
 800b89e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8a2:	4798      	blx	r3
 800b8a4:	3601      	adds	r6, #1
 800b8a6:	e7f2      	b.n	800b88e <__libc_init_array+0x1e>
 800b8a8:	0800c400 	.word	0x0800c400
 800b8ac:	0800c400 	.word	0x0800c400
 800b8b0:	0800c400 	.word	0x0800c400
 800b8b4:	0800c404 	.word	0x0800c404

0800b8b8 <log>:
 800b8b8:	b470      	push	{r4, r5, r6}
 800b8ba:	ee10 1a90 	vmov	r1, s1
 800b8be:	ee10 3a10 	vmov	r3, s0
 800b8c2:	f04f 34ff 	mov.w	r4, #4294967295
 800b8c6:	429c      	cmp	r4, r3
 800b8c8:	f101 4040 	add.w	r0, r1, #3221225472	; 0xc0000000
 800b8cc:	4c72      	ldr	r4, [pc, #456]	; (800ba98 <log+0x1e0>)
 800b8ce:	f500 1090 	add.w	r0, r0, #1179648	; 0x120000
 800b8d2:	4184      	sbcs	r4, r0
 800b8d4:	ed2d 8b02 	vpush	{d8}
 800b8d8:	ea4f 4211 	mov.w	r2, r1, lsr #16
 800b8dc:	d35a      	bcc.n	800b994 <log+0xdc>
 800b8de:	4a6f      	ldr	r2, [pc, #444]	; (800ba9c <log+0x1e4>)
 800b8e0:	4291      	cmp	r1, r2
 800b8e2:	bf08      	it	eq
 800b8e4:	2b00      	cmpeq	r3, #0
 800b8e6:	f000 80c5 	beq.w	800ba74 <log+0x1bc>
 800b8ea:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800b8ee:	ee30 0b47 	vsub.f64	d0, d0, d7
 800b8f2:	4b6b      	ldr	r3, [pc, #428]	; (800baa0 <log+0x1e8>)
 800b8f4:	ee20 2b00 	vmul.f64	d2, d0, d0
 800b8f8:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 800b8fc:	ee20 4b02 	vmul.f64	d4, d0, d2
 800b900:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800b904:	eea6 7b00 	vfma.f64	d7, d6, d0
 800b908:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 800b90c:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
 800b910:	eea6 7b02 	vfma.f64	d7, d6, d2
 800b914:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 800b918:	eea5 6b00 	vfma.f64	d6, d5, d0
 800b91c:	ed93 5b1a 	vldr	d5, [r3, #104]	; 0x68
 800b920:	ed93 3b1e 	vldr	d3, [r3, #120]	; 0x78
 800b924:	eea5 6b02 	vfma.f64	d6, d5, d2
 800b928:	ed93 5b1c 	vldr	d5, [r3, #112]	; 0x70
 800b92c:	eea3 5b00 	vfma.f64	d5, d3, d0
 800b930:	ed93 3b20 	vldr	d3, [r3, #128]	; 0x80
 800b934:	eea3 5b02 	vfma.f64	d5, d3, d2
 800b938:	ed93 3b22 	vldr	d3, [r3, #136]	; 0x88
 800b93c:	eea3 5b04 	vfma.f64	d5, d3, d4
 800b940:	eea5 6b04 	vfma.f64	d6, d5, d4
 800b944:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
 800b948:	eea6 7b04 	vfma.f64	d7, d6, d4
 800b94c:	eeb0 2b47 	vmov.f64	d2, d7
 800b950:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800ba80 <log+0x1c8>
 800b954:	eeb0 6b40 	vmov.f64	d6, d0
 800b958:	eeb0 3b40 	vmov.f64	d3, d0
 800b95c:	eea0 6b07 	vfma.f64	d6, d0, d7
 800b960:	eea0 6b47 	vfms.f64	d6, d0, d7
 800b964:	ee30 8b46 	vsub.f64	d8, d0, d6
 800b968:	ee26 1b06 	vmul.f64	d1, d6, d6
 800b96c:	eea1 3b05 	vfma.f64	d3, d1, d5
 800b970:	ee30 7b43 	vsub.f64	d7, d0, d3
 800b974:	ee30 0b06 	vadd.f64	d0, d0, d6
 800b978:	eea1 7b05 	vfma.f64	d7, d1, d5
 800b97c:	ee25 5b08 	vmul.f64	d5, d5, d8
 800b980:	eea5 7b00 	vfma.f64	d7, d5, d0
 800b984:	eea2 7b04 	vfma.f64	d7, d2, d4
 800b988:	ee33 0b07 	vadd.f64	d0, d3, d7
 800b98c:	ecbd 8b02 	vpop	{d8}
 800b990:	bc70      	pop	{r4, r5, r6}
 800b992:	4770      	bx	lr
 800b994:	f1a2 0410 	sub.w	r4, r2, #16
 800b998:	f647 70df 	movw	r0, #32735	; 0x7fdf
 800b99c:	4284      	cmp	r4, r0
 800b99e:	d924      	bls.n	800b9ea <log+0x132>
 800b9a0:	18d8      	adds	r0, r3, r3
 800b9a2:	eb41 0401 	adc.w	r4, r1, r1
 800b9a6:	4320      	orrs	r0, r4
 800b9a8:	d105      	bne.n	800b9b6 <log+0xfe>
 800b9aa:	ecbd 8b02 	vpop	{d8}
 800b9ae:	2001      	movs	r0, #1
 800b9b0:	bc70      	pop	{r4, r5, r6}
 800b9b2:	f000 b885 	b.w	800bac0 <__math_divzero>
 800b9b6:	483b      	ldr	r0, [pc, #236]	; (800baa4 <log+0x1ec>)
 800b9b8:	4281      	cmp	r1, r0
 800b9ba:	bf08      	it	eq
 800b9bc:	2b00      	cmpeq	r3, #0
 800b9be:	d0e5      	beq.n	800b98c <log+0xd4>
 800b9c0:	0413      	lsls	r3, r2, #16
 800b9c2:	d403      	bmi.n	800b9cc <log+0x114>
 800b9c4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800b9c8:	4393      	bics	r3, r2
 800b9ca:	d104      	bne.n	800b9d6 <log+0x11e>
 800b9cc:	ecbd 8b02 	vpop	{d8}
 800b9d0:	bc70      	pop	{r4, r5, r6}
 800b9d2:	f000 b88d 	b.w	800baf0 <__math_invalid>
 800b9d6:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 800ba88 <log+0x1d0>
 800b9da:	ee20 7b07 	vmul.f64	d7, d0, d7
 800b9de:	ec53 2b17 	vmov	r2, r3, d7
 800b9e2:	f1a3 7150 	sub.w	r1, r3, #54525952	; 0x3400000
 800b9e6:	ee17 3a10 	vmov	r3, s14
 800b9ea:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 800b9ee:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 800b9f2:	f502 12d0 	add.w	r2, r2, #1703936	; 0x1a0000
 800b9f6:	0d16      	lsrs	r6, r2, #20
 800b9f8:	1e1c      	subs	r4, r3, #0
 800b9fa:	4b29      	ldr	r3, [pc, #164]	; (800baa0 <log+0x1e8>)
 800b9fc:	f3c2 3046 	ubfx	r0, r2, #13, #7
 800ba00:	0536      	lsls	r6, r6, #20
 800ba02:	1b8d      	subs	r5, r1, r6
 800ba04:	eb03 1100 	add.w	r1, r3, r0, lsl #4
 800ba08:	ed91 7b24 	vldr	d7, [r1, #144]	; 0x90
 800ba0c:	ec45 4b16 	vmov	d6, r4, r5
 800ba10:	1512      	asrs	r2, r2, #20
 800ba12:	eea6 5b07 	vfma.f64	d5, d6, d7
 800ba16:	ee07 2a90 	vmov	s15, r2
 800ba1a:	ee25 2b05 	vmul.f64	d2, d5, d5
 800ba1e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800ba22:	ed93 4b00 	vldr	d4, [r3]
 800ba26:	ee25 1b02 	vmul.f64	d1, d5, d2
 800ba2a:	ed91 7b26 	vldr	d7, [r1, #152]	; 0x98
 800ba2e:	eea4 7b06 	vfma.f64	d7, d4, d6
 800ba32:	ee35 4b07 	vadd.f64	d4, d5, d7
 800ba36:	ee37 0b44 	vsub.f64	d0, d7, d4
 800ba3a:	ed93 7b02 	vldr	d7, [r3, #8]
 800ba3e:	ee30 0b05 	vadd.f64	d0, d0, d5
 800ba42:	eea7 0b06 	vfma.f64	d0, d7, d6
 800ba46:	ed93 7b04 	vldr	d7, [r3, #16]
 800ba4a:	ed93 6b08 	vldr	d6, [r3, #32]
 800ba4e:	eea7 0b02 	vfma.f64	d0, d7, d2
 800ba52:	ed93 7b06 	vldr	d7, [r3, #24]
 800ba56:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 800ba5a:	eea6 7b05 	vfma.f64	d7, d6, d5
 800ba5e:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 800ba62:	eea3 6b05 	vfma.f64	d6, d3, d5
 800ba66:	eea6 7b02 	vfma.f64	d7, d6, d2
 800ba6a:	eea1 0b07 	vfma.f64	d0, d1, d7
 800ba6e:	ee30 0b04 	vadd.f64	d0, d0, d4
 800ba72:	e78b      	b.n	800b98c <log+0xd4>
 800ba74:	ed9f 0b06 	vldr	d0, [pc, #24]	; 800ba90 <log+0x1d8>
 800ba78:	e788      	b.n	800b98c <log+0xd4>
 800ba7a:	bf00      	nop
 800ba7c:	f3af 8000 	nop.w
 800ba80:	00000000 	.word	0x00000000
 800ba84:	41a00000 	.word	0x41a00000
 800ba88:	00000000 	.word	0x00000000
 800ba8c:	43300000 	.word	0x43300000
	...
 800ba98:	000308ff 	.word	0x000308ff
 800ba9c:	3ff00000 	.word	0x3ff00000
 800baa0:	0800bb68 	.word	0x0800bb68
 800baa4:	7ff00000 	.word	0x7ff00000

0800baa8 <with_errno>:
 800baa8:	b513      	push	{r0, r1, r4, lr}
 800baaa:	4604      	mov	r4, r0
 800baac:	ed8d 0b00 	vstr	d0, [sp]
 800bab0:	f7ff fed8 	bl	800b864 <__errno>
 800bab4:	ed9d 0b00 	vldr	d0, [sp]
 800bab8:	6004      	str	r4, [r0, #0]
 800baba:	b002      	add	sp, #8
 800babc:	bd10      	pop	{r4, pc}
	...

0800bac0 <__math_divzero>:
 800bac0:	b082      	sub	sp, #8
 800bac2:	2800      	cmp	r0, #0
 800bac4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800bac8:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800bacc:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800bad0:	ed8d 7b00 	vstr	d7, [sp]
 800bad4:	ed9d 0b00 	vldr	d0, [sp]
 800bad8:	ed9f 7b03 	vldr	d7, [pc, #12]	; 800bae8 <__math_divzero+0x28>
 800badc:	2022      	movs	r0, #34	; 0x22
 800bade:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800bae2:	b002      	add	sp, #8
 800bae4:	f7ff bfe0 	b.w	800baa8 <with_errno>
	...

0800baf0 <__math_invalid>:
 800baf0:	eeb0 7b40 	vmov.f64	d7, d0
 800baf4:	eeb4 7b47 	vcmp.f64	d7, d7
 800baf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bafc:	ee30 6b40 	vsub.f64	d6, d0, d0
 800bb00:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800bb04:	d602      	bvs.n	800bb0c <__math_invalid+0x1c>
 800bb06:	2021      	movs	r0, #33	; 0x21
 800bb08:	f7ff bfce 	b.w	800baa8 <with_errno>
 800bb0c:	4770      	bx	lr
	...

0800bb10 <_init>:
 800bb10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb12:	bf00      	nop
 800bb14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb16:	bc08      	pop	{r3}
 800bb18:	469e      	mov	lr, r3
 800bb1a:	4770      	bx	lr

0800bb1c <_fini>:
 800bb1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb1e:	bf00      	nop
 800bb20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb22:	bc08      	pop	{r3}
 800bb24:	469e      	mov	lr, r3
 800bb26:	4770      	bx	lr
